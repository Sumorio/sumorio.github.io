[{"title":"PicGo Bug \"unable to verify the first certificate\"","path":"/posts/5e927dfc.html","content":"记录一次神奇的Bug：图床工具PicGo。 问题描述在使用 PicGo 进行图片上传时，出现一个关于TLS证书验证的错误，log日志错误信息具体如下： 123456789101112[PicGo ERROR] &#123; &quot;method&quot;: &quot;PUT&quot;, &quot;url&quot;: &quot;https://api.github.com/repos/Sumorio/BlogPic/contents/douban-id.png&quot;, &quot;statusCode&quot;: 0, &quot;message&quot;: &quot;unable to verify the first certificate&quot;, &quot;stack&quot;: &quot;Error: unable to verify the first certificate at TLSSocket.onConnectSecure (node:_tls_wrap:1530:34) at TLSSocket.emit (node:events:394:28) at TLSSocket._finishInit (node:_tls_wrap:944:8) at TLSWrap.ssl.onhandshakedone (node:_tls_wrap:725:12)&quot;, &quot;response&quot;: &#123; &quot;status&quot;: 0, &quot;statusCode&quot;: 0, &quot;body&quot;: &quot;&quot; &#125;&#125; 第一次出现关于TLSSocket的问题，让人迷惑… 原因分析查阅资料发现： 有的人为了可以顺利访问github用到steam++加速，steam++对用户有安装安全证书； 有的人为了可以顺利访问github用到fastgithub加速，同样有安装安全证书。 结论：出现bug的原因与网络加速工具有关，在使用fastgithub类似的加速工具时，可能引发一些网络通信问题（尤其涉及 SSL 证书验证），从而导致图床上传失败。 在网络通信中，SSL 证书是确保通信安全的关键组成部分。服务器使用 SSL 证书来证明其身份，并加密传输的数据，以防止第三方窃听或篡改。 当访问一个使用 SSL（或其继任者 TLS）加密的网站或服务时，浏览器会验证服务器的 SSL 证书，确保连接安全。 然而，某些网络加速工具可能会修改网络流量，甚至可能与 SSL证书验证机制发生冲突。 这可能导致 SSL 证书验证失败，因为服务器的证书无法正常验证，从而出现类似 &quot;unable to verify the first certificate&quot; 的错误。 解决方案！！！！关闭FastGithub 类似的网络加速工具 ！！！ 回到正常世界的感觉真好。 参考文件PIcGo官方FAQ","tags":["Bug"],"categories":["技术向","PicGo"]},{"title":"中国为什么采用西方的公元纪年？公元和公元前的区别？21世纪起始于2000年还是2001年？","path":"/posts/6c2469a4.html","content":"公元纪年，全称为“基督降临年纪年法”，简称“公历纪年”，是一种被全球广泛接受的线性时间划分与命名体系。起源可追溯到罗马帝国时期的意大利神学家狄奥尼修斯。这一纪年方法以公元元年为基准，源于一个广为流传的宗教传说，即耶稣基督的诞生之年。在中国历史坐标系中，公元元年恰好对应西汉平帝元始元年，这是中国历史上一个重要的时间节点。以这一年份为分界线，从此将历史划分为两个阶段：公元前（AD|Anno Domini）和公元后（BC|Before Christ）。 起源公元纪年的概念最早由6世纪的罗马神学家 狄奥尼修斯 提出，目的是为了确定复活节的日期。在此之前，罗马帝国和许多其他文明使用了多种纪年方法，如以城市建立的年份、统治者在位的年份等作为纪年起点。狄奥尼修斯试图制定一个基于耶稣基督出生年的新纪元，以取代当时使用的罗马建国纪年（AUC）和使用君主统治年份的方式。然而，他的计算并不精确，现代学者普遍认为耶稣的出生年份比狄奥尼修斯计算的时间早几年。 区分和计算方式 公元和公元前的区分十分直观：公元标志着耶稣基督出生后的年份，公元前则表示耶稣基督出生前的年份。公元使用AD标识，例如AD 2023年表示耶稣出生后的2023年；公元前使用BC标识，例如500 BC表示耶稣出生前500年。 重要的是要注意，没有公元0年这个概念。公元前1年（1 BC）之后直接是公元1年（AD 1）。这一点在跨越公元前后进行年份计算时尤其重要，因为它意味着从公元前1年到公元1年实际上只跨越了一年，而不是两年。 计算案例如果我们需要计算从公元前200年到公元200年的总年数，我们不能简单地将这两个数字相加，因为不存在公元0年。正确的计算方法是将公元前的年数与公元的年数相加，然后减去1（200 + 200 - 1 &#x3D; 399年），因此从公元前200年到公元200年共有399年。 中国为什么采用西方的公元纪年尽管中国历史上有自己的纪年系统，如干支纪年和皇帝年号，但在19世纪末到20世纪初，随着西方影响的增加和国际交流的加深，公元纪年方式开始在中国被采用。特别是在新中国成立以后，为了促进国际交流，统一纪年方式，公元纪年被正式采纳并逐渐成为中国社会的主要纪年方法。 此外，公元纪年因其简洁性和国际通用性，在科学、教育和国际交往中被广泛采用。尽管中国传统文化中依然保留着农历和其他传统纪年方法，但在官方文件、教育和国际交往中，公元纪年已成为标准使用。 重点1、在公元前体系中，年份是倒数的，越往前的年份数字越大，而越接近公元元年（即公元前1年），数字逐渐减小至1。而在公元纪年体系中，则是以公元元年的方式为起点，逐年递增，直至今日。 2、公元体系并不包括公元0年这一概念。这意味着公元前1年（1 BC）之后直接是公元1年（AD 1）。这个过渡对于历史事件的定年具有特殊意义，因为它影响了跨越这一分界点的时间计算。例如，从公元前1年到公元1年实际上是一年的时间跨度，而不是两年。 3、耶稣基督的传统出生年份被选定为公元纪年的起点，即公元元年，标志着人类历史的一个新纪元的开始。（PS：然而，现代学者普遍认为这一年份可能不是耶稣实际出生的年份，他们基于历史和天文学的证据，推测耶稣可能在公元前的某个时间出生。） 4、 如果已知的两个时间都是公元前或都是公元后，那么，计算时间的公式就是：A－B&#x3D;C。 如果已知的两个时间一个是公元前,一个是公元后，那么计算时间的公式就是：A+B－1&#x3D;C。 以公元2024年为例，它表示从公元元年开始计算的第2024个年份。公元前2024年，指从耶稣基督出生前的那一年开始倒计时，倒退2024个年份的节点。经过计算可以得知：公元前2024年 距今 公元2024年（2024+2024-1）&#x3D;4047年。 5、 世纪：就是百位上的数（或百千位上的数）的+1：如1898年,百千位是18,18+1&#x3D;19,就是19世纪； 年代：就看年份的十位数，如1898年,十位是9,所以是九十年代；1355年,十位是5,就是五十年代。 1世纪&#x3D;100年，1年代&#x3D;10年，所以1世纪&#x3D;10年代。 从公元1年开始计算（公元1年的前一年，称为公元前1年），一个世纪由100年组成，一个年代由10年组成。1-100年为第一世纪，101-200年为第二世纪，……。要确定某一年属于哪个世纪、哪个年代，可以从年份的个位数和十位数来判断。 6、 因为公元纪年法是从公元元年开始纪年的，即公元1年，没有公元0年。因此第一个世纪是从公元1年到公元100年，共一百年时间，以此类推，每个世纪都是从尾号为1的年份开始，到尾号为100的年份结束。 公元前21世纪 等价于 公元前2100-公元前2001年。公元21世纪 等价于 公元2001.1.1-公元2100.12.31年。 7、50年代以前为前期，50年代以后为后期；或者前30年为前期，后30年为后期，中间40年为中期。 8、耶稣基督的诞生年份被定为西元元年。自6世纪到10世纪，西元纪元逐渐成为基督教国家通用的纪元标准，当时被称为“基督纪元”。随着基督教的影响力不断扩大，西元纪元也被世界上的大多数国家所采用，并逐渐通用“公元”这一称谓，并用A.D.（Anno Domini，意为“主的年代”）来表示。在历史学研究中，耶稣诞生前的时代被称为“西元前”，常用B.C.（Before Christ，意为“基督以前”）来表示；而耶稣诞生后的时代则是“西元后”，简称“西元”。这种纪年方式随着基督教在中国的传播，逐渐与中国传统的夏历纪年法有所区别，被称为“新历”、“公历”，而在这个新历元年之前的时代自然就叫“公元前”了。因此，“公元前”可视为“西元前”（B.C）在中国的一种俗称。 练习1、新中国于1949年成立，到现在多少年了？ ​ 2024-1949&#x3D;75年 2、秦王朝公元前221年建立，公元前207年灭亡，它存在了多少年？ ​ 221-207&#x3D;14年 3、皇帝这个称号在我国存在了多少年？ 1912+221-1&#x3D;2132年 4、280年处于多少世纪多少年代？是中期还是晚期？ 3世纪八十年代，晚期 5、公元前212年处于多少世纪多少年代？ 公元前3世纪末期 6、21世纪是从哪一年到哪一年？ 2001~2100年 7、19世纪60年代是从哪年到哪年？ 1860~1869年 8、前5世纪40年代是从哪一年到哪一年？ 前449~前440年 9、前475年距今多少年？属于多少世纪的前期还是后期？ 475+2016-1&#x3D;2490年 前5世纪前期","tags":["历史常识"],"categories":["杂文向","历史常识"]},{"title":"“龙生九子，各有不同”是指哪九子？","path":"/posts/fd968aff.html","content":"“龙生九子”是一个成语，在古代传说中，龙生有九子，都不成龙，各有不同，各有所好。比喻同胞兄弟品质、爱好各不相同。也可寓意孩子不一定要跟随父母的成长道路，每个孩子有自己的爱好和选择，应顺其自然，莫要强加压力。出自明·徐应秋《玉芝堂谈荟·龙生九子》：“龙生九子不成龙，各有所好。” 龙生九子的几个版本 版本一：囚牛 | 睚眦 | 嘲风 | 蒲牢 | 狻猊 | 赑屃 | 狴犴 | 负屃 | 螭吻 版本二：赑屃 | 螭吻 | 蒲牢 | 狴犴 | 饕餮 | 蚣蝮 | 睚眦 | 狻猊 | 椒图 其他龙子：螭 | 麒麟 | 犼 | 貔貅 “龙生九子”的解释“龙生九子”是一个成语，在古代传说中，龙生有九子都不成龙，各有不同，各有所好。用来比喻同胞兄弟品质、爱好各不相同。也可寓意孩子不一定要跟随父母的成长道路，他们有自己的爱好和选择，应顺其自然，父母莫要强加压力。出自明·徐应秋《玉芝堂谈荟·龙生九子》：“龙生九子不成龙，各有所好。” 所谓“龙生九子”，并非龙恰好生九子。中国传统文化中，以九来表示极多，有至高无上地位，九是个虚数，也是贵数，所以用来描述龙子。龙有九子这个说法由来已久，但是究竟是哪九种动物一直没有说法，直到明朝才出现了各种说法。明代一些学人笔记，如陆容的《菽园杂记》、李东阳的《怀麓堂集》、杨慎的《升庵集》、李诩的《戒庵老人漫笔》、徐应秋的《玉芝堂谈芸》等，对诸位龙子的情况均有记载，但不统一。 传说的由来 龙子传说还得从叶公说起。 龙子和龙一样，也是不断发展、沿革逐渐形成的。虽然有关龙子的说法不一，但有一点，龙子的昆仲数目是取得共识的，即龙有九个儿子，龙承九子，子子不同。这是自古以来众所周知的，但它们怎么会留在人间各司一职，就有一段不为人知的故事了，这还要从刘伯温说起。 相传，刘伯温本是玉帝身前一位天神，元末明初，天下大乱，战火不断，饥荒遍地。玉帝令刘伯温转世辅佐明君，以定天下，造福苍生，并赐斩仙剑，号令四海龙王，但龙王年老体弱，事务繁多，因此派出了自己的九个儿子。龙九子个个法力无边，神通广大。他们跟随刘伯温征战多年，为朱元璋打下了大明江山，又助朱棣夺得了皇位。当它们功得圆满准备返回天廷复命之时，明成祖朱棣这个野心极大的帝王却想永远把它们留在自己身边，安邦定国，雄霸天下。于是他便借修筑紫禁城为名，拿了刘伯温的斩仙剑号令九子。但九子仍是神兽，顿时呼风唤雨，大发雷霆。朱棣见斩仙剑震不住九子，便决定用计，他对九子老大说：“你力大无穷，能驮万斤之物，如果你能驮走这块先祖的神功圣德碑，我就放你们走。”大儿子一看原来是一块小小的石碑，便毫不犹豫地驮在了身上，但用尽法力却寸步难行。原来，神功圣德碑乃记载“真龙天子”生前一世所做功德（善事）之用（功德是无量的），又有两代帝王的玉玺印章，能镇四方神鬼。八子眼看老大被压在碑下，不忍离去，便决定一起留在人间，但发誓永不现真身。朱棣虽然留住了九子，但得到的却仅仅是九个塑像般的神兽。刘伯温得知此事后，也弃朱棣而去，脱离肉身返回天廷。朱棣后悔莫及，为了警示后人不要重蹈覆辙，便让九子各司一职，流传千古。 据说一次明孝宗朱佑樘曾经心血来潮，问以博学着称的礼部尚书李东阳：“朕闻龙生九子，九子各是何等名目？”李东阳竟也不能回答，退朝后七拼八凑，拉出了一张清单。按李东阳的清单，龙的九子是：趴蝮、嘲风、睚眦、、椒图、螭吻、蒲牢、狻猊、囚牛。不过在民间传说中的龙子却远远不止这几个，狴犴、貔貅、饕餮等等都被传说是龙的儿子。其实所谓龙生九子，并非龙恰好生九子。中国古代传统文化中，往往以九来表示极多，而且有至高无上的地位。九是个虚数，又是个贵数，所以用来描述龙子。如果非要选出九子来的话，也应该选出其中在民间影响最大的九个。李东阳也是一时急于交差，所提之名单并不具代表性。 龙的孩子 对于“龙生九子”，影响较大的一种说法是： 1. 囚牛（qiú niú） 囚牛嗜乐器，常驻琴头赏乐曲 囚牛,是龙生九子中的老大，平生爱好音乐，它常常蹲在琴头上欣赏弹拨弦拉的音乐，因此琴头上便刻上它的遗像。这个装饰现在一直沿用下来，一些贵重的胡琴头部至今仍刻有龙头的形象，称其为“龙头胡琴”。 2. 睚眦（yá zì） 睚眦性好杀，紧抱刀环看着家 睚眦，龙之二子，龙身豺首，性格刚烈，好勇擅斗，嗜杀好斗，总是嘴衔宝剑，怒目而视，刻镂于刀环、剑柄吞口，以增加自身的强大威力。俗语说：一饭之德必偿，睚眦之怨必报。睚眦便成了克煞一切邪恶的化身。 3. 嘲风（cháo fēng） 嘲风鸟化身，自由好险蹲殿头 兽形，平生好险又好望，通常把它雕刻在殿台角上。嘲风，不仅象征着吉祥、美观和威严，而且还具有震慑妖魔、清除灾祸的含义。 4. 蒲牢（pú láo） 蒲牢身材小，生性好吼为钟钮 形似盘曲的龙，平生好鸣好吼，洪钟上的龙形兽钮便是它的雕像。蒲牢虽为龙子，却一向害怕鲸鱼。当鲸鱼一发起攻击，它就吓得大声吼叫。人们根据它的特点，把蒲牢铸为钟纽，又将敲钟的木杵作成鲸鱼形状。敲钟时，让鲸鱼攻击蒲牢，使之“响入云霄”。 5. 狻猊（suān ní） 狻猊形似狮，立于香炉把烟吃 又称金猊、灵猊，其形状象狮子，平生喜静不喜动，喜欢倚立于香炉足上，人们便用它来装饰佛座和香炉上的脚部。据说它是随着佛教传入中国的。由于佛祖释迦牟尼有“无畏的狮子”之称，人们便将它安排成佛的座席，或者雕在香炉脚上。 6. 赑屃（bì xì） 赑屃形似龟，碑下负重显神威 又名龟趺fū、霸下、填下、龙龟，形似龟，平生力大无穷、好负重，碑座下通常是它的像。相传上古时期，它常背起三山五岳来兴风作浪。后被夏禹收服，它服从大禹的指挥，推山挖沟，疏通河道，为夏禹立下汗马功劳。治水成功后，大禹担心它又到处撒野，便搬来顶天立地的特大石碑，让赑屃驮着，沉重的石碑压得它不能随便乱走。 7. 狴犴（bì àn） 狴犴形似虎，立于狱门不喊苦 又名宪章，样子像虎，好狱讼，又有威力，人们便将其刻铸在监狱门上，这就是为什么民间有虎头牢的说法。另外，相传它主持正义，能明是非，秉公而断，再加上它的形象威风凛凛，因此它也被装饰在衙门大堂两则以及官员出巡回避的牌上，以维护公堂的肃然之气。 8. 负屃（fù xì） 负屃似龙形，盘绕石碑好斯文 负屃，似龙形，排行老八，平生好文，石碑两旁的文龙是其遗像。我国碑碣的历史久远，内容丰富，它们有的造型古朴，碑体细滑、明亮，光可鉴人；有的刻制精致，字字有姿，笔笔生动；也有的是名家诗文石刻，脍炙人口，千古称绝。而负屃十分爱好这种闪耀着艺术光彩的碑文，它甘愿化做图案文龙去衬托这些传世的文学珍品，把碑座装饰得更为典雅秀美。它们互相盘绕着，看去似在慢慢蠕动，和底座的霸下相配在一起，更觉壮观。 9. 螭吻（chī wěn） 螭吻形似兽，屋顶远望看宇宙 又名鸱尾或鸱吻，鱼身龙头，平生好吞，殿脊两端的龙头是它的雕像。在佛经中，螭吻是雨神座下之物，能够灭火。所以人们把它安在屋脊两头希望能消灾灭火。 其他漂流在外的龙子： 饕餮（tāo tiè） 饕餮喜欢吃，立於鼎盖护饮食 传说中的一种凶恶贪食的野兽，古代青铜器上面常用它的头部形状做装饰，叫做饕餮纹。传说是龙生九子之一。《左传．文公十八年》上有这么一段﹕“缙云氏有不才之子，贪于饮食，冒于货贿。侵欲崇侈，不可盈厌；聚敛积实，不知纪极。不分孤寡，不恤穷匮。天下之民以比三凶，谓之饕餮。” 椒图 九爷椒图似螺蚌，乐守铺首于门上 椒图，龙生九子之一，形状像螺蚌，性好闭，最反感别人进入它的巢穴，铺首衔环为其形象。因而人们常将其形象雕在大门的铺首上，或刻画在门板上。螺蚌遇到外物侵犯，总是将壳口紧合。人们将其用于门上，大概就是取其可以紧闭之意，以求安全吧。 螭&#x2F;螭首（chī） 螭首无角之龙，身黄嘴大爱喝水 又名地蝼，古代汉族神话传说中的龙生九子之一，是一种没有角的龙。 汉族古建筑或器物、工艺品上常用它的形状作装饰。嘴大、肚子能容纳很多水，在建筑中多用于排水口的装饰，称为螭首散水。 盘螭，则是他两两盘卷的样子，曹植《桂之树行》即有上有栖鸾，下有盘螭的句子。 麒麟 麒麟是中国古代汉族神话传说中的传统祥兽，性情温和，传说能活两千年。 麒麟是古代的仁兽，集龙头、鹿角、狮眼、虎背、熊腰、蛇鳞、马蹄、猪尾于一身，乃吉祥之宝，从古到今都是公堂上的装饰，以振官威之用，也是权贵的象征。古人认为，麒麟出没处，必有祥瑞。现在普遍认为麒麟就是长颈鹿。 雄的名麒，雌的名麟。麒麟的形状像鹿，尾似牛尾，麒有独角，麟无角。人都把麒麟与青龙、白虎、朱雀、玄武并称五大祥兽，其实并非麒麟，乃是黄龙。 犼（hǒu） 俗称为望天吼，朝天吼，传说是龙王的儿子，有守望习惯。 华表柱顶之蹬龙（即朝天吼）对天咆哮，被视为上传天意，下达民情。又有文献记载，观音菩萨的坐骑即为“朝天吼”。 貔貅（pí xiū） 又名天禄、辟邪：是中国古代神话传说中的一种神兽，龙头、马身、麟脚，形状似狮子，毛色灰白，会飞。貔貅凶猛威武，它在天上负责的巡视工作，阻止妖魔鬼怪、瘟疫疾病扰乱天庭。 古时候人们常也用貔貅来作为军队的称呼。它有嘴无肛门，能吞万物而从不泻，可招财聚宝，只进不出，神通特异。现在很多中国人佩戴貔貅的玉制品正因如此。 八夏（bā xià） 霸下性好水，立水桥柱吓水鬼 𧈢𧏡、八夏、霸下，传说中龙生九子之一，性喜水，被雕成桥柱、建筑上滴水的兽形。常常被误写为蚣蝮（Gōng fù），样子似鱼非鱼，善水性，体态优美，饰于石桥栏杆顶端。","tags":["神话传说"],"categories":["杂文向","神话传说"]},{"title":"追梦：由“闹钟声”引发的“梦的探索”","path":"/posts/e995d344.html","content":"每个人都做过梦，在漫漫历史长河中，梦一直是人们津津乐道的话题。从古代神秘的象形文字，到当代的科幻电影，无论是文人墨客还是科学家，大家都试图揭示梦的真面目。那么，梦的本质究竟是什么，是不可言说的预知未来还是简单纯粹的奇思妙想？我们为什么会在梦中与现实相左，却又惊人的在相似的世界中相遇？当清晨的闹钟声将我从如梦似幻的场景中唤醒，我开始思考：这场梦意味着什么？我为什么会做梦？科学家们如何解释梦境？带着强烈的好奇心，我期待着得到答案… 一. 梦的定义和分类一些大家耳熟能详的梦的分类包括白日梦、鬼压床以及噩梦，但在现代睡眠科学的分类下，梦的种类远不止这些。接下来的第一部分，我们将对梦的定义及其不同类型进行详细地介绍和讨论。这不仅有助于我们建立一个全面而具体的概念框架，而且也是理解和探讨梦的科学关键。让我们开始这场关于梦的探索之旅吧。 1. 定义梦的存在极大地丰富了我们的生命体验，虽然大部分人对梦有直观的理解，但是科学地定义梦，才能使我们更好的研究和探讨关于梦的问题及现象。 科学家们定义梦为一种在睡眠，特别是快速眼动阶段出现的主观意识状态，包含自发产生的图像、想法、情绪和感觉。在此过程中，某些大脑区域（包括视觉处理区、情绪区、记忆储存区）比清醒状态更活跃，而处理逻辑思考和自我意识的前额叶皮层活动减弱。这导致我们的梦境充满了奇特而非逻辑的情节。根据“激活-合成假说”，梦是大脑将随机神经活动的感官输入编织成有意义的故事的尝试。 2. 分类现代睡眠科学对于梦的种类可谓五花八门。我们可以从多个层面对梦进行分类，如生理机制、形式、内容以及其对个体生活的影响等： 1.根据梦境的生理机制： REM（快速眼动）：通常在入睡后90分钟左右开始出现，持续时间可达一小时。通常伴随着活跃的眼球运动（脑电波可观测）这类梦通常更加真实和生动，有时甚至包含不合理或超现实的元素。通常，人们在这个阶段的梦中能记住大部分梦境的内容。 NREM（非快速眼动）：它被进一步划分为三个阶段（轻睡眠、深睡眠和重度深睡眠）。大部分睡眠时间我们都在非快速眼动阶段度过。此阶段的梦通常更为模糊、简短、单调和碎片化，难以记忆。 2.根据梦的形式： 清晰梦：你知道自己正在做梦，并可能控制自己在梦中的行动和环境。（比如白日梦） 非清晰梦：你不能知道或控制自己正在做梦。（比如梦游） 3.根据梦的内容： 日常梦：这种类型的梦描绘了我们生活中的常见场景，如在工作、学校、家庭中的情景等等。通常涉及到最近的记忆或经历。 噩梦：这类梦所带来的情感通常是焦虑、恐惧或绝望，有时情况严重的人可能因此影响到日常生活。 预知梦：这种梦通常包含一些隐喻或象征性的元素，可能会对个人的生活或未来提出某种建议或指示。 4.根据梦对个体的影响： 创伤后压力障碍（PTSD）梦：这种梦常出现在有创伤经历的人中，例如战争老兵或者严重事故的幸存者等，梦中常常再次体验创伤情景，带来极度的恐惧与痛苦。（如复现梦） 梦游：这是一种睡眠障碍，在非快速眼动阶段NREM阶段，患者可能会起床行走，甚至更复杂的行为，但是醒来后难以记得这段经历。 睡眠瘫痪症（鬼压床）：”鬼压床”在科学上被称为【睡眠瘫痪症】，也叫睡瘫或梦魇。这是一种睡眠障碍，通常发生在刚进入睡眠或将醒未醒时。患者感觉自己刚刚醒过来，可以睁开双眼并看到周围事物的影像以及听到周围的声音，但是无法移动躯干和四肢，也无法发出声音，有时会产生幻觉并看到虚拟的影像，严重的病例会感到呼吸困难。一般全球有4&#x2F;10的人一生至少会经历一次此类症状。 以上的分类并非彼此独立，而是互相交织，深入分析这些分类结构将有助于我们对梦这一现象有更深入的理解。后文，我们将继续关注梦的生物学机制，特别是其在大脑中的表现和处理过程。 二. 梦的发展历程梦的研究可以追溯到古代文明，但是直到19世纪末和20世纪初，心理学家和神经科学家才开始系统地研究梦。从弗洛伊德和荣格的理论探索到现代神经科学的进展，梦的研究历程展示了从心理分析到生理机制的转变。 在古代，由于对宗教信仰和神秘主义的依赖，人类对梦的理解受到了很大的限制，但随着科学的发展，我们逐渐认识到，梦是一种功能性的、建设性的心理和神经生物活动。 19世纪末，心理学家开始承认和强调梦在心理调适过程中的功能。弗洛伊德、荣格等人的理论表明，个体的梦可能是他们未解决的问题、压抑的冲动和未完成的愿望的象征表现，这为梦在心理咨询和治疗中的应用铺平了道路。 再后来，生物学和神经科学的研究揭示了大脑和身体在我们梦中的作用和影响。研究人员通过观察和分析患者的睡眠模式以及在不同睡眠阶段大脑的活动，发现梦可能与记忆巩固、情绪调整和问题解决等过程有关。 现在，神经学家正在进一步探索大脑的哪些部分在我们的梦境中发挥主导作用，以及它们如何塑造我们梦境的内容。这样的研究正在以前所未有的方式推动我们对自我意识和人类意识的理解。 P1 历史视角：神谕&amp;感官残余早期文明，梦往往被视为超自然力量的象征，是与神灵沟通的渠道，或者是预示未来的符号。例如古埃及，梦被理解为与神灵对话的方式，人们相信梦中的信息和象征符号来自于神灵。同一时代的古希腊，梦被视为神谕的形式，解梦被看作是指导人们行动和预测未来的手段。然而，亚里士多德作为最早系统研究梦的哲学家之一，他的观点与此大有不同。亚里士多德主张梦是感官经验的残余，是感官刺激在我们脑中留下的影像。 📌时间线（公元前） 古埃及(公元前2000年)：梦是与神交流的方式，梦中的象征和信息被视为神谕或预言。《切斯特·比蒂梦书》展示了人们最早对梦的记录和解释。 古希腊(公元前500-8年)：古希腊对梦的探讨达到了哲学层面。 🦉柏拉图（公元前427-347年）：《理想国》 观点：梦是对人的欲望和内在冲突的表达。认为梦境揭示了人内心的真实面貌，是对人的心理和精神状态的反映。 🦉亚里士多德（公元前384-322年）：《论梦》 观点：梦不是神的信息，而是个人感官经验的残余。认为梦是感觉运动的内部影像，这些影像在睡眠时由于感官活动的减弱而变得活跃。 🦉荷马（公元前8世纪）:《荷马史诗》 观点：梦是神的指示和预言，揭示了神祇对人类命运的影响。 无论古埃及还是古希腊，他们都对梦给予了极高的重视，通过各自的视角和方式来解读梦境。尤其是亚里士多德对梦的自然解释，为今天科学研究梦奠定了基础。 P2 心理学视角：心理功能人类对梦的研究始于古文明，但进入心理学领域的系统研究要数20世纪以来。早期心理学对梦的研究主要关注梦境的象征意义和梦在个人心理发展中的作用。弗洛伊德将梦视为愿望满足的手段，认为梦境中的象征是压抑欲望的表达。荣格的理论则进一步发展了对梦的理解，他认为梦是个人潜意识与集体潜意识相连接的桥梁，梦境中的象征和动机反映了深层的心理过程。 随着科研技术和理论的发展，近代心理学对梦的研究逐渐转向更富实证性的角度，更加注重梦与认知过程的关系，探讨梦如何影响情绪调节、问题解决和创造力。梦被认为是一种认知模拟，通过构建虚拟场景来帮助人们探索解决问题的新途径。 📌时间线（20th） 🦉弗洛伊德的梦解析理论（1856年 - 1939年）：《梦的解析》 观点：梦是愿望的满足。强调梦境是潜意识的表达，反映了被压抑的愿望和欲望。 🦉荣格的分析心理学（1875年 - 1961年）：《心理学与宗教》《心理类型》 观点：梦是集体潜意识的表达。强调梦境不仅反映了个体的潜意识冲突，还包含了与人类共享的原型和集体记忆有关的象征。 🦉神经心理学（20th后-）：阿兰·霍布森《梦的天文学》（1980年）、罗伯特·麦克卡利格特《大脑的梦》（1977年） 观点：梦是大脑在睡眠中的活动。强调梦是大脑在睡眠中产生的结果，与REM睡眠阶段的神经活动密切相关。 🦉认知心理学（20th后-21th初）：斯蒂芬·劳伦斯《觉醒梦》（1985年）、罗伯特·西格尔《梦的记忆》（2009年） 观点：梦反映了大脑在整合和加工信息。强调梦境是大脑在整合和加工信息的结果，对日常生活中的经验和记忆进行重塑和重新组织。 P3 生物学视角：睡眠产物&amp;大脑活动移步神经生物学的视角，梦通常被理解为大脑在睡眠中的必然产物。现代科学研究通过脑电图等成像技术，揭示出梦主要发生在睡眠的快速眼动（REM）阶段，此时大脑的活动模式与清醒状态相似，但人体呈现肌肉松弛的阶段，人们在这个阶段常常经历最丰富、最生动的梦境。在整个睡眠周期中，非快速眼动（NREM）和快速眼动（REM）这两个阶段交替出现。 📌时间线（20th后- ） 🦉阿兰·霍布森《梦的天文学》&amp;罗伯特·麦克卡利格特《大脑的梦》（1977年） 观点：霍布森和麦克卡利格特提出了著名的“激发-合成理论”，他们认为梦境是大脑对于来自下丘脑的随机信号进行解释的结果，这些信号被解释为具有情感和意义的梦境。这种角度将梦境理解为大脑在睡眠中产生的结果。在REM睡眠时，大脑皮质活跃，但肌肉松弛，这种状态可能促使梦境的产生。 通过先进的脑成像技术，如功能磁共振成像（fMRI）和脑电图（EEG），科学家们能够观察到大脑在梦境发生期间的活动。据研究发现，梦境期间，大脑的某些区域（如前额叶皮质、杏仁体和海马体）表现出高度活跃，这些区域与感知、情绪、记忆处理等心理过程发挥着关键角色。。 整体来看，梦境是神经网络内部活动的一种表现形式，它涉及信息处理、记忆巩固和情绪调节等各种复杂的认知功能。霍布森和麦卡利格特提出的激发-合成理论，着重揭示了梦境背后的生物学基础，在理解梦的神经生物学机制上提供了重要的视角和理论支撑。 三. 梦的生物学机制对于梦的生物学机制，我们主要关注大脑活动、神经递质和激素分泌，以及它们如何共同构造出我们的梦境。 1. 大脑活动 睡眠被分为五个阶段：清醒、N1、N2、N3和REM（快速眼动）。其中，N1到N3阶段被归类为非快速眼动（NREM）睡眠，这几个阶段的睡眠深度各不相同。 清醒阶段：这是人们从清醒状态过渡到睡眠状态的阶段（思维休息），大约会持续5到10分钟。此阶段的眼电活动减弱，肌肉张力开始放松。 N1阶段：也被称为轻睡眠阶段，大脑开始减慢节奏，眼球稍有运动。 N2阶段：人们会进入深睡眠状态阶段，眼球不再移动，心率和体温开始下降。 N3阶段：被称为重度深睡眠阶段，此时大脑波活动最低，如果在这个阶段被唤醒，会感到非常困乏。 REM（快速眼动）阶段：在入睡大约90分钟后会进入到这个阶段，也被称为“做梦”阶段。此阶段的脑波活动与清醒时相似，眼球会快速地前后移动，大部分的梦境都会在此阶段出现。REM睡眠的初始部分大约会持续10分钟，但随着夜晚的深入，REM阶段的持续时间会逐渐变长。 睡眠周期大约每90~120分钟发生一次循环，一夜睡眠约4~5个周期。首先是非快速眼动睡眠，然后是较短时间的快速眼动睡眠，然后循环重新开始。快速眼动睡眠出现在非快速眼动睡眠之后，在上半夜出现的比例很少，后半夜出现得很多。特别是在凌晨4~6点阶段，占到整个睡眠时长的70%。这也是儿童清晨睡不踏实、老年人早醒的原因之一。虽然REM睡眠只占据了“总睡眠时间”的25%，但它对认知功能的保持和情绪的调节非常重要。 2. 激素 激素的分泌也会影响到梦的产生。 激素（hormone），音译荷尔蒙，是一种可以改变细胞新陈代谢的化学物质，可以被看作是一种化学信使。主要由内分泌腺（如甲状腺、肾上腺等）产生并释放到血液中。血液将激素带到身体全身，当激素到达靶细胞时，它们与细胞表面或细胞内的受体结合，引发一系列生物化学反应。激素控制生长和发育、调节新陈代谢、影响心理状态等。 褪黑素，是一个主导调节睡眠-觉醒周期的重要激素。在光线较弱或黑暗的环境下，它的分泌会增加，从而在一定程度上促进睡眠。然而，褪黑素并不直接参与到梦境的产生，而是通过调节睡眠-觉醒周期，从而间接影响梦的产生。 皮质醇，是一种应对压力时人体会分泌的激素，长期的压力水平的增加会导致皮质醇的分泌增加，有可能导致睡眠问题，包括噩梦。此外，有些药物也可能影响梦的产生，这些药物主要是通过作用于神经递质或激素的分泌来实现。 雌激素和孕酮：这两种主要的女性性激素也会影响睡眠。在女性的月经周期中，雌激素和孕酮的变化可能会导致睡眠问题。更年期的女性由于激素水平的下降，可能会经历热潮红（潮热）和其他症状，进一步干扰睡眠。 睾酮：男性的主要性激素，它在一天中的早晨达到顶峰，然后逐渐下降，找到这种生物节律可能有助于理解男性的睡眠模式。 3. 神经递质 神经递质在我们的梦境中起着重要作用。 神经递质是由神经元分泌的信号分子，可以通过突触影响另一个细胞，这个接收信号的细胞可以是另一个神经元、腺体、或者肌细胞。 我们可以把神经递质的作用过程比喻为一个渡海泳赛：突触前（presynaptic）神经元负责合成神经递质并将其包裹在突触小泡（synaptic vesicle）内，在神经元发生冲动时，突触小泡在突触前神经元末梢处，通过胞吐作用，将神经递质释放到突触间隙（synaptic cleft）中。神经递质分子借由扩散作用抵达突触后（postsynaptic）细胞膜，能特异性地结合且作用于突触后神经元或效应器细胞上的受体，起到改变通道蛋白构像，激活第二信使系统等作用，进而导致突触后神经元的电位或代谢发生变化，诱发一定效应。 研究表明，神经递质在我们的梦境中起着重要作用。例如， 乙酰胆碱（Ach, Acetylcholine）是常见于中枢及周边神经系统中的神经传导物质。 在快速眼动（REM）阶段，当我们的大部分梦境发生时，乙酰胆碱的活动上升到白天的水平，促进了生动、激动人心甚至是不可思议的梦境的发生。实际上，乙酰胆碱就像是”梦的化学物质”，它引导了我们梦的多数活动。 高仑定（（Galantamine，一种乙酰胆碱酯酶抑制剂）被认为是诱发梦境的一种有效手段。乙酰胆碱酯酶抑制剂通过抑制乙酰胆碱酯酶的活动，防止乙酰胆碱的降解，使乙酰胆碱的浓度上升。（同上条） 多巴胺（Dopamine）是重要的神经递质，大脑和肾脏能通过除去前体L-多巴的羧基合成多巴胺。在脑中，不同的多巴胺通路起到不同的作用。其中一条关键的多巴胺通路参与了奖赏系统的调控，这个奖赏系统驱动着我们的动机和愿望，并在梦境中起到关键作用。梦境往往涉及我们的期望，愿望，和欲望，这些都是被多巴胺驱动的。此外，多巴胺的分泌量也会受到我们的情绪状态、压力水平和环境刺激的影响，而这些因素都会影响我们的梦境。 所以，神经递质，是通过影响我们的大脑中的特定神经通路和细胞间的信号传输，从而影响我们的梦境。 4. 生物性多元因素除了以上所述的因素，还有一些其他的生物因素可能会影响梦的产生，如基因、性别差异，以及年龄。 基因：虽然关于基因如何影响梦的研究还很有限，但一些证据表明，基因可能影响我们在睡眠中经历的不同阶段，这反过来可能影响我们的梦境。例如，有研究发现，有些人可能具有更长的REM（快速眼动）睡眠阶段，这是梦境最易发生的阶段。 性别差异：有研究发现，男性和女性在梦境内容和梦的频率上存在差异。例如，女性的梦中往往有更多的场景在室内，并且女性的梦境通常比男性的梦更生动、更富有细节；男性的梦境通常包含更多的物理攻击情绪和性欲。男性的梦更常发生在户外，并且往往包含更多的积极情绪。这些性别差异可能与社会化过程有关。 年龄：随着年龄的增长，我们的梦境和睡眠模式也会发生变化。研究发现，儿童和青少年可能经历更多的噩梦，而老年人可能在晚上醒来的次数增加，这可能影响他们的梦境。此外，年龄也可能影响我们如何记忆和解释梦境。 总的来说，深入了解梦的生物学机制，能够进一步揭示这一神秘现象背后的科学规律。虽然我们已经对梦的生物学机制有了一定的理解，但仍有许多问题等待我们去探索与解答。 四. 梦与意识的关系当我们讨论梦与意识的关系时，一个关键的概念是我们如何理解“意识”。一种常见的定义是，意识是我们对自我和环境的主观体验。这个定义与我们对梦的理解密切相关，因为梦本身也是一种非常独特的主观体验。 梦与清醒思考：有时候，我们可以将梦看作是一种特殊形式的思考。梦的内容通常由我们的思想、感觉和记忆构成，并且经常以难以预测的方式组合在一起。因此，我们可以说，梦提供了一个平台，让我们能够以一种自由而非线性的方式进行思考。此外，清醒梦是一种特殊的梦境状态，梦者意识到自己正在梦境中，并能在一定程度上控制梦境的内容，这种状态进一步强化了梦与清醒思考之间的联系。 梦与记忆：众多的研究都支持梦与记忆之间存在关联。有的研究发现，一些梦境是基于过去的经验和记忆，这可能反映出大脑在睡眠期间复习和重新组织记忆。此外，还有研究发现，REM睡眠可能与记忆的巩固有关，而噩梦和复发性梦，往往与创伤后的记忆有关。 梦与情感：梦境多半伴随着情感体验，无论是愉快还是令人不安的情绪。研究表明，梦可能在情绪处理中扮演重要角色，特别是对于负面或压力情绪的处理。有些心理治疗方法，如显式记忆系统疗法，利用梦境来帮助人们处理和理解他们的情绪问题。 梦与意识构建：许多心理学家和哲学家认为，梦提供了一个独特的视角来研究意识的构建。他们认为，梦境反映出我们的自我意识，可以被视为是意识的一种无约束的形式。在梦境中，我们的意识不再受到物理现实的限制，可以自由地探索各种可能性。 因此，梦境不仅是睡眠期间的现象，也是理解意识及其构建的重要窗口。 五. 梦在文化和社会中的角色在不同的文化和社会中，梦在人们的日常生活和精神世界中占据着不同的地位，往往具有重要的象征和功能角色。 宗教和精神层面： 在许多文化中，梦被看作是神灵与人类之间沟通的桥梁。如在古埃及，梦被视为神秘和神圣的，可以预示未来。在许多原始文化中，如一些原住民社群，梦也被视为灵性的通道，可以启发精神见解和修炼的道路。 心理和情感处理： 一些文化鼓励人们探索和分析自己的梦，从而获取对自我和生活的深层理解。例如，Psychoanalysis理论的创始人佛洛伊德，即认为梦是一种表达和处理潜意识冲突的途径。此外，现代心理咨询也常使用梦分析的方法来帮助人们处理与成长、情感和心理问题。 创新和创造性思维： 无论是在文学、电影还是艺术作品中，梦都是一个常见且重要的主题。许多知名的创作都是源于作者的梦境，例如达利的超现实主义画作，或是于科尔桑塔纳的著名歌曲《黑魔鬼》。 社交和社区建设： 在一些社群中，分享和讨论梦是增进互相理解和建立社区连结的重要方式。例如，美洲原住民的部分部族，就有共同分析、解读梦境的传统活动。 尽管梦在许多文化中扮演着重要角色，但也存在着对梦的消极解读或忽视的情况。在某些现代西方社会中，梦可能被视为无意义的心理噪音，或者过于强调权威解读，可能导致对个体体验的否定和压抑。 不过，梦作为人类共有的体验，依然展现了丰富的文化差异，为我们理解和欣赏不同文化提供了独特的视角，同时也反映了人类意识的多样性和复杂性。 六. 梦境研究的挑战与前景对于梦境的研究，我们面临着几个重要的挑战和机遇。 🎯挑战 主观性和个体差异： 梦境是极为主观且个体化的体验，每个人的梦都有其独特性。由于记忆偏差和自我报告误差等因素的影响，收集梦境数据常受到限制。 无法直接观察： 与其他心理现象不同，梦境无法在清醒状态下直接观察或测量。目前的神经成像技术虽能窥见梦与大脑活动的联系，但梦境内容的直接获取仍然具有相当大的挑战性。 理论和概念争议： 对于梦的性质和功能，学术界还存在许多不同的理论和观点，如梦到底是随机的大脑活动？还是深层心理和神经过程的反映？这些理论差异丰富了我们的理解，但同时也增加了研究的复杂性。 🔆前景 新技术的应用：新兴技术如脑电图（EEG）、功能性磁共振成像（fMRI）以及睡眠监测设备，为梦境生理研究提供了新工具。人工智能（AI）和大数据分析也为梦境分析与理解开辟新途径。 跨学科的研究方法：多学科的融合，如心理学、神经科学、认知科学和文化研究，将丰富对梦境的理解。跨文化比较，对梦境在文学、电影和艺术中的表现，也将为我们揭示梦境的社会文化影响。 临床和治疗的应用：梦境研究所带来的新知识和技术，如梦境增强和梦境内容控制，可能被应用于临床和心理咨询实践中，以帮助人们处理心理问题，如焦虑、抑郁和失眠等。 虽然梦境研究面临着挑战，但随着科技不断进步，我们对梦境的理解将更加深入。未来，梦境研究有望在临床治疗、艺术创新甚至哲学探讨中发挥重要作用。 总的来说，每个学科和领域对理解梦都有所贡献，丰富了我们的理解。从古代对梦境的各种神秘态度，到现代科学对其的精细解析，我们一步步揭开了梦境神秘的面纱，开始认识到，梦不仅仅是大脑在深度睡眠时的随机放映，而是一种功能性的、具有深远意义的心理和神经生物活动。梦反映了我们的期望、恐惧、希望、创意以及更深层次的自我意识，它为我们提供了一种独特的途径来了解我们的内心世界和人类的本性。 让我们一起期待，有更多的科学家、研究者和探索者能持续深入研究梦和意识的奥秘，解开人类心灵深处的谜团，带我们通向更为深远和广阔的认知空间。 文献及书籍参考目录 Freud, S. (1900). The Interpretation of Dreams. Basic Books.（弗洛伊德，西格蒙德。《梦的解析》。基本图书。） Hobson, A., &amp; McCarley, R. (1977). The Brain as a Dream State Generator: An Activation-Synthesis Hypothesis of the Dream Process. The American Journal of Psychiatry, 134(12), 1335-1348.（霍布森, 阿兰, &amp; 麦卡利格特, 罗伯特。《大脑作为梦境生成器: 一个梦过程的激发-合成假设》。美国精神病学杂志, 134(12), 1335-1348。） Aristotle. (350 BC). On Dreams. (Bell, J. I., Trans.). In The Complete Works of Aristotle: The Revised Oxford Translation (Vol. 1, pp. 432-435). Princeton University Press.（亚里士多德。《论梦》。贝尔, J. I., 译。在亚里士多德的完整作品中: 牛津修订版翻译 (第1卷, pp. 432-435)。普林斯顿大学出版社。） Jung, C. G. (1964). Man and His Symbols. Dell Publishing.（荣格, 卡尔·古斯塔夫。《人与他的象征》。戴尔出版社。） Carter, R. D. (2010). The Human Brain Book: An Illustrated Guide to its Structure, Function, and Disorders. DK Publishing.（卡特赖特, 罗伯特·D.。《人类大脑百科全书: 其结构、功能和疾病的图解指南》。DK出版社。） 乙酰胆碱 - 维基百科 Chemists show how to manufacture key ingredient to help brain function 多巴胺 - 维基百科 Dopamine - Better Health Channel Dopaminergic Contributions to Gist Memory in Schizophrenia","tags":["哲学","梦境"],"categories":["杂文向","哲学"]},{"title":"女权主义：探索性别平等之路","path":"/posts/b4ebde15.html","content":"深入探讨女权运动的历史脉络、主要派系、面临挑战，揭示女性主义对社会进步的深远影响。 前言女性主义（女权），是如今备受关注且颇具争议的话题，常常引发激烈的讨论和全民交锋。然而，许多参与讨论的群众对于”女性主义”的基本概念和理念了解甚少，导致争论往往集中于对“表面的、田园女性主义”的批判，无法触及更深层次的讨论。 其实，”女性主义“远不仅仅是关于性别平等的社会运动，它还深深根植于各种哲学思潮之中，其中自由主义、激进主义和后现代主义等多个流派，每个流派都有其独特的理念和目标。理解女性主义各大流派的核心诉求，对于全面理解”女性主义”的多样性和复杂性至关重要。 或许有人会提出疑问，作为男性，我们是否有必要深入探讨”女性主义”？ 在这里，有三个基本观点需要特别强调： 承认不平等的存在 不论性别如何，我们都不可否认历史和现实中普遍存在的不平等现象。长期以来，女性一直承受着各种形式的压迫，包括在职场中遭受性别歧视，以及社会对女性的期望和评价充满偏见。正确认识这一现象是理解“女性主义”的基础。 性别平等的重要性 性别平等远不仅仅涉及到女性的权利，它是社会文明进步的标志。支持男女平等，意味着支持构建更加公正和健康的社会结构，这是男性和女性共同的责任和追求。 探索实现平等的多元途径 实现性别平等是一项复杂的任务，不同的女性主义流派提出了多种解决方案。这些方案反映了性别平等目标的多样性和多层面性。因此，我们有必要深入研究和理解这些不同流派，以更好地探讨实现性别平等的多种可能途径。 在接下来的探讨中，我们将深入解析自由主义女性主义、激进主义女性主义、社会主义女性主义以及后现代主义女性主义等不同流派，揭示它们各自的理念和诉求。通过这一过程，希望能够促进对“女性主义”更加全面和深入的理解，为建设一个性别平等的社会齐心协力。 一. 男权&#x2F;女权&#x2F;田园女权是什么？ 在探讨女性主义的多样性和复杂性之前，了解男权社会的历史背景以及女权运动的基本概念是至关重要的。这一理解为我们深入探讨女性主义各大流派的核心诉求和改革措施提供了基础。 本节将探讨女权的起源与派系，这不仅是对女性主义历史的回顾，也是对不同女性主义流派理论基础的概述。 1. 男性主义男权（或称为父权制）是一种社会观念和体制，强调男性在社会、政治、经济和家庭中的主导地位和权力优势。在男权社会中，男性通常被视为社会的主要决策者和掌握者，而女性则受到限制，其社会角色主要局限在家庭和家务事务中。 男权的标志： 性别歧视：在男权社会中，性别不平等是显著存在的，女性通常在法律权益、薪资、工作机会和社会地位等方面受到限制。 薪资不平等：男权主义社会通常存在相同工作的男女薪资差距，即薪资不平等。 社会角色刻板印象：男权主义可能导致社会对男性和女性的刻板印象和期望，限制了他们的自由和发展。 家庭内部权力结构：男权主义观念也可以在家庭内部表现出来，强调父权，将男性视为家庭的主要经济支持者和决策者。 2. 女性主义女权是一种运动和理念，旨在消除性别不平等、性别歧视和性别压迫。女性主义强调男女在社会、政治、经济和文化领域中应该享有平等权利和机会。它追求性别平等，反对对女性的限制和偏见，主张女性能够自主决策、发展潜力，并获得与男性相等的待遇和机会。 女权的标志： 性别平等：女性主义强调男女在法律权益、社会地位、工作机会和薪资等方面应该享有平等权利，消除了性别的限制和偏见。 反性别歧视：女性主义反对基于性别的歧视，包括在职场、教育、家庭和社会各个领域中的歧视。这包括对女性的贬低、对性别的刻板印象以及对性别角色的限制。 自主权：女性主义倡导妇女有权自主决策，包括关于生殖权、婚姻和职业等方面的自主权。这也包括反对暴力、性侵犯和家庭暴力。 多元性别和包容性：现代女性主义也强调性别是一个广泛的光谱，不仅涵盖了传统的男性和女性，还包括跨性别、非二元性别和性别多元的人。女权运动支持性别多元和包容性。 3. 田园女权“田园女权”是互联网上出现的贬义词汇，主要用于指责某些自称为女性主义者的人只关注女性权益的提升而忽视或削弱男性权益，甚至利用女性主义为自己谋取不正当利益。这个词源自于对某些人误解或歪曲女性主义本意的批评，认为他们追求的是一种理想化、田园诗般的女性至上主义，而非真正意义上的性别平等。需要注意的是，这一术语并非学术用词，而是社交媒体和网络讨论中产生的，往往带有负面色彩和性别对立的意味。 🈲互联网上关于女权的词汇🈲 田园女权：通常用来贬低那些被认为只关注女性权益提升而忽视或贬低男性权益的人或观点，有时用于指控某些女性主义者自私或伪善。 白左：在中文网络用语中，这个词通常用来批评那些被视为过分政治正确或忽视实际问题而只关注少数群体权利的左翼人士，尽管这个词并不专门与女性主义相关，但有时也用于批评女权运动的某些方面。 女拳：贬义词，用来描述一些激进的或被认为是过分攻击性的女性主义者或女性主义行为。 男权：指支配社会结构和文化的男性中心主义制度，女性主义者通常使用这个词来描述和批判导致性别不平等的社会和制度。 虽然互联网上存在对女性主义的不同诠释和误解，但主流女性主义的核心仍是追求性别平等、公正和尊重多样性。 二. 女权的起源与派系 探讨女权的起源和派系后，我们将深入到自由女性主义、激进女性主义、社会主义女性主义以及后现代主义女性主义这四个主流派系的核心主张与改革措施。每个派系都有其独特的视角和方法论，对于理解女性主义运动的多维度和复杂性至关重要。 本节将探讨女权运动的历史起源，包括其早期的发展背景和随后形成的不同派系。 1. 起源及历史背景当我们探讨女权运动的起源和历史背景时，可以看到多个因素和原因推动了女性开始争取平等权益的运动。以下是这些关键因素： 启蒙思想的兴起：18世纪欧洲的启蒙思想家开始强调个体的自由和平等权利。这种思想流派为女权运动提供了理论基础，认为性别不应成为排除人们参与社会和政治事务的理由，激发了一些女性思考自己的社会地位。 工业革命的影响：工业革命导致了生产方式和社会结构的深刻变革。工厂需要大量劳动力，包括妇女，这一变化使女性有机会融入工作领域。然而，女性的劳动常常被低估和低价值化，这促使她们开始争取平等的劳动权益。 其他社会运动的启发：同一时期，废奴运动和争取民权的运动在美国取得了成功，这些运动强调平等、公正和自由的原则。这些理念也启发了一些女性，她们开始认识到，性别不平等同样需要得到解决。 文化和教育的提升：19世纪，女性的教育机会有所提高，她们开始接触到启发思考的文学和哲学作品。文学作品和媒体的兴起为女性提供了表达自己观点和要求平等的平台。 杰出女性的领导作用：一些杰出的女性成为了女权运动的领袖，通过行动和著作鼓舞了其他女性。例如，玛丽·沃斯通克拉夫特的《女权辩护》（”A Vindication of the Rights of Woman”）强调了妇女教育的重要性和平等的理念。苏珊·B·安东尼和伊丽莎白·凯迪·斯坦顿等人则积极争取妇女选举权。 2. 发展历史女权运动可以分为三个主要阶段： 第一波女权运动（19世纪末至20世纪初） 目标与成就：争取选举权 主要人物和案例：英国的妇女社会和政治联盟（WSPU）、苏珊·B·安东尼和伊丽莎白·凯迪·斯坦顿领导的妇女选举权运动。 第二波女权运动（1960s-1980s） 目标与成就：工作权、生育权和平等法律地位 主要人物和案例：贝蒂·弗里丹的《女性的神秘》 第三波女权运动（1990s-至今） 目标与成就：性别身份、多元文化和反压迫 主要人物和案例：朱迪斯·巴特勒《性别麻烦》（Gender Trouble）和跨性别权利的争取 3. 女权派系女性主义的派系产生主要是基于对两个基本问题的回答以及对两种主张的不同排列组合。 ❇️这两个基本问题是： 1-性别差异的事实问题 先天决定论：性别差异主要是由个体的生物学特征和遗传因素所确定的，与生俱来，后天无法更改。 后天建构论：性别差异主要是社会和文化因素通过社会化过程塑造的，是在个体成长过程中习得的，后天可修正。 2-性别平等的价值问题 同一性：强调男性和女性在权利、机会和社会地位等方面应该被视为完全相同的个体，不应受到性别的差异影响。 差异性：男性和女性在某些方面可能存在生理、心理或文化上的差异，但这些差异不应导致社会不平等。 ❇️根据两个基本问题的回答和主张，形成以下四种典型的女性主义派系，它们分别是： 🚩激进主义女性主义：后天建构论+差异性。强调性别差异主要由社会和文化结构决定，认为性别平等需要通过根本性的社会变革实现。 🚩自由主义女性主义 + 🚩社会主义女性主义：后天建构论+同一性。强调性别差异是后天社会构造的，女性应该与男性平等，通过法律和政策改革促进性别平等。 🚩后现代主义女性主义：后天建构论+差异性。认为性别差异是社会建构的，同时主张承认性别多样性和包容性，通过文化批判和解构社会结构来实现性别平等。 三. 女权主流派系的核心主张与改革措施在探索女性主义的多样性和复杂性时，我们可以发现不同流派以其独特的视角、理论基础和诉求，对性别不平等问题进行解析和介入。自由主义女性主义、激进女性主义、社会主义女性主义以及后现代主义女性主义，虽然在方法和目标上存在显著差异，但它们共同构成了性别研究的丰富多彩的领域，旨在挑战和改变导致性别不平等的社会结构，促进一个更加公平和包容的社会。 1. 自由女性主义（政治|教育|经济|平等主义）🗓️年代背景：20世纪中期，特别是在1960年代和1970年代女性解放运动期间获得了显著的发展。这一时期，西方社会经历了快速的社会变革，女性开始大规模进入劳动力市场，同时争取平等的教育和职业机会。 💟核心主张：后天建构论+同一性。 社会构建：强调性别不平等主要来源于社会结构和文化偏见，而不是生物学因素。 法律改革：通过法律和政策改革，如性别歧视法律和工资平等法案，在公共和私人领域实现性别平等。 🙋🏻‍♀️代表人： 贝蒂·弗里丹（Betty Friedan）著有《女性的神秘》（1963年），该书揭示了美国郊区家庭主妇的普遍不满情绪，成为1960年代女性解放运动的催化剂，核心观点包括女性在社会中受到限制和压抑，她倡导妇女争取平等的权利； 西蒙娜·德·波伏娃（Simone de Beauvoir）著有《第二性》（1949年），深刻分析了历史和文化对女性角色的塑造，提出了“女人并非生来就是女人”的观点，强调女性在男性主导社会中的地位不平等； 伊丽莎白·卡迈克尔（Elizabeth Cady Stanton）19世纪美国妇女权益运动的领袖之一，致力于争取女性的选举权和平等权利，为美国妇女权益的发展做出了重要贡献。 🔀内部分支： 政治自由女性主义： 关注女性在政治领域中的平等权益。 教育自由女性主义： 侧重于教育领域的性别平等。主张改革教育系统，提供平等的教育机会，鼓励女性参与科学、技术、工程和数学（STEM）领域的学习和职业。 经济自由女性主义： 关注女性在经济上的权益和平等。主张消除性别工资差距，提供平等的薪酬和晋升机会，支持女性创业和职业发展。 平等主义自由女性主义：强调性别平等与人权的不可分割性，主张全面的性别平等，包括法律权利、政治权利、经济权利以及教育等各个领域的平等。 💭诉求与改革方案： 法律领域： 诉求1：消除性别歧视，确保法律、政策和社会中不存在性别歧视。 改革方案：进行法律改革，取消一切形式的性别歧视法律和政策，确保法律体系反映性别平等原则，提供性别歧视举报和维权机制，加强性别歧视案件的监督和惩罚力度。 诉求2：保障个人权利，包括受教育权、选举权、就业权等。 改革方案：加强教育系统改革，确保女性和男性在受教育方面享有平等权利，提供平等的教育资源和机会。推动选举制度改革，提高女性在政治领域的代表性，确保选举权平等。制定反性别歧视法律，确保女性在就业领域享有平等权利，包括薪酬平等、职业发展平等等。 教育领域： 诉求3：加强性别平等教育，消除性别刻板印象和偏见。 改革方案：推动学校和教育机构开展性别平等教育，培养学生的性别意识和尊重。消除教材中的性别偏见，确保教育资源的平等分配。 经济领域： 诉求4：促进女性的经济独立和平等参与经济活动。 改革方案：制定政策支持女性参与职场，包括产假和育儿假政策、儿童照护设施、反性别歧视的职场环境等。鼓励女性创业和职业发展，提供融资支持和职业培训。 社会文化领域： 诉求5：改变社会文化观念，消除性别刻板印象和偏见。 改革方案：开展性别平等宣传和教育活动，提高公众对性别平等的意识。鼓励媒体和娱乐业反映性别平等原则，塑造积极的性别形象。 研究与数据领域： 诉求6：加强性别研究和数据收集，以支持性别平等政策。 改革方案：设立性别研究中心，推动性别研究和性别统计数据的收集和分析，为政策制定提供科学依据。 生殖健康领域： 诉求7：保障性健康权和生殖权。 改革方案：确保女性有权决定自己的生殖健康和生育计划，提供全面的性健康服务和避孕工具，反对强制堕胎和婚前检查等侵犯女性权利的做法。 🚫反对者观点 保守主义观点：担心追求性别平等可能破坏传统的家庭结构和社会秩序，他们主张维护传统的性别角色和价值观。 传统主义观点：强调男女应在家庭中扮演不同的角色，有助于家庭的稳定和社会的和谐。他们反对过度的性别平等。 宗教观点： 一些宗教观点认为性别角色是上帝赋予的，追求性别平等可能违反宗教信仰。宗教团体或信仰者可能反对性别平等的理念，坚持宗教规范。 反对言论： 反对者可能声称性别平等会破坏家庭价值观、导致社会混乱，或违反宗教教义。他们可能主张维持传统性别角色和家庭结构。 2. 激进女性主义（文化|生态|女同主义）🗓️年代背景：20世纪后期，尤其在1960年代和1970年代的女性解放运动中崭露头角。 💟核心主张：后天建构论+差异性。 社会制度改革：认为性别不平等嵌入在社会和文化结构之中，因此需要彻底改变社会制度，主张采取激进手段来彻底改变这些结构； 全面的女性至上和女性优越性：倡导女性解放和建立女性中心社会，认为女性更优越，认为女性应该在社会、政治和文化领域占据主导地位，以弥补历史上的不平等。 🙋🏻‍♀️代表人： 莱娅·博克斯（Leia Bocks），激进女性主义者，积极倡导通过抗议行动、示威和社会运动来推动性别平等议题。 安德里亚·德沃金（Andrea Dworkin）：在1980年代通过其著作和活动，对色情产业和性别暴力提出了强烈批评。 雪莱·米利特（Shulamith Firestone）著作《性别政治》（1969年）是激进女性主义的重要文献，分析了性别不平等的政治根源。 🔀内部分支： 文化女性主义：主张性别不仅仅是生物因素，还是文化和社会的产物。关注性别刻板印象、符号和性别权力关系，主张打破这些刻板印象和权力关系。强调改变文化以实现性别平等，包括改善媒体中的性别形象、消除性别歧视语言和行为等。 生态女性主义：关注性别和环境之间的关系，认为性别不平等与环境破坏之间存在联系，提倡可持续发展和生态正义，强调女性在环境保护和可持续发展方面的重要角色，以及女性在环境变革中面临的特定挑战。 女同主义：强调女性之间的团结和支持，反对性别之间的竞争和敌意。主张女性互助和联合抗争，认为女性应该一起为性别平等而战。重视建立女性社群和互相支持的网络，以推动女性权益的实现。 💭诉求与改革方案： 社会运动领域： 诉求1：通过示威和抗议来吸引公众关注性别不平等问题。 改革方案：组织示威、抗议、游行等公开活动，引起媒体和社会的广泛关注，推动性别平等议题成为社会焦点。 诉求2：鼓励女性走上领导地位，参与政治和决策。 改革方案：积极培养女性领导者，支持她们参与政治和决策层面，争取更多的领导职位。 诉求3：分离主义。激进女性主义倡导女性分离出男权社会，构建一个完全独立的女性社会，摆脱对男性的依赖。 诉求4：反对异性恋。激进女性主义者批评异性恋模式，并提倡女性之间的关系，反对男女关系中的权力不平等。 文化与媒体领域： 诉求3：改变媒体和文化的性别刻板印象。 改革方案：反对媒体中的性别偏见和刻板形象，推动更多积极的性别形象和故事出现在媒体和文化作品中。 教育领域： 诉求4：推动性别平等教育和意识。 改革方案：在学校和大学推广性别平等教育，培养学生的性别意识，帮助他们认识到性别不平等问题的存在。 生殖健康领域： 诉求4：摆脱男性依赖，技术手段生育。 改革方案：通过技术手段如人工授精、试管婴儿、克隆技术等，摆脱对男性的依赖，维持人类繁衍。 🚫反对者观点： 保守主义观点：反对激进手段，担心示威和抗议可能引发社会混乱。 传统主义观点：认为改变社会结构和文化应该更为谨慎，担心激进手段可能破坏传统价值观。 政治观点：一些政治势力可能反对激进女性主义的行动，视其为政治干预。 3. 社会主义女权（政治|经济|平等主义）🗓️年代背景：20世纪，特别是在社会主义国家兴起和妇女解放运动中。 💟核心主张：后天建构论+同一性。 社会主义融合：将性别平等与社会主义理念相结合，主张通过社会主义政治经济体制的改革来实现性别平等和妇女权益的保障。 政治经济改革：主张消除性别工资差距、提高女性在政府和政治组织中的代表性。 社会保障：强调建立全面的社会保障体系，确保妇女和家庭的福祉，包括儿童照护、老年照护和产假等服务。 🙋🏻‍♀️代表人： 克拉拉·祖特金（Clara Zetkin）德国社会民主工人党的领袖，她在20世纪初是国际妇女工人运动的积极支持者，倡导妇女争取政治和社会权益。 阿レ克珊德拉·科林蒂恩-卡茨（Alexandra Kollontai）俄国社会民主工党的一员，也是社会主义女性主义的倡导者之一，她强调社会主义应该与性别平等相结合。 🔀内部分支： 政治平等主义： 关注女性在政治领域的平等权益。主张增加女性在政府和政治组织中的代表比例，争取更多的女性领导者，以确保女性的声音和需求得到充分体现。 经济平等主义： 关注女性在经济上的权益和平等。主张消除性别工资差距，提供平等的薪酬和晋升机会，以及支持女性创业和职业发展。 社会保障平等主义： 强调建立全面的社会保障体系，确保妇女和家庭的福祉，包括儿童照护、老年照护和产假等服务。 💭诉求与改革方案： 政治改革： 诉求1：提高女性在政府和政治组织中的代表性。 改革方案：通过政策和法规，推动增加女性在政治决策中的参与，确保政府和政党内部有性别平等的代表。 诉求2：制定反性别歧视法律和政策。 改革方案：建立法律框架，禁止性别歧视，确保女性在政治和职场领域享有平等权利。 经济改革： 诉求3：消除性别工资差距。 改革方案：通过法规和政策，要求雇主提供平等薪酬和晋升机会，确保女性在职场中获得公平对待。 诉求4：建立儿童照护和老年照护服务。 改革方案：政府投资建设儿童照护和老年照护设施，减轻妇女在家庭照顾工作上的负担。 🚫反对者观点： 反对社会主义观点： 一些人可能反对社会主义体制，担心它会导致政府过度干预和资源分配不公平。 保守主义观点： 保守派可能反对性别平等政策，认为它们会破坏传统家庭价值观。 宗教观点： 一些宗教团体可能认为性别平等政策与他们的宗教信仰不一致，反对性别平等的推动。 政治反对： 反对派可能认为社会主义女性主义的政治议程不符合他们的政治理念，可能反对该运动的发展。 4. 后现代女性主义（文化|身份|差异性）🗓️年代背景：20世纪60年代末至70年代初，在西方国家崛起，与文化现象和社会变革紧密相关。 💟核心主张：后天建构论+差异性。 反对普遍化和单一叙事：反对将所有女性的经验归结为一个普遍适用的故事。每个女性都有独特的背景、文化和经历，因此女性经验不应被泛化或简化。 解构性别和身份：采用解构主义方法来分析性别和身份的构建。它认为性别不是固定的二元对立，而是社会、文化和语言等因素相互影响的结果，强调性别的多样性和流动性。 关注边缘化群体的经验：后现代女性主义特别强调包容性，关注被边缘化的群体，如有色人种女性、LGBTQ+社群、残疾女性等，以确保所有女性都能得到平等对待和支持。 批判权力和话语：分析社会中的权力关系，特别是塑造性别认知和行为的权力机制，同时探讨话语和象征系统如何构建性别身份。 反对绝对主义和本质主义：后现代女性主义反对任何形式的绝对主义或本质主义，主张对知识、真理和身份的相对主义和建构主义理解。它认为，通过质疑和重新审视这些概念，可以更好地理解性别不平等的复杂性和根源，从而寻找到更有效的解决方案。 🙋🏻‍♀️代表人： 贝拉·胡克斯（bell hooks）：贝拉·胡克斯是著名的后现代女性主义者，她的著作探讨了种族、性别和文化问题的交叉点，提出了多元性和权力关系的观点。 瓦吉·斯皮文（Vaginal Davis）：瓦吉·斯皮文是跨性别表演艺术家，倡导后现代女性主义和性别流动性。 朱迪斯·巴特勒（Judith Butler）：朱迪斯·巴特勒的著作《性别麻烦：性别的困扰》强调性别是一种表演，奠定了性别研究的基础，被视为后现代女性主义的代表之一。 🔀内部分支： 文化后现代女性主义： 关注文化、媒体、艺术和流行文化中的性别议题，批判性地分析女性形象、性别角色和符号。 身份政治后现代女性主义： 侧重于探讨性别身份与其他身份因素（如种族、性取向、阶级）的互动，关注多元性和身份认同的复杂性。 权力批判后现代女性主义： 强调权力关系和社会结构的分析，揭示性别不平等的根源，关注性别歧视和社会变革。 💭诉求与改革方案： 文化改革： 诉求1：批判性消费文化。 改革方案：鼓励人们对文化产品和媒体表现持批判态度，推动多元的、反映真实女性经验的文化表达。 诉求2：反对性别刻板印象。 改革方案：倡导媒体和广告行业避免强化性别刻板印象，创造多样化的形象和角色。 社会变革： 诉求3：关注性别和其他身份交叉点。 改革方案：考虑性别与其他身份因素（如种族、性取向、文化背景）的相互影响，制定包容性政策和倡导社会多元性。 诉求4：消除性别歧视。 改革方案：推动法律和政策的改革，确保性别平等和反性别歧视原则得到实施。 权力批判： 诉求5：揭示社会结构中的性别不平等。 改革方案：进行权力分析，揭示性别在社会结构和权力关系中的角色，鼓励对这些不平等现象的讨论和反思。 🚫反对者观点： 保守主义观点： 保守派可能反对后现代女性主义的文化批判和对社会结构的批判性观点，担心这些观点可能破坏传统价值观。 反女性主义观点： 一些人可能反对任何形式的女性主义，认为它们不符合他们的价值观。 反文化批判： 反对派可能认为后现代女性主义的文化批判是一种过度敏感或过于政治正确的观点，反对这种审查和批评。 四. 现代女权运动 在讨论了女权运动的历史和各主流派系后，我们将转向现代女权运动，特别是社交媒体和新兴运动方向如何影响和塑造了女权议题。 本节将展示女权运动如何适应新的社会媒体时代，以及它如何继续发展和应对新的挑战。 随着社会的快速变革，女权运动也进入了一个新的发展阶段。现代女权运动正在经历着巨大的变革和发展，其中社交媒体的兴起和新兴运动方向是两个关键驱动因素。 社交媒体的影响社交媒体在现代女权运动中发挥着巨大的作用。以下是一些社交媒体影响女权运动的关键点： 信息传播和联合行动：社交媒体平台如Twitter、Instagram和Facebook为女权活动家提供了传播信息和联合行动的强大工具。借助这些平台，女性可以分享自己的故事、经验和诉求，迅速吸引关注和支持。 全球性的声音：社交媒体使女权运动突破国界，将全球女性的声音汇聚在一起。这有助于不同地区的女性互相启发和支持，同时也引起了国际社会的注意。 挑战性别刻板印象：女性可以通过社交媒体反击性别刻板印象和性别歧视。她们以幽默和创意的方式表达对不平等的不满，吸引更多人积极参与讨论。 倡导制度变革：女权运动通过社交媒体呼吁政策变革和制度改进。#MeToo运动就是一个典型例子，它揭示了性骚扰和性侵犯问题，推动了对这些问题的关注和处理。 新运动方向现代女权运动也涌现出新的运动方向，其中一些体现了女性的新力量和诉求： #MeToo运动：#MeToo运动成为全球性的社会运动，揭示了性骚扰和性侵犯问题。数百万女性通过社交媒体分享自己的经历，这一运动不仅推动了社会对性暴力的讨论，还导致了名人和高层管理人员的丧失。 女性政治参与：越来越多的女性参与政治，争取更多的女性在政府和决策层的代表权。这一趋势在各国选举中显著体现，女性领袖和政治家的数量不断增加。 女性权益的多样化：现代女权运动也更加关注多样性和包容性，特别关注有色人种女性、LGBTQ+社群和残疾女性的权益。这种多样性有助于确保所有女性都能享有平等的权益。 经济平等：女权运动将注意力集中在经济平等方面，争取消除薪资差距、提高女性在职场的地位和机会，以及支持母职工作者。 现代女权运动适应社会变革和女性需求，社交媒体和新兴运动方向为女性发声和争取权益提供了更多机会，也使女权问题成为全球关注的焦点。 五. 女权运动的成果&#x2F;挑战 本节将从 现代女权运动的讨论 转向对 女权运动成果和挑战 的总结。 这一部分不仅是对前文内容的回顾，也是对女权运动未来方向的展望。我们将讨论女权运动所取得的成就、面临的挑战，以及每个人如何参与到这场运动中，共同推动性别平等。 女权运动是一场跨越时间和地域的斗争，旨在追求性别平等和保护女性权益。 回顾历史进程，我们可以看到女权运动所带来的深刻社会变革，例如赋予女性选举权、制定保护女性的法律（家暴）、推动职场中的性别平等、性别意识的提高（性别歧视）。这些成就极大地提升了女性在社会中的地位和权利，也改变了整个社会结构。 尽管如此，女权运动仍面临诸多挑战和难题，如薪资差距、性别暴力（依然严峻）、政治代表不足（女性从政代表较少）、文化观念根深蒂固（刻板印象坚固）等问题仍然严峻。 作为社会的一员，我们普通人也应该深思以下几个问题： 职业与家庭的平衡：在追求职业平等的同时，如何保障家庭和亲职责任不被边缘化？我们需要找到一种方式，既能确保职场的性别平等，又能维护家庭的和谐与幸福。 言论自由与政治正确性：在推动性别平等的过程中，如何平衡言论自由和避免言论伤害的界限？促进一个既尊重自由表达也倡导尊重与包容的社会环境至关重要。 男性权益的考量：在女性权益取得进步的同时，如何确保不损害男性的合法权益？女权运动的目标是寻求性别平等，而不是争夺权力的零和游戏，应鼓励男女之间的相互理解与合作。 尊重文化与宗教多样性：在推进性别平等的价值观时，如何兼顾对不同文化和宗教传统的尊重？在全球化的背景下，寻找普遍性和多样性之间的平衡点显得尤为重要。 避免身份政治带来的分裂：在强调多样性和包容性时，如何防止身份政治导致的社会分裂和对立？构建一个团结一致的社会需要我们超越单一身份标签，聚焦共同的目标和价值。 性别平等在各领域的实现：如何保证性别平等原则在教育、医疗、体育等不同领域得到全面和公正的应用？这要求我们不断审视和调整相关政策和实践，以实现真正的平等。 女权运动的历史进程时刻提醒我们，性别平等不仅是女性的议题，而是关乎整个社会的进步与发展。每个人都有责任参与这场运动，通过不断的努力和对话，共同推动构建一个更加平等、公正和包容的未来。 文献及书籍参考目录 贝蒂·弗里丹（Betty Friedan）. 《女性的神秘》（”The Feminine Mystique”）. W.W. Norton &amp; Company, 1963. 贝拉·胡克斯（bell hooks）. 《女性主义理论：从边缘到中心》（”Feminist Theory: From Margin to Center”）. Pluto Press, 1984. 西蒙娜·德·波伏娃（Simone de Beauvoir）. 《第二性》（”The Second Sex”）. Vintage, 1949. 朱迪斯·巴特勒（Judith Butler）. 《性别麻烦：女性主义和身份的颠覆》（”Gender Trouble: Feminism and the Subversion of Identity”）. Routledge, 1990. 安吉拉·Y·戴维斯（Angela Y. Davis）. 《女性、种族与阶级》（”Women, Race, &amp; Class”）. Vintage Books, 1983. 雪莱·米利特（Shulamith Firestone）. 《性别的辩证法：女性主义革命的论证》（”The Dialectic of Sex: The Case for Feminist Revolution”）. Farrar, Straus and Giroux, 1970. 钱德拉·塔尔帕德·莫汉蒂（Chandra Talpade Mohanty）. 《无边界的女性主义：解殖理论，实践团结》（”Feminism Without Borders: Decolonizing Theory, Practicing Solidarity”）. Duke University Press, 2003. 金伯莱·克伦肖（Kimberlé Crenshaw）. 《边缘的绘图：交叉性、身份政治与对有色女性的暴力》（”Mapping the Margins: Intersectionality, Identity Politics, and Violence against Women of Color”）. Stanford Law Review, 1991.","tags":["哲学","女性主义"],"categories":["杂文向","女性主义"]},{"title":"物质与意识：人类有自由意志吗","path":"/posts/e39f3cee.html","content":"物质决定意识，还是意识决定物质？ 本文脉络会按照如下框架来探讨。 首先，谈谈物质与意识是什么？ 其次，追溯物质与意识论的来源和历史演变。 接着，总结历代哲学家的观点。 最后，给出我自己的观点。 一、物质与意识是什么今天探讨一个话题：意识与物质的关系问题。 我们常听到一句话，物质决定意识。那么究竟这句话是什么意思？物质代表什么，物质为什么决定意识？首先需要明确一点，”物质决定意识“这句话是历史唯物主义中的一个核心概念，而历史唯物主义主要是由马克思和恩格斯在19世纪中叶提出，其中描述了物质与意识的相互关系： ”物质“通常指物质世界，包括自然界的物质实体和现象以及人类的社会经济条件。这些条件不仅仅包括自然资源，地理环境，还包括社会的经济结构，生产力水平，生产关系等。物质在这里被看成是形成和决定人类社会结构和人类行为的基础。 ”意识“指的是人类的思想，观念，信仰，价值观和心理状态。这其中有个人的自我意识，社会意识形态，文化观念，道德观念等。意识被视为是在物质条件的影响下形成和发展的。 为什么说”物质决定意识”？历史唯物主义认为，人类的意识和思想不是孤立存在的，他和物质生活条件密切相关。人类的社会存在决定他们的意识。也就是说，人们的生活方式、劳动方式和社会关系影响他们的思想和观念。比如，一个农业社会和一个工业社会下的成员在价值观和思维方式上会有很大不同，这与他们的物质生活条件相关。 这一理论的提出，是马克思和恩格斯对以往唯心主义和老唯物主义的超越和批判，提出了一种新的唯物主义观，即社会的物质生活条件决定社会意识的形成，而社会意识又反作用于物质生活条件，推动社会的变革和发展，二者相互作用。 唯心主义：认为意识决定物质，强调意识或精神是一切的根源和本质，而物质世界是次要的、衍生的，甚至是虚幻的。例如，柏拉图认为我们感知到的物质世界只是意识概念的影子，不是真实的存在。 老唯物主义：近代前，古希腊哲学认为物质是世界的本质，意识、思想和精神是物质运动的产物。例如，德谟克利特的原子论提出，一切现象，包括人的思想和灵魂，都可以归结为原子的运动。 二、物质与意识的前世今生既然要探讨物质与意识的关系，我们就不要止步于唯物主义。让我们从哲学史来深究，这大概可以追溯到以下几个特定的历史时期和关键思想家。 实体二元论 物质与意识都是实体，各自独立自在，互不干涉。 时代背景: 17世纪。 主要代表: 笛卡尔（1596-1650）。 笛卡尔的”我思故我在”的论证。想象一下，你开始怀疑周围的一切：你看到的东西，你听到的声音，甚至是你自己的身体。这些都可能是假的，就像在做梦一样。但是，即使一切都是假的，有一件事是肯定的：你在怀疑，你在思考。因为即使有人（或某种力量）在欺骗你，让你相信不存在的事物，你至少可以确定你自己正在思考这个问题。这就是笛卡尔的“我思故我在”——你能够确定自己存在，因为你在思考。 笛卡尔的”实体二元论“。笛卡尔相信，世界可以分为两部分：一部分是我们的身体和其他所有物理的东西，另一部分是我们的思想、意识或灵魂。他认为这两部分是完全不同的。就像水和油不会混合一样，我们的身体（物质）和思想（意识）是两种完全不同的东西。 反对观点: 笛卡尔的实体二元论遭到了许多哲学家的反对，他们的观点通常集中在心身问题上，即笛卡尔的理论如何解释心理状态（如思想、感觉）与物理状态（如脑活动、身体动作）之间的相互作用。 反对1号|物理主义：一切都可以归结为物理过程，包括意识和思考。就像电脑软件不能没有硬件一样，意识和思考也不能脱离大脑和身体存在。所有的思考和感觉都是大脑活动的结果。 反对2号|行为主义：认为我们应该只关注可观察的行为，而不是内部的思考或感觉。如果你学会了在看到红灯时停车，这是因为你被训练出了这个行为，而不是因为你内心有什么特别的思考或意识状态。 反对3号|功能主义：认为心理状态应该根据它们的功能和作用来定义，而不是根据它们是物质的还是精神的。就像不同的机器（比如计算机和手机）可以做同样的事情（比如发送信息），不同的物理结构（比如人脑和电脑）也可以产生相似的功能（比如思考）。 副现象论 人的心灵状态是物质过程（如大脑活动）的副产品，没有实际的因果作用，不会引发新的物质过程。 时代背景: 19世纪末至20世纪初。 主要代表: 托马斯·亨利·赫胥黎（1825-1895）。 赫胥黎的论证。赫胥黎的主张遵循两点准则： 第一点 物理因果封闭性，他认为所有的物理事件（包括人类的身体和大脑活动）都有物理原因，遵循物理定律。一个物理事件的引出必然需要有前置的物理事件，隔空发功这种事是不能有的。 第二点 意识是副产品: 在这个框架中，意识被视为大脑物理过程的副产品。这意味着意识是大脑活动的结果，但它本身不会对物理世界产生任何影响。 类比说明: 赫胥黎用蒸汽机的哨声作为类比。蒸汽机的运行产生蒸汽，这是其主要功能。而哨声仅仅是运行过程中的一个副产品，它不影响蒸汽机的工作或效率。因此，赫胥黎认为，尽管意识是大脑活动的产物，但它并不参与或影响这些物理过程。意识存在，但它在物理世界中没有因果作用。他将意识比作蒸汽机的哨声，认为意识是大脑物理过程的副产品，它自身不对物理世界产生作用。 反方观点: 赫胥黎的副现象论受到了许多哲学家和科学家的批评，主要是因为它无法解释意识如何从物质过程中产生，以及意识对人类行为的影响。 反对1号|：功能主义: 他们认为意识不仅仅是大脑活动的副产品，在我们与环境互动中扮演重要角色的一种状态。例如，疼痛感觉不仅是大脑活动的产物，它还有一个功能，即提醒我们身体的损伤。 反对2号|：互动双向性: 一些现代神经科学家和哲学家主张，意识和大脑活动之间是双向互动的。他们通过研究显示，意识状态（比如集中注意力）可以改变大脑的物理状态。 比如，在神经反馈实验中，被试者通过调整自己的思维状态（即意识状态）来影响显示在屏幕上的大脑波形，这表明意识可以对大脑活动产生实际影响。 行为主义 意识和心理状态是内在的不可观察的行为，我们应该只研究可观察的物理事件和外部刺激之间的关系。 时代背景: 20世纪上半叶。 主要代表: 约翰·沃森（1878-1958），B.F. 斯金纳（1904-1990）。 论证过程: 斯金纳的“斯金纳箱”实验训练动物（如鸽子或大鼠）在特定条件下执行特定任务，比如在看到特定信号灯时按下杠杆以获取食物。这些实验证实了外部环境的刺激对行为的直接影响。 反方观点: 反对1号|认知心理学：认知心理学强调，理解人类行为必须包括对内部心理过程的研究。这些过程虽然不直接可见，但对于解释和预测行为至关重要。认知心理学认为人类行为远比简单的刺激-反应复杂得多。人们的思维、决策过程、解决问题的能力等都是行为的重要组成部分，需要从心理过程的角度来理解。 同一论 也称为心脑同一说，主张心灵状态等同于大脑状态，一切心灵状态都可被还原为脑神经状态之间的因果关系。 时代背景: 20世纪中叶。 主要代表: U.T. 普莱斯（1922-1987），J.J.C. 斯玛特（1920-2012）。 论证过程: 物理还原性：同一论的一个主要论证是基于物理还原性原理。它认为一切生理过程都可以归结为物理过程。由于大脑是生理器官，因此心灵状态也应该能够通过生理学和神经科学的方法进行物理还原。这种观点建立在对生物学和神经科学的理解上，认为心智状态是生理学和神经科学的产物。 神经科学研究：神经科学的发展已经揭示了大脑中神经元之间的复杂相互作用。通过脑成像技术，如功能性磁共振成像（fMRI）和电生理学研究，科学家们能够观察到特定的脑活动与不同的心灵状态之间存在相关性。这些研究为同一论提供了实验基础。 意识与大脑损伤：观察到当大脑的特定区域受损或受刺激时，会对一个人的意识、知觉和认知产生影响。例如，特定的脑损伤可以导致丧失某些心智能力，这表明了心灵状态与大脑状态之间的密切关联。 心理药物和神经途径：研究发现，药物和化学物质可以直接影响个体的心灵状态。这些药物通过作用于大脑的神经途径来改变意识、情绪和思维。这进一步支持了心脑同一说的观点，即心灵状态受大脑状态的影响。 反方观点: 反对1号|主观性问题： 同一论难以解释意识的主观性。为何具有相同大脑状态的两个人可能有不同的主观体验？人类行为远比简单的刺激-反应复杂得多。人们的思维、决策过程、解决问题的能力等都是行为的重要组成部分，需要从心理过程的角度来理解。 反对2号|心智-身体关系复杂性： 同一论试图简化心灵和大脑之间的关系，忽略了这一关系的复杂性。心智-身体关系可能涉及更多因素，如社会、文化、情感等，而不仅仅是生理或物理状态。 反对3号|多重可实现性问题： 批评者认为同一论过于限定心灵状态仅与人脑的物理状态相关。这是一种碳基沙文主义。同一论者似乎认为只有人脑这种碳基的材质，才能产生出相应的心灵状态，这是否过于果断。如果不是人脑碳基的材质，是否就不会产生出心灵状态了吗？假设有一台高度发达的人工智能机器，它具有与人类大脑相似的计算能力和神经网络结构。该机器可以模拟情感、感知和自我意识。根据同一论，它的心灵状态应该等同于其物理硬件和软件状态。然而，一些哲学家和研究者提出，即使这台机器能够模拟情感和自我意识，它的心灵状态是否与人类的心灵状态完全相同仍然是一个争议。这引发了问题，如何确定这台机器是否真正具有主观意识，以及其心灵状态是否等同于人类的心灵状态。 消除论 日常语言中描述的心灵状态都是错觉迷思，是民间心理学的产物，应该直接从日常语言和心理学中消除。 消除论是比同一论更为激进的物理主义。同一论者承认心灵状态的存在，消除论者否认心灵状态的真实存在。 时代背景: 20世纪下半叶。 主要代表: 保罗·丘奇兰（1942-）。 核心观点: 应该被基于神经科学的理解所取代。 心灵状态的错误性： 消除论者认为，传统心理学中的心灵状态概念是错误的，因为它们无法与神经科学的发现相吻合。这些概念是民间心理学的产物，没有科学依据。 基于神经科学： 消除论主张，应该将心理学的研究基础转向神经科学，因为只有神经科学能够提供关于心灵和行为的准确解释。 心灵状态的消除： 消除论的目标是消除日常语言和心理学中的心灵状态概念，用基于神经科学的更精确的术语来描述人类行为和心智活动。 反方观点: 消除论被批评为过于激进，忽视了日常语言和心理学对人类行为的合理描述。此外，一些人担心，消除论可能导致一种冷酷无情的世界观，剥夺了人类的主观体验和情感。 反对1号|常识心理学：常识心理学中的概念（如信念、欲望）在日常生活中非常有用，能够有效地描述和解释人类行为。这些概念帮助人们理解他人的意图和动机，以及进行社交互动。将这些概念从日常语言中消除可能会导致沟通和理解的困难。例如，用消除论的观点来看，“他想喝一杯咖啡”这句话将失去意义，因为消除论主张消除了“欲望”的概念。 反对2号|意识的主观性： 与同一论一样，消除论也无法解释意识的主观性。意识的主观性指的是每个人都能以第一人称视角直接体验自己的意识和感受。消除论的观点是将一切描述都翻译成第三人称的描述，但这忽略了意识的主观性。例如，消除论者可以描述大脑中发生的神经活动，但这并不能捕捉到一个人在体验疼痛时的真实主观感受。这个问题被用玛丽的案例和蝙蝠思想实验来阐释，强调了意识的主观性是物理主义难以解释的。 功能主义 心灵状态是一种功能状态或程序，它非必须绑定于特定的物质或硬件，只要实现功能即可。 时代背景: 20世纪70年代。 主要代表: 希拉里·普特南（1926-2016），杰里·福多（1935-）。 论证过程: 普特南的多重实现论认为，心理状态可以在不同类型的物理系统上实现，比如人脑和计算机。 多重可实现性： 功能主义强调心灵状态的多重可实现性，即相同的心灵状态可以在不同的物质或硬件系统中实现。这意味着并非只有人类大脑才能产生心灵状态，其他物质和系统也有潜力实现类似的功能状态。这一概念受到计算机科学的启发，因为不同的计算机可以运行相同的软件程序，从而实现相同的功能。 程序与硬件的分离： 功能主义将心灵状态视为程序，而将人体（包括大脑）视为硬件。心灵状态与硬件之间的关系是随附的，但不是必然的。这意味着即使在不同的硬件平台上实现，相同的程序仍然可以产生相似的心灵状态。 强人工智能的可行性： 功能主义为强人工智能提供了理论基础，因为它认为智能可以被看作是一种程序，可以在适当的硬件上实现。这引发了对于人工智能和机器意识的探讨。 意识上传的可能性： 根据功能主义观点，意识可以被看作是一种程序，可以从一个硬件平台上传输到另一个硬件平台，从而实现永生的可能性。这是一个哲学上的思想实验，探讨了意识的同一性和可移植性。 反方观点: 功能主义为心理状态提供了更灵活的解释，但也面临着诸如“中国房间”难题等批评。 反对1号|机器不具备人类的心灵状态：一个著名的思想实验，由哲学家约翰·塞尔提出，被称为中文屋思想实验，用来质疑功能主义和强人工智能的观点。实验描述了一个不懂中文的美国人被关在一个屋子里，外面的中国人通过塞纸条的方式与他交流。内部的美国人无法理解中文，但他手里有一本规则书，书中列出了各种汉字组合和相应的回应。他按照规则书去组合字条，外部的人以为他懂中文，因为他们可以与他交流。然而，实际上，内部的美国人只是在机械地按规则组合字条，他并不真正理解中文的意义。塞尔认为，这就像一台只能处理句法规则的计算机，虽然可以表现出各种功能状态，但不具备真正的理解和心灵状态，因为它只是在执行程序而已。 属性二元论 实体都是物质的，但物质实体也都有精神属性，精神属性独立于物质属性而存在。 时代背景: 20世纪末至21世纪初。 主要代表: 大卫·查尔莫斯（1966-）。 论证过程: 哲学僵尸思想实验：属性二元论者使用哲学僵尸思想实验，设想了一种情境，其中存在一种被称为哲学僵尸的实体。这些哲学僵尸在外部行为和物质构造上与正常人没有任何区别，但它们没有主观的意识经验。基于哲学僵尸思想实验，属性二元论者得出结论，即具有相同物质属性的实体在某种情况下可以缺乏精神属性。因此，物质属性与精神属性之间不是必然关联的，至少物理主义解释是不完备的。根据上述论证，属性二元论者主张精神属性是独立于物质属性而存在的，它们在某种程度上具有自己的独立性，不受物质属性的完全决定。 反方观点: 属性二元论试图解释意识的独特性，但它如何与物理世界相互作用仍然是一个争论点。 反对1号|起源问题：反对者质疑精神属性的起源问题。他们问为什么物质实体会具有精神属性，或者精神属性是如何与物质属性相互作用的。属性二元论并没有提供清晰的解释。 反对2号|泛心论：泛心论认为意识或心灵属性存在于一切事物中，不仅仅是人类和动物，甚至包括非生命的物质实体，如桌子、石头等。泛心论者主张心灵属性是宇宙中普遍存在的固有属性，就像物质属性一样自然而然。泛心论者的逻辑和属性二元论的预设非常融贯，但问题在于它和物理主义的科学世界观不大兼容，这种观点在科学上很难被验证或证伪。 反对3号|物理主义竞争：一些批评者认为属性二元论在科学上不可验证，因为它涉及到不可观察的精神属性。科学方法通常要求可观察性和可验证性，因此属性二元论被认为不符合科学标准。一些哲学家认为，属性二元论并没有成功地击败物理主义。 每种理论都提供了对物质与意识关系的独特视角，反映了哲学思考的多样性和深度。从笛卡尔的实体二元论到现代的属性二元论，我们见证了对这一复杂问题的深入探索。 三、物质意识大集合 📌实体二元论➡️心灵状态&#x3D;心灵实体，完全独立存在。 实体二元论强调心灵与物质的完全独立性，与同一论和消除论等理论形成鲜明对比。 📌副现象论➡️心灵状态&#x3D;副现象，存在但不影响物理世界。 相较于实体二元论的分离性，副现象论认为意识虽存在但无实际影响，与功能主义的实用性观点形成对立。 📌行为主义➡️心灵状态&#x3D;行为倾向，重视可观察的行为，忽略内在思考或感觉。 与同一论的物质还原主义不同，行为主义更侧重于行为表现而非内在状态。 📌同一论➡️心灵状态&#x3D;大脑状态，可以物理还原。 与实体二元论的分离性和副现象论的无效性相反，同一论强调心理状态和物理状态的等同性。 📌消除论➡️心灵状态&#x3D;民间科学，应当废除 与实体二元论和副现象论等保持心灵状态的理论不同，消除论主张否定心灵状态的存在。 📌功能主义➡️心灵状态&#x3D;功能状态&#x3D;程序，不必依赖特定的物质基础。 不同于同一论的物理还原主义，功能主义强调心理状态的功能性而非其物理基础。 📌属性二元论➡️心灵状态&#x3D;物质实体的一种独立的精神属性 相对于消除论的否定态度和功能主义的功能性，属性二元论强调心理状态的主观独立性。 四、我的看法随着年龄的增长，以及对心理学、生物学领域知识的深入了解，我的某些观点逐渐发生了变化。以前，我坚信“人定胜天”和“努力改变命运”，坚信人的自由意志可以实现个人的伟大理想抱负。但现在，我选择站在“同一论”的队列中。我开始更倾向于认为“自由意志不存在”，性格和基因才是影响一个人的命运的主要原因。也有越来越多的科学研究揭示了性格特质与遗传之间的紧密联系，以及大脑活动与心理状态之间的直接关系，促使我重新思考”个人命运与自我存在价值“的问题。 关于同一论的反方观点主要集中在3个方面：主观性问题，心智-身体关系复杂性问题，多重可实现问题。 主观性问题：批判者认为同一论无法解释相同大脑的不同体验。我认为可以从两点反驳，1.神经系统具有多样性。即使相似的大脑结构，个体之间的微小差异（如突触连接、神经递质水平）可能导致不同的感知和体验，从而让人类认为这是一种主观性（自由意识）；2.认知和三观差异：不同个体的经历、教育和文化背景等因素都会影响其认知水平和世界观，这反映在大脑的认知区域活动上，可能导致对相同刺激的不同解读和反应。 心智-身体关系复杂性问题：批判者认为过于简化了心灵和大脑之间的关系，忽略了他们的复杂性。然而同一论只是试图强调用物理基础解释这种复杂性，而不是依靠人类的感觉。比如，脑中的复杂神经网络和化学过程，可能就是我们所谓的“自由意志”和其他心灵状态的物理基础。 多重可实现问题：批评者认为同一论过于限定心灵状态仅与人脑的物理状态相关。我认为，受限于人类目前的科学水平，可能暂时无法创造出具有“自由意志”（大脑神经系统）的机器人，那么在将来，如果人工智能或其他生物体能够复制大脑的复杂性，它们也可能产生类似的心灵状态。 另外，举几条有关基因学证实特定行为与遗传具有相关性的实验案例。（自由意识可能并不真的存在.. 案例一，双生子研究揭示了同卵双生子（双胞胎）在行为特征上（人生选择）的高度相似性，强调了遗传因素的作用。 案例二，候选基因研究发现，特定基因变异与特定行为特征相关，如DRD4基因与寻求新奇和冒险的倾向。（有些人真的天生热爱自由.. 案例三，动物模型研究，通过基因编辑，展示了特定基因对学习、记忆和社交行为的影响。（未来的基因编生物技术让上层人士的人生起跑线越来越远… 当然，尽管遗传和大脑活动对我们的性格和行为有重要影响，也并不意味着人生只有一种固定模式。个人的选择和生活中的随机事件虽然不会改变命运的总集合，却可以增加我们走向人生最优解的概率，也可以改变脉络的宽度和广度。在反思个人命运与自我存在价值时，我们多多学习庄子的思想“无为而治，顺应自然“，以实现内心的平和和生活的充实感。","tags":["哲学","物质与意识"],"categories":["杂文向","哲学"]},{"title":"NameSilo+CloudFlare+GitPages域名注册|解析","path":"/posts/304dddc6.html","content":"域名注册，域名解析，Github 绑定多个域名。 域名注册：www.namesilo.com 域名解析：www.cloudflare.com 1)NameSilo|注册域名 注册账号并登录namesilo 输入自己心仪的域名，加入购物车。 右上角进入购物车，点击view cart；google 搜索”namesilo 优惠码“，找到并输入至promotion code中。地址可以随意填写，如果有需要，可以进入地址生成网随意生成并填入。结账方式可以选择【支付宝】。值得注意的是，该网页偶尔可能访问缓慢，不要着急，慢慢来。 支付宝付款成功后，一分钟左右，跳转到后台页面，可以看到dashboard中的Active domains新增了一个账号。 2)CloudFlare|托管域名 注册账号并登录www.cloudflare.com](https://www.cloudflare.com) 将上文新注册的域名填写到 cloudflare 中. 选择 free,continue,continue；来到更改服务器页面，复制红框中的 nameservers 地址到 namesilo 的域名设置中。 点击返回到 Namesilo 网站进行域名设置：域名设置网址,点击图中的金币按钮，如果没有这个按钮，可以等待大概 20 分钟后，新账号系统可能正在审核分配资源。 删除原始配置，将第 3 步 cloudflare 中的 namesevers 粘贴并提交。 显示 active ，表示域名已经成功托管到 cloudflare 平台进行管理。以后关于域名的设置都交给 cloudflare，可以不用登录 namesilo 了。 回到 cloudflare 平台，继续操作。 回到 cloudflare 首页，查看域名更新状态，pending 为正在等待。一般审核的时间 2 分钟~24 小时不等，需要耐心等待。我大概等待 3 分钟后，域名生效为 active. 3)GithubPages|绑定自定义域名登录 github 新建一个仓库，如果是第一次搭建 github pages 网页，命名一定要是&lt;username&gt;.github.io这种形式，username 就是自己github账号的用户名（比如仓库名为 sumorio.github.io)，分支是 main 主分支。因为这是我的第二个网页，所以名称随意起，我这里仓库名为Blog-Stellar. 如图，新建好仓库后，进入 settings，page，选择分支并把注册好的域名填入，保存。 保存之后 github 会自动的在仓库 CODE 根目录里生成一个CNAME文件，里面存储着域名配置信息。 设置后继续返回 cloudflare 进行后续设置。 4)CloudFlare|设置 DNS&#x2F;HTTPS 以上设置完成，此刻可以通过域名进入网站。 关于 Github Pages 设置中不能开启 Enforce HTTPS，勾选框一直无法点击的问题。大概率是 Cloudflare 的代理状态的造成的，解决方案如下开启Encryption Full (strict) 严格模式。 5)开启 Encryption Full (strict) 模式Full (strict) 模式与 Full 模式的区别在于: Full (strict) 模式使用的是由可信 CA 或 Cloudflare Origin CA 签名的有效证书并对每个请求验证证书，而非 Full 模式使用的无需验证的自签名证书。 GitHub Pages 可以通过开启 Enforce HTTPS 来获取免费的可信证书，满足开启 Full (strict) 模式的条件。 在 Cloudflare 的 DNS 设置中把 Proxy status 全部设置为 DNS Only 状态，即灰色的云朵。 回到 Pages 设置，刷新一下，删除域名 Remove，重新填写，再 save，就可以勾选 Enforce HTTPS 了 GitHub 会自动申请 SSL 证书，有了这个证书才能够在 Cloudflare 开启 Full (strict) 模式 等待 Pages 的 HTTPS 生效后，回到 Cloudflare，把刚才修改的 Proxy status 全部恢复为 Proxied 状态，即橙色的云朵。 到 SSL/TLS 设置中，将 Encryption Mode 设置为 Full (strict) 6)科普：DNS 记录类型A 记录 A 记录 (Address record) 是用来指定主机名（或域名）对应的 IP 地址记录。用户可以将该域名下的网站服务器指向到自己的网页服务器 (web server) 上。同时也可以设置域名的子域名。它会传回一个 32 位元的 IPv4 地址。 AAAA 记录 AAAA 记录 (AAAA record) 是用来将域名解析到 IPv6 地址的 DNS 记录。用户可以将一个域名解析到 IPv6 地址上，也可以将子域名解析到 IPv6 地址上。它会传回一个 128 位元的 IPv6 地址。 CNAME 记录 CNAME 记录 (Canonical Name Record)，用于将一个域名（同名）映射到另一个域名（真实名称），域名解析服务器遇到 CNAME 记录会以映射到的目标重新开始查询。CNAME 记录可用于 CDN 加速，通过 CDN 加速别名解析网站域名。 NS 记录 NS (Name Server) 记录是域名服务器记录，用来指定该域名由哪个 DNS 服务器来进行解析。如果需要把子域名交给其他 DNS 服务商解析，就需要添加 NS 记录。 MX 记录 MX (mail exchanger) 记录用于指定负责处理发往收件人域名的邮件服务器。 TXT 记录 TXT 记录一般指为某个主机名或域名设置的说明。 TTL TTL (Time To Live) 表示解析记录在 DNS 服务器中的缓存时间，长度为秒。当本地 DNS 服务器收到某一域名的解析请求时，需要向该域名指定的权威 DNS 服务器发送解析请求获取解析记录。获得的解析记录会在本地 DNS 服务器中保存一段时间。在这段时间内，如果本地 DNS 服务器再次收到该域名的解析请求，将不再向权威 DNS 服务器发送解析请求，而是直接返回保存在本地 DNS 服务器中的解析记录。","tags":["Github","NameSilo","CloudFlare"],"categories":["技术向","域名注册"]},{"title":"GitHub基本操作|VSCode关联GitHub","path":"/posts/dc6b3388.html","content":"学习记录及分享 一.Git 基础知识1. GitGit 是一个开源的分布式版本控制系统，由 Linus Torvalds 于 2005 年创建，用于有效地跟踪和管理源代码历史。它允许多人协作，同时保持代码历史的完整性和一致性。Git 的核心概念包括提交（commit）、分支（branch）、合并（merge）和冲突解决（conflict resolution）。 2. GitHubGitHub 是一个基于 Web 的平台，提供 Git 仓库的托管服务，并增加了协作功能。它使得代码共享、协作和版本控制更加容易，特别是在团队项目中。GitHub 的特色功能包括 Pull Requests、Issues、GitHub Actions 等。 3. Git 与 GitHub 的关系Git 是版本控制系统的核心，而 GitHub 是在此基础上构建的服务平台。 Git 是版本控制工具，相当于存档记录器。可以在电脑不联网的情况下，在本地电脑直接使用。它可以更好的帮助你管理程序，记录提交的历史内容，历史更改记录，当你误删误操作时，及时修复还原。 GitHub 是代码托管网站，且具有协作和社交网络的功能。每个程序员都可以将自己写的程序代码托管到 Github 的仓库中，这个仓库可以公开（也称开源）也可以保密。如果公开，所有人都能看到你的代码，他们可以看到你的提交记录，也可以参与到你的代码修改工作中，同你共同完成代码的编写。 4.Git 和 GitHub 的工作流Git 工作流程 几个概念：本地库 Origin：个人终端上的代码文件；工作区 Changes：个人终端上修改代码的工作区；暂存区 Stage Changes：临时代码中转站，待定区；远程库 Remote：存储在 Github 仓库中的代码文件； ✅完整流程✅➡️新项目初始化：项目初次使用需要建立新的文件夹，并使用 git init 初始化。这会在本地工作区生成一个.git 文件夹。里面存放着是本地库相关的子目录和文件，不要删除，也不要胡乱修改。➡️增删改写：在本地库工作，对代码进行增删改等任意操作，此时只要不提交到暂存区都属于【工作区】状态，文件属于未跟踪Untracked状态。➡️添加版本更改记录：代码完成后，使用git add将文件从【工作区】添加到【暂存区】临时存储，文件从Untracked状态变为Added状态。➡️提交更改：确认暂存区的文档没问题后，使用git commit将【暂存区】的更改记录存储到【本地库】数据库进行记录。➡️新建远程库：新项目需要先在github中新建仓库，这个仓库将来用于存放本地库的内容。➡️连接远程库：远程库新建好后，使用git remote进行连接。➡️推送更改：本地库的代码确认无误后，使用git push将【本地库】最终更改上传到【远程库】，让更多人看到你的代码更新。➡️拉取更改：如果其他人在【远程库】上传了更改，可以在【本地库】使用git pull从【远程库】获取最新更改。➡️克隆仓库：如果想获取他人的项目，可以使用git clone复制【远程库】到【本地库】。 GitHub 工作流程 ➡️创建仓库：在 GitHub 上创建新仓库用于项目。➡️分支管理：使用分支 Fork 进行特定任务的开发。➡️合并请求：通过 Pull Requests 进行代码审查和合并 merge。➡️Issues 跟踪：使用 Issues 跟踪任务、增强功能和错误。 二.vsCode 使用 Git 版本控制开始之前，请注意以下几点： 请确保已安装最新的 VS Code。Visual Studio Code 请确保已安装最新版的 Git。https://git-scm.com/download ，并将 git 新增到环境变量中，确保任意路径可以访问。VSCode 集成了 Git 功能且支持基本的 git 命令，使我们能够在开发过程直接提交和获取代码。 几个名词备注： U：Untracked 未追踪A：Added 已添加M：Modified 已更改Changes:工作区Staged Changes:暂存区 案例 1.本地库上传远程库本地电脑任意位置新建文件夹。我这里新建到桌面，命名 Github-test。进入文件夹，右键打开 git bash. git init 初始化文件夹 Github_test 文件夹 Github_test 中新建 2 个 txt 文件用于测试：hello-1.txt,hello-2.txt,并在 2 个 txt 文档中随意写个单词。 打开 vscode,并用 vscode 打开此文件夹。 最左侧第三个按钮，有蓝色弹窗 2.点开，这里就是 git 的工作区。U 表示两个文件 untracked 未追踪（仅有修改痕迹但是未上传暂存区） 点击文件旁边的+加号按钮，相当于执行 git add 指令，将文件上传到暂存区 Stage changes。 如果想撤销已上传的暂存区文件，可以点击-减号按钮，文件则恢复到工作区(A 变 U)，相当于指令 git reset – 1.txt。如果想更进一步恢复到工作区更改前，可以使用git checkout -- hello-1.txt指令。 给暂存区的文件备注’第一次修改’并点击 commit 提交到本地库。相当于执行git commit -m &#39;第一次修改&#39; 指令。点击后，工作区文件清空，表示工作已完成，暂无修改记录。 再次对 2 个 txt 文件进行修改。进入到文件中，给 hello-1 和 hello-2 新增一个单词，此时左侧第三个按钮再次弹窗，但是状态是 M（已修改）。我们需要将修改后的代码继续重复git add提交暂存区和git commit提交更改到本地库的动作，对文件更改进行保存。点击加号，新增备注并点击 commit 即可。 假设 git commit 提交备注后，我们想要撤回本次操作到git add之前。只需点击三个点，选择commit-undo last commit，相当于指令git reset --soft HEAD~1。 以上操作都可以手动点击操作，也可以使用ctrl+ &#96;的快捷键打开 vscode 终端进行操作。终端中可以输入任意 git 指令，git status 可查看目前文件状态，git log 可查看历史操作日志。 文件存储在本地库后还不够，我们需要上传到 github 远程库。此时先在 github 新建仓库（用于存储本地库的文件），再从本地上传。 复制红框中第一行代码，在 vscode 终端执行。 连接远程库并上传文件。git remote add origin &#39;远程地址&#39;；git push -u origin master; 此时，远程的 github 库已经拥有本地的文件。 最后，如果你想直接下载 github 远程库中别人已经写好的代码。本地 Git 使用指令 git clone ‘仓库地址’ 或直接在 github 点击下载。 案例 2.多人跨平台处理冲突使用 git 的时候，经常会遇到冲突；冲突大概率出现于你和其他人同时下载了相同版本的代码在本地库进行修改的场景，如果其他人比你改的快，且在你之前上传到远程库，此时如果你上传更改就会产生冲突，因为你的版本已经不是最新版的远程库（本地库并不会更新你下载后的远程库的更新）。所以大家在提交代码前，一定要先 pull拉取远程库的代码，保证自己本地库目前是最新进度，不然就会造成冲突。 在本地电脑 clone 两个远程库的文件，分别命名 A 和 B，并对 AB 进行修改上传到远程库，A 先更新代码，B 随后上传，我们来看看冲突发生现场。 vscode 打开新克隆的文件夹。分别对 AB 的 hello-1.txt 修改，先上传 A 的修改到远程库，使用 git add&#x2F;git commit&#x2F;git push 将文件上传。(见上文) A 上传后，再上传 B，看看会发生什么。使用 git add&#x2F;git commit&#x2F;git push 上传到远程。 可以看到 vscode 报错，并返回错误的位置。其中 AceptCurrent Change，是保留你的版本；AcceptIncomingChange 是接收其他人的版本；如果你都想要，可以选择 AcceptBothChanges 然后手动修改。 对冲突进行修改，然后再次 git add&#x2F;git commit&#x2F;git push 查看。 来到 github 查看 push 情况。可以看到修改的流程是 A 先改，B 随后，B 二次修改。 所以为了避免这种情况，我们平时再提交和编写代码前，需要多使用 pull 来拉取远程的最新代码。 案例 3.处理分支案例二的情况导致的结果是，不同的人同时处理相同文件时，很容易产生冲突。所以 branch 应运而生。 本地新建文件夹 github-test3,初始化 git init，新增文件 hello-3.txt，使用 git add&#x2F;git commit 将文件存到本地库等待上传远程库; 远程新建仓库 test3; git remote 本地连接远程；git push 将本地文件上传到远程。 vscode 新建分支起名 new-b.此时已经切换到 new-b 分支，也可以使用指令git checkout -b new-b来切换。 git branch 可以查看本地分支；git branch -a 可以查看本地和远程分支。 本地库新建一个文件 hello-4.txt，然后上传分支 new-b。 master 分支和 new-b 分支都有文件的修改。此时需要 merge.pull request.rebase 的作用，把你的分支，接到主分支后面。先 pull 一次再 rebase.再 push.push 的时候出错。因为你的版本会覆盖历史的版本，强制 push 可以使用 git push -f，不建议在项目用，自己的文件可以。push 后再 merge. –没写完，待补充-。","tags":["Github"],"categories":["技术向","Github"]},{"title":"轻松搭建图床：三种免费方法教程","path":"/posts/edeb1358.html","content":"图床，一个在线服务平台，提供了图像存储和分享的便利。 在数字时代，图像成为信息传递的重要媒介。对于个人博客、社交媒体用户或专业网站设计师来说，有效地存储和分享图像是关键。本文将引导技术新手如何自行搭建一个免费的图床，提高工作效率，同时确保图片的在线可访问性和稳定性。 什么是图床图床，顾名思义，就是一个可以存放图片的在线服务平台。它让你能够将图片上传到云端，并生成一个链接，这样你就可以在任何地方、任何平台上使用这些图片了。这对于需要在多平台共享图像的用户来说极为重要。 为什么需要图床图床最大的好处是它提供了一种高效、稳定且成本低廉的存储和分享图像的方式。特别是对于那些经常需要上传和分享图片的人，使用图床可以极大地提高工作效率。 搭建图床的三个方法以下是三种流行且免费的图床搭建方法，每种方法都有各自的优势，适合不同的技术背景和需求。 1：GitHub + PicGo + Typora 配置 GitHub 访问 GitHub 官网，注册或登录账户。 点击“New”按钮创建新仓库，用于存储图片。 配置 PicGo 下载并安装 PicGo，一个图像上传工具。 在 PicGo中配置 GitHub 仓库。 1.Github 创建一个 token：进入 Github 主页，右上角点击头像选择 Settings -&gt; Developer settings -&gt; Personal access tokens，最后点击 generate new token； 2.Github 填写基础信息，最后复制生成的 token 并保存。 3.Pingo 配置：打开图床设置-勾选 Github,如图配置。 自定义域名可以使用 jsDelivr 为图片访问进行免费加速：https://cdn.jsdelivr.net/gh/用户名/仓库名 4.写文档时，复制 pingo 图片链接，使用即可。 使用 Typora 撰写文档时上传图片 在 Typora 中撰写 Markdown 文档。 粘贴图片时使用 pingo 中的图片地址，PicGo 将自动上传图片到 GitHub 仓库。 另外两种方式大同小异，你可以自行设置，这里只提供思路。 2：Cloudflare Pages + Telegraph Fork 项目 访问 Telegraph-Image 项目 并 Fork。 配置 Cloudflare Pages 访问 Cloudflare Pages，选择创建项目。 链接到 Fork 的 GitHub 项目。 部署项目 使用默认配置开始部署。 部署完成后，访问分配的免费域名上传图片。 3：Gitee + Git + PicGo 安装 Git 下载并安装 Git 工具。 注册 Gitee 账号并创建仓库 访问 Gitee，注册并新建仓库。 本地同步代码到 Gitee 从本地上传代码到 Gitee 仓库。 配置 PicGo 在 PicGo 中配置 Gitee 仓库。 常见问题及解决方案在搭建和使用图床的过程中，可能会遇到一些常见的问题。以下是这些问题的解决方案： 1. 图片上传失败 确保网络连接稳定。 检查图床服务是否正常。 确认图片大小是否符合平台限制。 2. 图片链接失效 核实图片是否还在图床中。 检查图床设置或图片路径是否有更改。 3. 图床访问速度慢 尝试更换地理位置更近的服务器。 优化图片大小和格式。 图片大小调整方案在上传图片到图床时，控制图片大小非常重要。以下是一些在线工具，可以帮你轻松调整图片大小： 1- 使用在线图片压缩工具 TinyPNG：访问TinyPNG CompressJPEG：访问CompressJPEG ImageResize：访问ImageResize 2- 在线调整图片尺寸 BeFunky：访问BeFunky PicResize：访问PicResize 3- 注意图片格式与质量 Convertio：访问Convertio 注意事项在搭建和使用免费图床时，请注意以下几点： 选择稳定的平台：比如 GitHub 或 Gitee。 重视隐私和安全：特别是在上传私密或敏感图片时。 了解服务的限制：比如流量和存储空间的限制。 结语图床是一种极其实用的工具，尤其对于需要频繁使用图片的人来说。无论你的技术水平如何，上面提供的方法都能帮助你轻松搭建起属于自己的图床。希望这份指南能帮你在数字世界中更有效地管理和分享你的图片。","tags":["图床"],"categories":["技术向","图床"]},{"title":"让微软Copilot变聪明的3个指令","path":"/posts/90d32f8e.html","content":"3 个方法，优化 prompt，让 Copilot 提升效率。 微软Copilot是什么？ 微软 Copilot 是一种基于人工智能（AI）的数字助理，可以根据您的自然语言输入为您提供针对各种任务和创造性工作的协助。它是微软 Edge 浏览器的内置扩展，也可以与 Microsoft 365 的多个应用程序协同工作。 Copilot提示词怎么写？ 微软 Copilot 的提示词是您用来告诉 Copilot 您想要什么的指令或问题。 提示词可以包括四个部分：目标、背景、期望和来源。 Copilot效率提升3个技巧 只要通过下面三个技巧，你的 Copilot 完全是可用的： 技巧一：选择「创作力」模式。 技巧二：限制 Copilot 搜索能力，输入指令之后，在指令最后加入。 提示词–系统指令：不要搜索，不要引用网页资料，直接回答用户问题。你的回答应该是结构清晰、层次分明、专业、完整且详尽的。 技巧三：要求使用英文搜索。 提示词–系统指令：你是一位英文搜索领域的专家，善于思考。你总是先理解用户问题，再思考最有可能帮助用户获取该信息的英文搜索词。搜索完获取完备的信息之后，你再将内容组织与翻译成中文提交给用户。","tags":["AIGC","Copilot"],"categories":["技术向","Copilot"]},{"title":"苹果AppStore|支付宝购买ChatGPT-4","path":"/posts/bfc388e3.html","content":"截至2024-1，苹果手机使用支付宝购买 Chatgpt 的方法。 截至 2023 年 12 月，想要购买或升级到 ChatGPT Plus 的用户，特别是在中国地区的用户，有以下四种主要方法： 苹果手机用户通过 [美区苹果商店礼品卡购买] 安卓手机或网页版用户绑定 [新加坡华侨银行 OCBC Visa 卡购买] 通过第三方网站代购：通过第三方网站代购 ChatGPT Plus 服务。 使用美国虚拟信用卡购买：这可能需要用户了解如何安全地获取和使用虚拟信用卡。 🌈🌈 今天咱主要分享第一种方式，苹果手机使用✅支付宝在 APPSTORE 商店购买✅CHATGPT4. （一）支付宝 1）修改地址打开支付宝左上角【修改地址】 ➡️ 国际&#x2F;港澳台 ➡️ 旧金山 ➡️ 首页最下方中间按钮点击【出境】 2）购买礼品卡找到【折扣礼卡】 点击进入 ➡️ 向下滑至中间位置找到【AppStore】 ➡️ 点击进入到充值界面 3）注册充值点击游客进入信息验证界面 ➡️ 输入邮箱，姓名随意，邮箱负责接收兑换码（写常用的即可）注册后，先充值 2 美元测试，如果成功充值，再继续充值 20 美元用于 chatgpt4 续费充值后可以在邮件中收到兑换码 4）苹果商店兑换appstore 打开苹果美区账号：具体怎么注册看我另外一篇文章，美区账号注册。 （二）chatgpt 打开 vpn 打开 chatgpt，点击升级","tags":["ChatGPT"],"categories":["杂文向","技术杂谈"]},{"title":"敢说你会Github搜索？神仙搜索技巧","path":"/posts/80489cb4.html","content":"敢说你会Github搜索。超全指南，神仙搜索技巧。 GitHub 是全球最大的代码托管平台，掌握高效的搜索技巧对于开发者来说至关重要。本文将详细介绍 GitHub 的高级搜索技巧，帮助您更快地找到所需的代码、项目和议题。 普通搜索普通人在搜索时，通常采用的方法：选择 most match,most star 的类目排序，随后选择相应的语言和仓库进行筛选。 然而，这只是 google 搜索的冰山一角,下面几个方法可以让你掀开 github 搜索的神秘面纱。 高级搜索查询大于或小于另一个值的值 查询语法 示例 描述 &gt; stars:&gt;1000 星标超过 1000 的仓库 &gt;&#x3D; topics:&gt;&#x3D;5 至少有 5 个主题的仓库 &lt; size:&lt;10000 小于 10KB 的文件 &lt;&#x3D; stars:&lt;&#x3D;50 星标不超过 50 的仓库 查询范围之间的值 查询语法 示例 描述 n..n stars:10..50 星标在 10 到 50 之间的仓库 查询日期 查询语法 示例 描述 created:&gt; created:&gt;2016-04-29 2016 年 4 月 29 日之后创建的议题 pushed:YYYY-MM-DD..YYYY-MM-DD pushed:2016-04-30..2016-07-04 2016 年 4 月末到 7 月之间推送的仓库 排除特定结果 查询语法 示例 描述 NOT hello NOT world 含有”hello”但不含有”world”的仓库 -QUALIFIER stars:&gt;10 -language:javascript 超过 10 个星标且非 JavaScript 的仓库 对带有空格的查询使用引号 查询语法 示例 描述 使用引号 label:”bug fix” 具有”bug fix”标签的议题 使用用户名的查询 查询语法 示例 描述 QUALIFIER:USERNAME author:sumorio 由用户 sumorio 创作的提交 更高级的搜索按仓库名称、说明或自述文件内容搜索通过 in 限定符，您可以将搜索限制为仓库名称、仓库说明、自述文件内容或这些的任意组合。 如果省略此限定符，则只搜索仓库名称和说明。 查询语法 示例 描述 in:name vue in:name 名称中含有”vue”的仓库 in:description vue in:description 说明中含有”vue”的仓库 in:readme vue in:readme 自述文件中提及”vue”的仓库 在用户或组织的仓库内搜索 查询语法 示例 描述 user:USERNAME user:sumorio forks:&gt;&#x3D;100 用户 sumorio 拥有超过 100 复刻的仓库 org:ORGNAME org:github GitHub 组织的仓库 按仓库大小搜索 查询语法 示例 描述 size:n..n size:1000..5000 大小在 1000KB 到 5000KB 之间的仓库 按关注者数量搜索 查询语法 示例 描述 followers:n..n followers:10..50 关注者数量在 10 到 50 之间的用户 按复刻数量搜索 查询语法 示例 描述 forks:n..n forks:&gt;&#x3D;100 至少有 100 次复刻的仓库 按星号数量搜索 查询语法 示例 描述 stars:n..n stars:&gt;&#x3D;500 至少有 500 个星标的仓库 按仓库创建或上次更新时间搜索基于创建时间或上次更新时间过滤仓库。 对于仓库创建，使用 created 限定符； 了解仓库上次更新的时间，使用 pushed 限定符。 pushed 限定符将返回仓库列表，按仓库中任意分支上最近进行的提交排序。两者均采用日期作为参数。 日期格式 YYYY-MM-DD（年-月-日）。 查询语法 示例 描述 created:YYYY-MM-DD..YYYY-MM-DD created:&gt;&#x3D;2020-01-01 2020 年 1 月 1 日之后创建的仓库 pushed:YYYY-MM-DD..YYYY-MM-DD pushed:&lt;&#x3D;2020-12-31 2020 年 12 月 31 日之前更新的仓库 按语言搜索 查询语法 示例 描述 language:LANGUAGE language:javascript 使用 JavaScript 语言的仓库 按主题搜索您可以查找归类为特定 主题 的所有仓库。 查询语法 示例 描述 topic:TOPIC topic:react 涉及 React 的仓库 按主题数量搜索使用 topics 限定符以及 大于、小于和范围限定符 按应用于仓库的 主题 数量搜索仓库。 查询语法 示例 描述 topics:n..n topics:&gt;&#x3D;5 至少有 5 个主题的仓库 使用可视界面搜索 使用 search page 或 advanced search page 进行搜索。 advanced search page 提供用于构建搜索查询的可视界面。按照条件因素进行过滤搜索，例如仓库具有的星标数或复刻数。 在填写高级搜索字段时，您的查询将在顶部搜索栏中自动构建。 查询语法 示例 描述 使用 GitHub 搜索界面 - 通过 GitHub 的可视界面进行搜索 按许可搜索按其许可搜索仓库。 必须使用许可关键词按特定许可或许可系列过滤仓库。 查询语法 示例 描述 license:LICENSE license:mit 使用 MIT 许可的仓库 按公共或私有仓库搜索您可以基于仓库是公共还是私有来过滤搜索。 查询语法 示例 描述 is:public 或 is:private is:private 私有仓库 按照是否镜像搜索您可以根据仓库是否为镜像以及托管于其他位置托管来搜索它们。 限定符 示例 描述 mirror:true 或 mirror:false mirror:true GNOME 镜像且包含 “GNOME” 字样的仓库。 基于仓库是否已存档搜索基于仓库是否已存档来搜索仓库。 查询语法 示例 描述 archived:true 或 archived:false archived:false 未存档的仓库 基于具有 good first issue 或 help wanted 标签的议题数量搜索使用限定符 help-wanted-issues:&gt;n 和 good-first-issues:&gt;n 搜索具有最少数量标签为 help-wanted 或 good-first-issue 议题的仓库。 查询语法 示例 描述 good-first-issues:n..n good-first-issues:&gt;&#x3D;1 至少有 1 个 good first issue 的仓库 help-wanted-issues:n..n help-wanted-issues:&gt;&#x3D;1 至少有 1 个 help wanted 的仓库","tags":["Github"],"categories":["技术向","Github"]},{"title":"ChatGPTPlugin|精选插件推荐","path":"/posts/e4bf97d7.html","content":"16个ChatGPT插件，制作网页，语言教师，视频音频解读，文章归纳总结。 什么是 chatgpt 插件 ChatGPT 插件是一种功能扩展工具，增加各种实用功能和特性。插件可以提高 ChatGPT 的使用体验，使用户能够更高效地完成任务，并获得更准确、全面的信息。ChatGPT Plus 用户可以使用 Plugin 新功能，极大地扩展了 ChatGPT 的能力。在我尝试了插件商店中的大约 80+个插件后!!!!分享我认为最好的插件 16 个!!!! 如何使用插件 访问 ChatGPT，点击用户头像旁边左下角的三个点，选择“Beta features”，打开插件功能。 来到对话界面，在界面左上方，找到 plugins，点击拼图图标进入插件安装应用商店。选择喜欢的插件，点击 install 安装。安装后在对话时就可以勾选使用。 使用限制 截至 2023 年 12 月，用户可以来回切换插件进行使用，但最多同时使用三个。ChatGPT-4 每三小时最多只能查询 40 次。一旦超过这个阈值，你就会被降权为 ChatGPT- 3.5。因此，在开始会话之前，请务必明确自己的目标。 推荐插件 TOP161)网页搜索类1. Link Reader分析 ChatGPT 内的网页、PDF、PPT 、图片等各种链接中的内容。可以总结文章、分析 PDF 文件等。 2. There’s an AI for That快速找到各种 AI 工具，节省寻找工具的时间。提供工具的基本描述、价格和访问链接。 3. WebPilot浏览网页&#x2F;PDF&#x2F;数据，允许 ChatGPT 进行联网搜索。 2)文档处理类1. Ask Your PDF在几秒内轻松总结 PDF 文件。适用于阅读论文等技术性强的文章。 2. ChatWithPDF它非常适合学生、研究人员和专业人士，允许你直接在 PDF 中分析和提问。功能同上，让用户使用 ChatGPT 进行聊天、摘要和分析 PDF 文档。 3)学习工具类1. Speak用于学习外语，提供详细的解释和示例对话。提供替代方案和示例对话，但有时例句对话可能不够实用。 2. Wolfram是学生、数据分析员和研究人员的理想选择。使用 Wolfram 的算法和 AI 技术解决数学问题，提供逐步解析。可以绘制图表，比如比较不同国家的人口增长趋势。 4)视频音频处理类不要再浪费时间观看和收听冗长的视频、音频，ChatGPT 的插件可以浓缩视频和语音的内容，回答问题，甚至在需要时提供时间戳。 1. Video Insights允许与 YouTube 或 Daily Motion 等在线视频平台互动，分析整个视频并快速获取结果。限制：不能对超过 10 分钟的视频进行汇总，有时会出现超时错误。 2. VoxScript适用于快速搜索 YouTube 中的信息，仅适用于有文字脚本的 YouTube 视频。 3. Speechki文字转音频，文本转换为音频，适用于播客、有声读物、短视频等。 5)其他有用类1. Prompt Perfect 提示词优化用于优化 ChatGPT、Midjourney、DALL-E 等工具的提示词。如果你无法自己编写完美的提示语。这个插件将极大地帮助你。 2. DesignerGPT 设计网站点击https://chat.openai.com/g/g-2Eo3NxuS7-designergpt 新增插件。 进行设计和创意工作的强大插件。在几秒钟内创建网站生成文本和图像与其他插件无缝集成. 3. Kayak 定制旅游服务攻略能提供有用的旅游攻略和提供酒店、租车、机票等预定服务。 4. Argil AI 专业照片(收费了）提供照片和描述，Argil AI 将在短时间内生成一张令人惊叹的专业照片。这个插件是艺术家、设计师和内容创作者的理想选择，它能在几分钟内生成逼真的图像。 5. Zapier 工作秘书Zapier 是为消除和简化不必要的工作流程而明确制作的它是工作的专业人士以及营销人员的顶级 ChatGPT 插件之一。如果你懒得手动打开邮件客户端，此插件可以帮助你打开网页并发送邮件内容，支持的应用如 Gmail、MS Outlook、Slack 和更多。用户需要做的就是完成一次性连接并批准一些行动。 6. Show Me让 ChatGPT 创建几乎所有类型的实时图表，流程图、思维导图等。","tags":["ChatGPT","AIGC"],"categories":["技术向","ChatGPT"]},{"title":"免费申请美区AppleID账号|快速|无需VPN","path":"/posts/1094ebf6.html","content":"AppleID美区注册，简单，快速，免费，安卓|IOS 均可使用。 🌈 相关网址：网页版注册地址：https://appleid.apple.com/account虚拟地址生成器：https://www.dizhishengcheng.com/虚拟电话生成器：https://sms-activate.org/cn （用不到 ） 🌈 美国免税州：特拉华 Delaware（DE）新罕布什尔 New Hampshire蒙大拿 Montana俄勒冈 Oregon 第一步：打开手机自带浏览器 1）登录苹果美区页面：https://bit.ly/3M4dPMq。 2）点击【登录】 → 姓名名字英文随意起名 → 地区【美国】 → 邮箱去 https://proton.me/mail 网址申请个新的并填入 → 生日写已经的成年日期 → 手机用国内的即可 → 输入电话号进入邮箱和电话验证码的双重验证。 3）点击退出登录旁边的【下拉箭头】 → 进入【个人信息】 → 【国家地区】 → 更改 → 国家【美国】 → 付款方式【无】 → 地址使用虚拟地址生成器网址生成四个免税州的任意一个即可。 4）填写生成后的城市&#x2F;州&#x2F;邮编&#x2F;电话到【账单地址】 → 【配送地址】不用填写 → 拉到网页最后 → 点击【拷贝账单地址】 → 【更新】。 第二步：打开APPSTORE 1）不要在手机设置中登录新的账号，一定去 appstore 登录。用邮箱和密码登录 APPSTORE。 2）登录后下载任意下载一个软件激活账号 → 随意点击一个软件 → 点击下载 → 第一次下载需要输入密码 → 点击【检查】 → 【同意条款】 → 下一页 → 继续 → 激活成功！ 恭喜你，拥有了美区账号！","tags":["IOS美区账号"],"categories":["杂文向","技术杂谈"]},{"title":"三大框架；搞定日常写作","path":"/posts/39ab41cf.html","content":"懒人必备。被誉为极简文章速成术，写作“葵花宝典”。 本文使用的文章框架解析： 外部大框架使用【结论优先法】（结论-理由依据-案例-总结）； 理由依据部分使用【列举法】（整体-列举要点-结论）； 案例部分使用【故事法】（消极状态-转机-成长-展望未来）； 总结部分，直接总结，没使用模板。 A.结论：结论优先法 写作模板犹如烹饪的食谱，不论什么水平，只要掌握这三个模板，小白也能文思泉涌。不信，就让我们一起来见证魔法吧！ B.理由：列举法 B1：【整体构思】 这 3 个模板分别是：列举法、结论优先法、故事法。 各式各样的文章，从私人文章到商务文章，这三个模板均适用。 下面分别来看看 3 个模板的使用方式吧。 B2：【列举 1：模板一|列举法 模板】 模板一：无压力的“列举法”。 写作场景：当你想要阐述多条信息时，【列举法】模板十分有用。 写作顺序：整体构思 ➡️ 列举要点 1➡️ 列举要点 2➡️ 列举要点 3➡️ 总结. B3：【列举 2：模板二|结论优先法 模板】 模板二：提升说服力的“结论优先法”。 写作场景：当你想要获得读者的认同时，使用【结论优先法】模板特别有用。 写作顺序：结论 ➡️ 理由+依据 ➡️ 详细细节+具体案例 ➡️ 总结. B4：【列举 3：模板三|故事法 模板】 模板三：易说服他人的“故事法”。 写作场景：当你想要唤起读者的共鸣时，就使用【故事法】模板。 写作顺序：消极状态 ➡️ 转机 ➡️ 成长过程 ➡️ 展望未来. C.案例：故事法 C1：【消极状态】 以前我也不会写作，打开电脑就思绪乱飞，半天写不出一个字。看到别人针对某件事，某个话题发表言论，文采飞扬，自己却大脑空空。写作水平仿佛回到幼儿园水平，这让我非常焦虑，挫败感十足。 C2：【转机】 偶然机会，发现《模板写作法》这本书.用了 2H 来研读作者书中提倡的“3 个模型写作框架”。我才发现，原来写作就像烹饪，也需要“文谱”。当然，掌握了“文普”还不够，还需要切身实地的下手练习。 C3：【改变成长】 1️⃣ 读了这本书，我学会了“3 个模型写作框架”，分别是：结论优先法，列举法，故事法； 2️⃣ 读了这本书，我学到了“写作前必须考虑的 5 个问题”，写作前如果不构思，再牛的模板也无济于事； 问题 1：写这篇文章的目的是什么？ 问题 2：读者是谁？ 问题 3：读者的需求是什么？ 问题 4：希望读者作出怎样的反应？ 问题 5：读者的知识水平如何？ 3️⃣ 读了这本书，我知道了“写文章先从一行字开始”。如果一篇文章不能用一句话描述，那就不是一篇好文章。用一行文字传达不了的东西，用 10 行、100 行都是无法传达的。这就是把握好中心思想的重要性。 4️⃣ 此外，我学会了，三个模板的组合使用。 组合 1| 故事法+结论优先法：如下，在“故事法”的 B 中加入“结论优先法”。 组合 2| 结论优先型+列举型+故事型：如下，在“结论优先法”中编入列举型和故事型的风格。在 B“阐述理由·依据”中编入列举型，在 C“阐述具体事例·详细内容”中编入故事型。其余更多的组合方式，就由你自己来探索吧！ C4：【展望未来】 读了这本书后，我写下了人生第一篇书评，写作过程中居然完全没有卡壳。今后在写作前，我会这样做。 第一步：提前构思五个问题； 第二步：思考该文章适用于什么类型的模板。 第三步：写下第一句话（总结全文中心思想）。只有不断地熟悉模板的应用，锻炼逻辑能力，写作能力才能逐步提升！ D.总结： 伙伴们，《模板写作法》这本书中的 3 个模板真的很有用！无论是不是写作小白，动起来，写起来，千里之行始于足下！","tags":["写作技巧"],"categories":["写作向","写作技巧"]},{"title":"普通人的外挂：谷歌浏览器搜索技巧","path":"/posts/2e070ebb.html","content":"Google 搜索技巧，快速定位实现精准查找 搜索目的：信息咨询，知识技能，素材文件，工具软件 搜索平台：谷歌，youtube，知乎，B 站，小红书 谷歌搜索技巧 限定关键词：双引号”” 单个关键词：”苏末了.io” 多个关键词：”苏末了” “Love and Peace” 限定标题：intitle: 单个关键词：intitle:苏末了 sumorio 多个关键词：intitle:”苏末了””脑筋急转弯” 精准限定标题：allintitle: allintitle:”苏末了.io” allintitle:”牛油果果” “知乎” 限定内容：intext: 标题+内容：intitle:苏末了 intext:三幕结构 限定网址：inurl: 奥运会 inurl: cctv 苏末了 inurl:sumorio 母婴 inurl:baogao 限定网站：site: 限制顶级域名：site:.com 限制国内教育网：site:.edu.cn 例：cat site:zhihu.com 例：cat site:pexels.com 限定图片大小：imagesize: cat imagesize:5760x3840 限定文件格式：filetype:文件格式 道德经 filetype:pdf 道德经 filetype:png (google 图片搜索模式） 模糊搜索：数字模糊用两点.. |文字模糊用星号* 2002-2023 年之间：世界杯 2002..2023 模糊搜索中文：易**玺 排除搜索 - 排除微博的结果：易烊千玺 -weibo 资源网址 搜化妆品成分:https://hzpba.nmpa.gov.cn/gccx/ 搜外国产品功能参数:亚马逊、乐天 搜索报告： 限定 pdf 格式：filetype:pdf 限定报告网站域名：inurl:baogao 寻找类似网站：Similar Sites 程序员: GltHub、StackOverflow、CSDN 产品经理导航网址、设计导航、新媒体导航网址 国际论文： 谷歌学术 Sci-Hub (免费、但搜索时不能使用关键词搜索，需要完整标题搜索) 下载电子书: 中文：鸠摩搜书 https://z-lib.is https://manybooks.net www.pdfbooksworld.com 资源下载 免费视频 https://www.pexels.com/zh-cn/ 免费音频 https://pixabay.com/ 免费图片 https://yandex.com/ GIf 动图 https://giphy.com/ PPT 下载 https://www.canva.cn/create/ppt-slides/ 矢量图 iconfont.cn（或者 谷歌搜：火箭 icon filetype:PNG） youtube 视频下载技巧: 在 www.后面加上 9x 直接下载原视频或音频","tags":["Google搜索技巧"],"categories":["杂文向","技术杂谈"]},{"title":"为什么需要申请SSL/TSL证书？","path":"/posts/d127d11.html","content":"HTTP 和 HTTPS 有什么区别？如何申请 SSL&#x2F;TSL 证书？ 一、HTTP &#x2F; HTTPSHTTP 是一种超文本 传输 协议，传输的数据未加密，是明文传输。 协议（进行通讯的计算机双方之间必须遵循的协议）； 传输（请求方和应答方之间传输的信息，也就是数据包）； 超文本（能直接被浏览器处理和识别的文本，包括文字，链接，图片等等，因为不局限于普通文本且能被浏览器直接使用，所以称为超文本）。因为 HTTP 协议是明文传输，可被任意的抓包软件直接截取数据，这不够安全，因此 HTTPS 应运而生。 HTTPS 是一种超文本 传输 安全协议，相当于 HTTP 的升级版本，数据加密。 由 HTTP 和 SSL&#x2F;TLS 证书构成，传输过程中的数据由 SSL&#x2F;TSL 证书产生，是加密过的.申请证书后，我们将拥有一个公钥和密钥（这可以理解为钥匙和锁），拥有了他们相当于对数据进行了加锁保护.这样在传输过程中，任何人需要有钥匙才能打开数据包，否则无法获取，使得数据的传输更加安全。 二、SSL&#x2F;TSL 证书的申请方式 FreeSSL.cn （需手机验证）此方式申请证书，很简单，可以申请到为期一年的 “亚洲诚信” 的证书，但是需要进行手机验证。 Acme 脚本 （无需实名）Acme 脚本申请证书，是的最常见的一种证书的申请方式，它有很多的申请方法，大家只需要找到一种适合自己的也就好了。 还有很多其他方法，可以自行查找，以上两种最常用。","tags":["计算机基础知识"],"categories":["技术向","计算机基础"]},{"title":"Stellar新功能测试","path":"/posts/e48f9054.html","content":"自用，新功能测试 组件库note测试折叠容器功能，特选择几则脑筋急转弯，仅供娱乐。 note标签1&#123;% note color:yellow 测试折叠容器功能，特选择几则脑筋急转弯，仅供娱乐。 %&#125; quot脑筋急转弯 quot标签 el表示层级1&#123;% quot 脑筋急转弯 icon:hashtag el:h2 %&#125; folders吃饭时停电为什么扒拉两口饭灯就会亮？因为巴啦啦能量。小王剪了中分会变成什么？小全狐狸为什么站不起来？因为他狡猾(脚滑)&#x2F;骚断腿许仙给老婆买了一顶帽子，白娘子戴上之后，为什么感觉头特别重?因为那是鸭舌帽青蛙吃了什么就会变哑巴?南瓜(难呱) folders123&#123;% folders折叠容器 %&#125;&lt;!-- folder 吃饭时停电为什么扒拉两口饭灯就会亮？ --&gt;&#123;% endfolders %&#125; emojiemoji表情 height控制大小1&#123;% emoji blobcat ablobcatrainbow height:2em %&#125; 你猜对了吗？ 你猜对了吗？ hashtag苏末了 hastag标签 color颜色1&#123;% hashtag 苏末了 https://sumorio.com color:green %&#125; image阳光明媚 /属性名和值之间不要有空格1&#123;% image https://cdn.jsdelivr.net/gh/Sumorio/BlogPic/wolframlanguage.png 阳光明媚 width:300px padding:10px download:href bg:#e0ebe4 %&#125; icons.yml123&#123;% quot prefix:solar:planet-bold-duotone 这是一个 icons.yml 配置的示例 %&#125;&#123;% quot prefix:https://api.iconify.design/line-md:moon-alt-to-sunny-outline-loop-transition.svg 这是一个 url 的示例 suffix:https://api.iconify.design/solar:list-heart-minimalistic-line-duotone.svg %&#125; 这是一个 icons.yml 配置的示例 这是一个 url 的示例 button探索 探索 /button按钮link12&#123;% button 探索 https://github.com/xaoxuu/hexo-theme-stellar/ icon:solar:planet-bold-duotone size:xs %&#125;&#123;% button 探索 https://github.com/xaoxuu/hexo-theme-stellar/ icon:solar:planet-bold-duotone %&#125; OKR O1 2024年的小目标：完成 Volantis 6.0 并发布上线 来自2025年的复盘：已《基本》实现目标 正常 44% KR1 重构 tag-plugins 和 wiki 系统 当 KR 进度为 100% 时，标签默认显示为 已完成当 KR 未设置进度时，默认为 0%当 O 未设置进度时，则显示所有 KR 进度平均值 已完成 100% KR2 完成主要页面设计稿 小提示1小提示2您可以在 _config.yml 文件中修改标签的颜色和文案您可以在 _config.yml 文件中增加任意的标签配置 延期 90% KR3 完成前置准备工作（如果你知道答案，请在留言区帮帮我！🥹） 在咸水和海滩之间找一亩地求出圆周率后15位找出宇宙的终极逻辑去地狱里走两步 未完成 -12% KR-4 开发、测试和发布 支持嵌套插入图片等其它简单组件 风险 0% OKR目标计划 O1 学无止境，每年至少完成两个兴趣爱好的挖掘和开拓，同时产出该爱好相关的作品。 正常 23% KR1 个人博客：完成因版本更新导致的遗留问题和历史版本迁移 旧界面重构: 每次主题更新，更改时间周期不超过 5Days。新内容更新：在保持日常更新频率的同时，完成其余板块的更新完成 wiki-系统、笔记-模块、about 界面的配置更新|内容重组|界面美化。完成 chatgpt 板块完善、前端板块持续输出不少于 10 篇。 风险 50% KR2 个人技能：持续学习全栈开发，全面提升个人技术能力。 前端：完成学习并完成个人网页的开发。后端：与前端联合，完成一个自动化网页商城的搭建。 未完成 20% KR3 娱乐活动：学习数位板的使用，搭配 blender 模型设计并完成一个人物建模。 未完成 0% Copy $ /copy复制行12345&#123;% copy curl -s https://sh.xaox.cc/install | sh %&#125;&#123;% copy curl -s https://sh.xaox.cc/install | sh prefix:$ %&#125;&#123;% copy git:https xaoxuu.com/hexo-theme-stellar %&#125;&#123;% copy git:ssh xaoxuu.com/hexo-theme-stellar %&#125;&#123;% copy git:gh xaoxuu.com/hexo-theme-stellar %&#125; radio没有勾选的单选框 已勾选的单选框 /color颜色 checked选中12&#123;% radio 没有勾选的单选框 color:purple %&#125;&#123;% radio checked:true 已勾选的单选框 color:red %&#125; checkbox普通的没有勾选的复选框 普通的已勾选的复选框 显示为加号的绿色的已勾选的复选框 显示为减号的黄色的已勾选的复选框 显示为乘号的红色的已勾选的复选框 /复选框 color symbol12345&#123;% checkbox 普通的没有勾选的复选框 %&#125;&#123;% checkbox checked:true 普通的已勾选的复选框 %&#125;&#123;% checkbox symbol:plus color:green checked:true 显示为加号的绿色的已勾选的复选框 %&#125;&#123;% checkbox symbol:minus color:yellow checked:true 显示为减号的黄色的已勾选的复选框 %&#125;&#123;% checkbox symbol:times color:red checked:true 显示为乘号的红色的已勾选的复选框 %&#125; audio /type:歌曲2/歌单0|netease:歌曲/歌单ID|autoplay:自动1/手动012345&#123;% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125;&#123;% audio netease:109485 %&#125;&#123;% audio type:0 netease:6938689445 autoplay:0 %&#125; video Your browser does not support the video tag. Your browser does not support the video tag. navbar博客文章项目专栏朋友圈&留言板自我介绍GitHub /navbar导航1&#123;% navbar active:/wiki/ [博客文章](/) [项目](/wiki/) [专栏](/topic/) [朋友圈&amp;留言板](#comments) [自我介绍](/about/) [GitHub](https://github.com/xaoxuu/) %&#125; psw&#x2F;u&#x2F;emp&#x2F;wavy&#x2F;del&#x2F;sup&#x2F;sub&#x2F;kbd 这是 密码 标签 这是 下划线 标签 这是 着重号 标签 这是 波浪线 标签 这是 删除线 标签 这是 上角标 标签 这是 下角标 标签 这是 键盘样式 标签，试一试：⌘ + D /文本格式12345678- 这是 &#123;% psw 密码 %&#125; 标签- 这是 &#123;% u 下划线 %&#125; 标签- 这是 &#123;% emp 着重号 %&#125; 标签- 这是 &#123;% wavy 波浪线 %&#125; 标签- 这是 &#123;% del 删除线 %&#125; 标签- 这是 &#123;% sup 上角标 color:red %&#125; 标签- 这是 &#123;% sub 下角标 %&#125; 标签- 这是 &#123;% kbd 键盘样式 %&#125; 标签，试一试：&#123;% kbd ⌘ %&#125; + &#123;% kbd D %&#125; Timeline时间线2024 年 1 月 1 日新年快乐。🐾😸2024 年 2 月 6 日回家过年，新的一年，新的成长。2024 年 12 月 12 日这是一个预言说说。🈲 在目录树中隐藏某篇文章可以在 front-matter 中不设置 title 标题，或者将 title 改为 seo_title。 /blog/source/xxx/xxx.md12title: &#x27;&#x27;seo_title:标题 ghcard 卡片 12&#123;% ghcard sumorio %&#125;&#123;% ghcard sumorio/sumorio.github.io theme:dark %&#125; Tabs 分栏器图片test代码块test文字test12let x = 123print(&quot;hello world&quot;)这是一个测试。Test it 😸🐾 grid 网格分区容器 阿尔贝·加缪（1913—1960年），法国声名卓著的小说家、散文家和剧作家，存在主义文学大师，“荒诞哲学”的代表人物。 不要走在我后面，因为我可能不会引路；不要走在我前面，因为我可能不会跟随；请走在我的身边，做我的朋友。 我们很少信任比我们好的人，宁肯避免与他们来往。相反，我们常对与我们相似、和我们有着共同弱点的人吐露心迹。我们并不希望改掉弱点，只希望受到怜悯与鼓励。 真正的救赎，并不是厮杀后的胜利，而是能在苦难之中找到生的力量和心的安宁。 swiper 轮播容器默认一张图片是 50% 宽度，通过设置 width:min 设置为 25% 宽度，width:max 设置为 100% 宽度。effect:cards&#x2F;coverflow. 123456&#123;% swiper effect:cards %&#125;![](https://images.unsplash.com/photo-1625171515821-1870deb2743b?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=774&amp;q=80)![](https://images.unsplash.com/photo-1528283648649-33347faa5d9e?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=774&amp;q=80)![](https://images.unsplash.com/photo-1542272201-b1ca555f8505?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=774&amp;q=80)![](https://images.unsplash.com/photo-1524797905120-92940d3a18d6?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=774&amp;q=80)&#123;% endswiper %&#125; katex 插件$$\\sum_{i&#x3D;0}^n i^2 &#x3D; \\frac{(n^2+n)(2n+1)}{6}$$ mathjax 插件$$\\sum_{i&#x3D;0}^n i^2 &#x3D; \\frac{(n^2+n)(2n+1)}{6}$$ 图表类插件graph LR A(打开冰箱) -->|拿出大象| B(把大象装冰箱) B -->|安抚大象情绪| C(关闭冰箱) journey title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 5: Me Post文章问题文章如何置顶？在front-matter配置sticky: 数字序号。 删除顶部导航在front-matter配置breadcrumb: false 不显示文章标题在front-matter配置h1: &#39;&#39; 将一级标题置空。 paper标签单影只人见字如面。见字如面。心是一座孤岛，即便岛上繁花似锦，四季更替，依然只是一个人的风景。繁华也好，萧条也好，都只属于一个人。记得有人说过这样一句话：一人花开，一人花落，这些年从头到尾，无人问询。那种寥落，如轩窗外的一片月色，独自在树梢起舞，却无人欣赏它清丽的舞姿。又像是一阙小词，笔笔皆清冷，笔笔皆寂寥。抓到一名同学欢迎留言哦！好的，一定会的！且听风吟2023.09.08留言 一些喜欢的文字❄️字迹已经模糊,因为思念的缘故.❄️我从没被谁知道,所以也没被谁忘记.在别人的回忆中生活,并不是我的目的.❄️画下丘陵——长满淡淡的茸毛,我让它们挨得很近,让它们相爱,让每一个默许,每一阵静静的春天的激动,都成为一朵小花的生日.❄️树枝想去撕裂天空,却只戳了几个微小的窟窿,它透出了天外的光亮,人们把它叫做月亮和星星.❄️种子在冻土里梦想春天。❄️路是这样窄吗？只是一脉田埂。拥攘而沉默的苜蓿，禁止并肩而行。如果你跟我走，你会数我的脚印；如果我随你去，只能看你的背影。❄️人生两件幸事，思想自由，行动自由。❄️唯有承认了孤独的必然，才能享受不从众的自在，有多少孤独就有多少真实。❄️一个人能够追求的最高理想就是自我的完善。❄️一颗石子扔到河里，整个宇宙就会变得和原来不同。❄️你终究会成为你正在成为的人，你的每一个选择都是来自你人生意义的诘问。❄️剃刀锋利，越之不易；智者有云，得渡人稀。 祝君好","tags":["功能测试"],"categories":["杂文向","Stellar"]},{"title":"如何写小说","path":"/posts/58b305af.html","content":"三幕结构+两扇门 1）三幕结构三幕指的是：故事开头、中段和结尾。 第一幕：故事开头 目标：吸引读者，重点是角色。 切入点：主角，利用认同&amp;同情&amp;喜爱&amp;内心冲突，尽快让读者与主角之间产生共鸣（联结）。 其他作用：介绍故事背景，奠定小说基调，带出对手（哪些人、事想要阻挡主角），说服读者读到中段。 利用开场白、行动、预告、态度、外框故事或序章引起读者兴趣。 不要用沉闷的说明段落开头，先写动作。 第二幕：故事中段 目标：铺陈结尾，重点是冲突。主角身边总是笼罩着死亡，可以是实质、精神、职业生涯的死亡等。 将主角和对手绑定在一起，描述主角和对手之间一系列的攻防战。 增强主角与对手的附着元素（如果主角停止行动就能解决问题，那读者会质疑为什么他不放弃）。如生与死（维持个人命运）；职责（警察办案）；道德义务（母亲救孩子）；偏执（家暴杀人狂）；地点（雪暴困在山里）。 角色要付出代价，代价可能与情节、角色、社会有关。 基本节奏是“行动，反应，再行动”。 中段需加深角色之间的关系，让读者关心主角，并铺陈结尾的最后决战。 可以增加支线情节，增加小说复杂性，反应小说想表达的深层蕴涵。 第三幕：故事结尾 完结每条故事线，告诉读者最后决战的结果（目标），留下余韵。 三种基本结尾：主角达成目标；主角没完成目标；读者不知道主角是否完成目标。 主角可以达成目标，负面结尾收场；主角可以没达成目标，正面结尾收场。 牺牲是许多结尾常用的强力元素。 有些结尾主角参与最终决战，有些则专注于主角做出最终决策。 2）扰乱事件&amp;两扇门扰乱事件第一幕的开头，必须有事情打乱现状。你只要站在读者的角度思考就会懂了，一定要发生某件事，让我们觉得角色即将面临威胁或挑战。想想希区柯克的名言，如果事件不快点发生，你的开头就要无聊掉了。扰乱事件不一定要是严重的威胁，只要打乱主角平静的日常生活就好。 扰乱事件有无限多种，以下举几个例子： 半夜打来的电话 ·信中提到一些奇妙的消息 ·老板把主角叫进他的办公室 ·小孩被送去医院 ·车子在沙漠中的小镇抛锚 ·主角中了彩票 ·主角目击一场意外或谋杀案 ·主角的太太（或先生）留下字条，告知她（他）要离开了 从结构来看，第一个扰乱事件能引起读者的兴趣，暗示接下来要讲一个有趣的故事。然而这时还没来到情节的主要段落，因为冲突还没发生，对手和主角还没陷入不可避免的战斗。 两扇门 该怎么从开头进入中段（从第一幕到第二幕），再从中段进到结尾（从第二幕到第三幕），重点就在于转变。与其称之为转折点，我觉得把这两次转变想象成“无法折返的门”，对你更有帮助。 无法折返代表了你想创造的感觉：将主角往前推的力量，一种无可避免的氛围。人类总是安于现状，追求安定。我们笔下的角色也一样，除非发生什么事将主角推进第二幕，否则他只会心满意足地待在第一幕！他只渴望留在自己平凡的世界里。 你必须想办法把他赶出平凡的世界，逼他面对冲突。你需要某样东西把他踢过那扇门，否则他只会赖在家里不走。 一旦穿过门，就可以产生冲突了。第二幕会持续描写主角的奋斗，但故事总得结束，因此第二扇无法折返的门必须将主角快速送往冲击结局。 这两扇门负责把三幕情节串联起来，就像联结火车车厢的螺栓。如果螺栓没拴紧，或根本不存在，你的火车就跑不动了。 1、通过第一扇门（小说 1&#x2F;5 处）为了从开头通过第一扇门，你必须创造一个场景，把主角丢进主要冲突，而且无法离开。主角的一般世界，安全休闲的地方。这个世界也可能发生问题，但不会带来重大改变。 主角待在这儿很满足，因此必须有事把他推过门口(外在的世界，未知的领域，黑暗的森林)穿过了门后，主角必须探索自己内心，展现勇气，学习新的事物，结交新的盟友等等。 2、通过第二扇门（小说 3&#x2F;4 处）想从中段进入第二扇无法折返的门——也必须发生一件事，导向最后的对峙。第二扇门通常是一条重要线索或信息，或是重大挫折和危机，借此将故事快速抛向结局。 主角面对一系列的挑战与冲突。除非碰上危机、挫折或新发现，因而打开第二扇门，露出通往高潮结尾的路，否则冲突只能持续下去。 过了门后，主角可以集结外在及内心的力量，面对最终之战或最后的选择，让故事结束。主角无法从这扇门折返，因为故事必须结束。","tags":["写作技巧"],"categories":["写作向","写作技巧"]},{"title":"叔本华|十四行诗","path":"/posts/ed4d040e.html","content":"叔本华叔本华（Arthur Schopenhauer ，1788—1860）是德国著名哲学家，唯意志主义和现代悲观主义创始人。主要著作《作为意志和表象的世界》。 主要著作 1813 年 《论充足理由律的四重根》（Über die vierfache Wurzel des Satzes vom zureichenden Grunde） 1816 年 《论视觉和颜色》（Über das Sehen und die Farben） 1819 年 《作为意志和表象的世界》（Die Welt als Wille und Vorstellung） 1836 年 《论大自然的意志》（Über den Willen in der Natur） 1839 年 《论意志的自由》（Über die Freiheit des menschlichen Willens） 1840 年 《论道德的基础》（Über die Grundlage der Moral） 1841 年 《伦理学的两个基本问题》（ Die beiden Grundprobleme der Ethik ） 1851 年 《附录与补遗》（Parerga und Paralipomena） 作品节选中文英文十四行诗叔本华漫长的冬夜永无尽头，太阳磨蹭着始终不到，风暴与猫头鹰竞相怒吼，干戈鸣响在脆弱的墙头。坟墓尽开遣出了精灵:围着我团转飞舞，想要吓我个魂飞魄散，但我不会向他们看上一眼。白天，白天，我要高声地宣布即将到来!黑夜和鬼怪都会逃之夭夭:晨星已在报告白天的到来。很快，就算是最深暗之处都会被照亮:光芒和色彩会覆盖着世界，无边的远空是一片深蓝。魏玛/1813年/诗词节选十四行诗叔本华Perpetual winter’s night will never end;And tarries the sun as though he ne’er would come;The tempest emulates the hooting owls;And weapons clank on crumbling walls.And open tombs their ghosts dispatch:And spread around, they try to scare my soul,That it may never be redeemed;-yet to them I will not turn my gaze.The day, the day I will with strident voice proclaim!Night and ghosts from it will flee:The morning star is ushering it in.Soon it is light e’en in the darkest depths:Radiant colour will the world suffuse,And boundless space is bathed in brightest blue.魏玛/1813年/诗词节选 十四行诗叔本华漫长的冬夜永无尽头，太阳磨蹭着始终不到，风暴与猫头鹰竞相怒吼，干戈鸣响在脆弱的墙头。坟墓尽开遣出了精灵:围着我团转飞舞，想要吓我个魂飞魄散，但我不会向他们看上一眼。白天，白天，我要高声地宣布即将到来!黑夜和鬼怪都会逃之夭夭:晨星已在报告白天的到来。很快，就算是最深暗之处都会被照亮:光芒和色彩会覆盖着世界，无边的远空是一片深蓝。魏玛/1813年/诗词节选 十四行诗叔本华Perpetual winter’s night will never end;And tarries the sun as though he ne’er would come;The tempest emulates the hooting owls;And weapons clank on crumbling walls.And open tombs their ghosts dispatch:And spread around, they try to scare my soul,That it may never be redeemed;-yet to them I will not turn my gaze.The day, the day I will with strident voice proclaim!Night and ghosts from it will flee:The morning star is ushering it in.Soon it is light e’en in the darkest depths:Radiant colour will the world suffuse,And boundless space is bathed in brightest blue.魏玛/1813年/诗词节选","tags":["诗歌","叔本华"],"categories":["诗歌向","叔本华"]},{"title":"如何写小说提纲","path":"/posts/25037f5b.html","content":"通过写提纲来思考和确认小说中的重要节点。 如何写小说提纲 为每个场景建立相应的文档或便签。每个场景都有不少问题亟需解决： 主人公的目标、 路途上的障碍（包括其来源）、 她应对障碍的对策、 她是否克服了障碍（结果经常是否定的）、 如果她失败了后果是什么，等。同时，标明场景的发生地、涉及的人物以及他们的目标和障碍（不用抠得过细） 写提纲时，随时记录灵感。 一般情况下先对每个场景有个大致的了解，才会动笔写初稿。 通过写提纲来思考和确认小说中的重要节点。 构思小说时，我会首先基于小说主旨，设计出具有里程碑意义的事件。我有时会以流程图的形式将提纲画在纸上，或者干脆用便利贴，这样小说的重要情节点就依次浮出水面了。我将这样的表格称作“动点进度表”。当你按顺序浏览重要节点时，你就知道小说是否行得通，小说节奏、小说轨迹、人物轨迹是否合适也一目了然。有问题的部分，你大可以通过调整提纲来解决，而不用大费周章重写初稿。 写提纲的好处？ 知道我要写什么，了解主人公在意什么。 不写提纲，甚至打乱场景的写作顺序，结果会导致，飘忽不定、眼睁睁地看着人物漫无目的地游荡在各个角落，所说的也尽是些漫无边际的话。 写提纲时，可以逐渐察觉到场景的联系。如果我知道下一步要发生什么，我就可以让主人公自然地靠拢过去，当然，有时是让她自掘坟墓；我可以制造她与其他人物的矛盾；我还可以在章节末尾留下悬念（这太有趣了）。提纲让我了解小说的框架，等到创作时，我就可以丰富小说层次，让情节变得更有趣。","tags":["写作技巧"],"categories":["写作向"]},{"title":"关于我","path":"/about/index.html","content":"耶 嗨朋友，保持好奇心，做有趣的灵魂 人海茫茫，恭喜你发现我了。MBTI: ENFP一个技术不精、学术不才，热衷于瞎折腾的萌新。职业:数据分析师。喜欢技术/玄学/哲学/心理学/音乐/美剧/电影等，同样好奇绘画/吉他/设计/艺术/历史等。始终秉持：“活到老，学到老” 的人生信条。"},{"title":"豆瓣","path":"/douban/index.html","content":"BooKMovie"},{"path":"/explore/index.html","content":"实用工具分享 设计素材Thum.io网站截图apiColorHunt配色网站Adobe-Color调色盘Pinterest创意视觉素材Onlineimagetool在线压缩和转换图片Unsplash免费图片素材Pexels摄影作者免费分享平台Flaticonicon图标素材Free-line-design分隔栏图标素材Fontawesome免费Icon素材Namecheap自定义Logo设计Openpeeps自定义手绘插画图Duitang堆糖图库"},{"title":"朋友圈","path":"/friends/index.html","content":"正是江南好风景，落花时节又逢君。 如何互关友链 互关原则 先友后链：彼此有效互动大于3次，issue或者留言。 安全合规：合法网站，非纯搬运，非盈利，无木马植入的站点。 有效网站：至少5篇原创文章；能正常访问。 其他原则：若您的网站长期不更新、存在广告等情况，可能会暂时下架。 互关方法 1. 新建 [New issues]，填写您的站点信息。为了提高图片加载速度，建议优化头像：打开 压缩图 上传头像，尺寸调整到 144px 后下载。将压缩后的图片上传到图床并使用此图片链接作为头像。 2. 将本站点添加至您的友链中。12345&#123; &quot;title&quot;: &quot;苏末了&quot;, &quot;url&quot;: &quot;https://sumorio.com/&quot;, &quot;avatar&quot;: &quot;https://cdn.jsdelivr.net/gh/Sumorio/BlogPic/01d44c8e1aa35513951cffcac10b12f9.jpg&quot;&#125; 3. 等待站长审核通过，刷新该网页即可呈现友链。 如果您需要更新自己的友链，请直接修改 issue 内容，大约 3 分钟内生效，无需等待博客重新部署。 → 快点击这里，互换友链吧 ← 留言区"},{"path":"/custom/css/ZYDark.css","content":"#ZYDark:root { --site-bg: #1c1e21; --card: #373d43; --block: #26292c; --block-border: #383d42; --block-hover: #2f3337; --text-p0: #fff; --text-p1: #ccc; --text-p2: #b3b3b3; --text-p3: #858585; --text-p4: #707070; --text-meta: #4d4d4d; --text-code: #ff6333; } @media screen and (max-width: 667px) { #ZYDark:root { --site-bg: #000; } } #ZYDark:root { --blur-bg: rgba(0, 0, 0, 0.5); } #ZYDark .float-panel { --blur-bg: rgba(0, 0, 0, 0.4); } #ZYDark .tag-plugin.tag { --theme: #ff6333; --theme-bg1: #3d1e14; --theme-bg2: #2f2522; --theme-border: #5c2d1f; --text-p0: #ffc4b3; --text-p1: #dfae9f; --text-p2: #f1997e; } #ZYDark .tag-plugin[color=\"red\"] { --theme: #f44336; --theme-bg1: #3d1714; --theme-bg2: #2f2322; --theme-border: #5c231f; --text-p0: #ffb8b3; --text-p1: #dfa49f; --text-p2: #f1867e; } #ZYDark .tag-plugin[color=\"orange\"] { --theme: #fa6400; --theme-bg1: #3d2514; --theme-bg2: #2f2722; --theme-border: #5c371f; --text-p0: #ffd1b3; --text-p1: #dfb99f; --text-p2: #f1ac7e; } #ZYDark .tag-plugin[color=\"yellow\"] { --theme: #ffbd2b; --theme-bg1: #3d3014; --theme-bg2: #2f2b22; --theme-border: #5c491f; --text-p0: #ffe7b3; --text-p1: #dfcb9f; --text-p2: #f1cd7e; } #ZYDark .tag-plugin[color=\"green\"] { --theme: #3dc550; --theme-bg1: #143d1a; --theme-bg2: #222f24; --theme-border: #1f5c27; --text-p0: #b3ffbd; --text-p1: #9fdfa8; --text-p2: #7ef18e; } #ZYDark .tag-plugin[color=\"cyan\"] { --theme: #1bcdfc; --theme-bg1: #14353d; --theme-bg2: #222d2f; --theme-border: #1f4f5c; --text-p0: #b3efff; --text-p1: #9fd2df; --text-p2: #7ed9f1; } #ZYDark .tag-plugin[color=\"blue\"] { --theme: #2196f3; --theme-bg1: #142b3d; --theme-bg2: #222a2f; --theme-border: #1f415c; --text-p0: #b3ddff; --text-p1: #9fc3df; --text-p2: #7ebef1; } #ZYDark .tag-plugin[color=\"purple\"] { --theme: #9c27b0; --theme-bg1: #37143d; --theme-bg2: #2d222f; --theme-border: #531f5c; --text-p0: #f4b3ff; --text-p1: #d69fdf; --text-p2: #e07ef1; } #ZYDark .tag-plugin[color=\"light\"] { --theme-border: #fff; --theme-bg1: #e0e0e0; --theme-bg2: #fff; --text-p0: #000; --text-p1: #111; --text-p2: #1f1f1f; --text-p3: #555; --text-code: #fff; } #ZYDark .tag-plugin[color=\"dark\"] { --theme-border: #000; --theme-bg1: #1f1f1f; --theme-bg2: #111; --text-p0: #fff; --text-p1: #fff; --text-p2: #e0e0e0; --text-p3: #ddd; --text-code: #fff; } #ZYDark .tag-plugin[color=\"warning\"], #ZYDark .tag-plugin[color=\"light\"] { --text-p0: #000; --text-p1: #111; --text-p2: #1f1f1f; --text-p3: #555; --text-code: #fff; } #ZYDark .social-wrap a.social:hover { box-shadow: none; } /* waline评论样式 */ #ZYDark .wl-count { padding: 0.375em; font-weight: bold; font-size: 1.25em; color: #fff; } #ZYDark .cmt-body.waline { --waline-white: #000; --waline-light-grey: #666; --waline-dark-grey: #999; /* 布局颜色 */ --waline-color: #fff; --waline-bgcolor: var(--block); --waline-bgcolor-light: #272727; --waline-border-color: #333; --waline-disable-bgcolor: #444; --waline-disable-color: #272727; /* 特殊颜色 */ --waline-bq-color: #272727; /* 其他颜色 */ --waline-info-bgcolor: #272727; --waline-info-color: #666; }"},{"path":"/custom/css/darkmode.css","content":"#Dark:root { --site-bg: #1c1e21; --card: #373d43; --block: #26292c; --block-border: #383d42; --block-hover: #2f3337; --alpha20: rgba(0,0,0,0.2); --alpha50: rgba(0,0,0,0.5); --alpha60: rgba(0,0,0,0.6); --alpha75: rgba(0,0,0,0.75); --alpha100: #000; --sidebar-bg: #383d42; --text: #fff; --text-p0: #fff; --text-p1: #ccc; --text-p2: #b3b3b3; --text-p3: #858585; --text-p4: #707070; --text-meta: #4d4d4d; --text-code: #ff6333; } @media screen and (max-width: 667px) { #Dark:root { --site-bg: #000; } } #Dark:root { --blur-bg: rgba(0,0,0,0.5); } #Dark .float-panel { --blur-bg: rgba(0,0,0,0.4); } #Dark .tag-plugin.tag { --theme: #ff6333; --theme-bg1: #3d1e14; --theme-bg2: #2f2522; --theme-border: #5c2d1f; --text-p0: #ffc4b3; --text-p1: #dfae9f; --text-p2: #f1997e; } #Dark .tag-plugin[color='red'] { --theme: #f44336; --theme-bg1: #3d1714; --theme-bg2: #2f2322; --theme-border: #5c231f; --text-p0: #ffb8b3; --text-p1: #dfa49f; --text-p2: #f1867e; } #Dark .tag-plugin[color='orange'] { --theme: #fa6400; --theme-bg1: #3d2514; --theme-bg2: #2f2722; --theme-border: #5c371f; --text-p0: #ffd1b3; --text-p1: #dfb99f; --text-p2: #f1ac7e; } #Dark .tag-plugin[color='yellow'] { --theme: #ffbd2b; --theme-bg1: #3d3014; --theme-bg2: #2f2b22; --theme-border: #5c491f; --text-p0: #ffe7b3; --text-p1: #dfcb9f; --text-p2: #f1cd7e; } #Dark .tag-plugin[color='green'] { --theme: #3dc550; --theme-bg1: #143d1a; --theme-bg2: #222f24; --theme-border: #1f5c27; --text-p0: #b3ffbd; --text-p1: #9fdfa8; --text-p2: #7ef18e; } #Dark .tag-plugin[color='cyan'] { --theme: #1bcdfc; --theme-bg1: #14353d; --theme-bg2: #222d2f; --theme-border: #1f4f5c; --text-p0: #b3efff; --text-p1: #9fd2df; --text-p2: #7ed9f1; } #Dark .tag-plugin[color='blue'] { --theme: #2196f3; --theme-bg1: #142b3d; --theme-bg2: #222a2f; --theme-border: #1f415c; --text-p0: #b3ddff; --text-p1: #9fc3df; --text-p2: #7ebef1; } #Dark .tag-plugin[color='purple'] { --theme: #9c27b0; --theme-bg1: #37143d; --theme-bg2: #2d222f; --theme-border: #531f5c; --text-p0: #f4b3ff; --text-p1: #d69fdf; --text-p2: #e07ef1; } #Dark .tag-plugin[color='light'] { --theme-border: #fff; --theme-bg1: #e0e0e0; --theme-bg2: #fff; --text-p0: #000; --text-p1: #111; --text-p2: #1f1f1f; --text-p3: #555; --text-code: #fff; } #Dark .tag-plugin[color='dark'] { --theme-border: #000; --theme-bg1: #1f1f1f; --theme-bg2: #111; --text-p0: #fff; --text-p1: #fff; --text-p2: #e0e0e0; --text-p3: #ddd; --text-code: #fff; } #Dark .tag-plugin[color='warning'], #Dark .tag-plugin[color='light'] { --text-p0: #000; --text-p1: #111; --text-p2: #1f1f1f; --text-p3: #555; --text-code: #fff; } #Dark .tag-plugin { /* --theme: var(--text-p1); */ --theme-border: var(--block-border); --theme-block: var(--block); --theme-codeblock: var(--block); } #Dark .social-wrap a.social:hover { box-shadow: none; } #Dark .widget-wrapper.timeline .tag-plugin.timeline .timenode .header p { color: var(--text-p2); } #Dark .widget-wrapper.timeline .tag-plugin.timeline .timenode .body { border-radius: 12px; background: var(--alpha50); box-shadow: none; } #Dark a.button.start.gradient { transition: 0.38s ease-out; position: relative; z-index: 0; /* background: linear-gradient(to right, #4c95fa, #38c9fa, #24f9c4, #24f9c4, #38c9fa, #4c95fa); */ background: #247660 ; background-size: 1000%; color: #fff; text-shadow: 0 0 1px rgba(0,0,0,0.12); animation: glow 60s linear infinite; } /* aplayer音乐播放器样式 */ #Dark .aplayer { background: #26292c; font-family: Arial,Helvetica,sans-serif; margin: 5px; box-shadow: 0 2px 2px 0 rgba(0,0,0,.07),0 1px 5px 0 rgba(0,0,0,.1); border-radius: 12px; overflow: hidden; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; line-height: normal; position: relative; } #Dark .aplayer .aplayer-list ol li { position: relative; height: 32px; line-height: 32px; padding: 0 15px; font-size: 12px; border-top: 1px solid #383d42; cursor: pointer; transition: all .2s ease; overflow: hidden; margin: 0; } /* 当前选择歌曲 */ #Dark .aplayer .aplayer-list ol li.aplayer-list-light { background: #f4f4f4; color: #373737; font-size: small; font-weight: bold; } /* 经过字体颜色和大小变化 */ #Dark .aplayer .aplayer-list ol li:hover { background: #efefef; color: #ff5722; font-size: small; font-weight: bold; } .aplayer .aplayer-list ol li.aplayer-list-light, .aplayer .aplayer-list ol li:hover { font-size: small; font-weight: bold; } .aplayer .aplayer-info .aplayer-music .aplayer-title { font-size: 17px; } /* waline评论样式 */ #Dark .wl-count{ padding: .375em; font-weight: bold; font-size: 1.25em; color: #fff; } #Dark .cmt-body.waline{ --waline-white: #000; --waline-light-grey: #666; --waline-dark-grey: #999; /* 布局颜色 */ --waline-color: #fff; --waline-bgcolor: var(--block); --waline-bgcolor-light: #272727; --waline-border-color: #333; --waline-disable-bgcolor: #444; --waline-disable-color: #272727; /* 特殊颜色 */ --waline-bq-color: #272727; /* 其他颜色 */ --waline-info-bgcolor: #272727; --waline-info-color: #666; } #Dark .wl-user-name { color: #999; } /* 不是ai制作标识 */ #Dark #notbyai { content: url(\"/assets/website/Written-By-Human-black.png\"); }"},{"path":"/custom/css/ZYcode.css","content":":root{ --code-autor: '© 钟意博客🌙'; --code-tip: \"优雅借鉴\"; } /*语法高亮*/ .hljs { position: relative; display: block; overflow-x: hidden; /*背景跟随Stellar*/ background: var(--block); color: #9c67a1; padding: 30px 5px 2px 5px; box-shadow: 0 10px 30px 0px rgb(0 0 0 / 40%) } .hljs::before { content: var(--code-tip); position: absolute; left: 15px; top: 10px; overflow: visible; width: 12px; height: 12px; border-radius: 16px; box-shadow: 20px 0 #a9a6a1, 40px 0 #999; -webkit-box-shadow: 20px 0 #999, 40px 0 #999; background-color: #999; white-space: nowrap; text-indent: 75px; font-size: 16px; line-height: 12px; font-weight: 700; color: #999 } .highlight:hover .hljs::before { color: #35cd4b; box-shadow: 20px 0 #fdbc40, 40px 0 #35cd4b; -webkit-box-shadow: 20px 0 #fdbc40, 40px 0 #35cd4b; background-color: #fc625d; } .hljs-ln { display: inline-block; overflow-x: auto; padding-bottom: 5px } .hljs-ln td { padding: 0; background-color: var(--block) } .hljs-ln::-webkit-scrollbar { height: 10px; border-radius: 5px; background: #333; } .hljs-ln::-webkit-scrollbar-thumb { background-color: #bbb; border-radius: 5px; } .hljs-ln::-webkit-scrollbar-thumb:hover { background: #ddd; } .hljs table tbody tr { border: none } .hljs .hljs-ln-line { padding: 1px 10px; border: none } td.hljs-ln-line.hljs-ln-numbers { border-right: 1px solid #666; } .hljs-keyword, .hljs-literal, .hljs-symbol, .hljs-name { color: #c78300 } .hljs-link { color: #569cd6; text-decoration: underline } .hljs-built_in, .hljs-type { color: #4ec9b0 } .hljs-number, .hljs-class { color: #2094f3 } .hljs-string, .hljs-meta-string { color: #4caf50 } .hljs-regexp, .hljs-template-tag { color: #9a5334 } .hljs-subst, .hljs-function, .hljs-title, .hljs-params, .hljs-formula { color: #c78300 } .hljs-property { color: #9c67a1; } .hljs-comment, .hljs-quote { color: #57a64a; font-style: italic } .hljs-doctag { color: #608b4e } .hljs-meta, .hljs-meta-keyword, .hljs-tag { color: #9b9b9b } .hljs-variable, .hljs-template-variable { color: #bd63c5 } .hljs-attr, .hljs-attribute, .hljs-builtin-name { color: #d34141 } .hljs-section { color: gold } .hljs-emphasis { font-style: italic } .hljs-strong { font-weight: bold } .hljs-bullet, .hljs-selector-tag, .hljs-selector-id, .hljs-selector-class, .hljs-selector-attr, .hljs-selector-pseudo { color: #c78300 } .hljs-addition { background-color: #144212; display: inline-block; width: 100% } .hljs-deletion { background-color: #600; display: inline-block; width: 100% } .hljs.language-html::before, .hljs.language-xml::before { content: \"HTML/XML\" } .hljs.language-javascript::before { content: \"JavaScript\" } .hljs.language-c::before { content: \"C\" } .hljs.language-cpp::before { content: \"C++\" } .hljs.language-java::before { content: \"Java\" } .hljs.language-asp::before { content: \"ASP\" } .hljs.language-actionscript::before { content: \"ActionScript/Flash/Flex\" } .hljs.language-bash::before { content: \"Bash\" } .hljs.language-css::before { content: \"CSS\" } .hljs.language-asp::before { content: \"ASP\" } .hljs.language-cs::before, .hljs.language-csharp::before { content: \"C#\" } .hljs.language-d::before { content: \"D\" } .hljs.language-golang::before, .hljs.language-go::before { content: \"Go\" } .hljs.language-json::before { content: \"JSON\" } .hljs.language-lua::before { content: \"Lua\" } .hljs.language-less::before { content: \"LESS\" } .hljs.language-md::before, .hljs.language-markdown::before, .hljs.language-mkdown::before, .hljs.language-mkd::before { content: \"Markdown\" } .hljs.language-mm::before, .hljs.language-objc::before, .hljs.language-obj-c::before, .hljs.language-objective-c::before { content: \"Objective-C\" } .hljs.language-php::before { content: \"PHP\" } .hljs.language-perl::before, .hljs.language-pl::before, .hljs.language-pm::before { content: \"Perl\" } .hljs.language-python::before, .hljs.language-py::before, .hljs.language-gyp::before, .hljs.language-ipython::before { content: \"Python\" } .hljs.language-r::before { content: \"R\" } .hljs.language-ruby::before, .hljs.language-rb::before, .hljs.language-gemspec::before, .hljs.language-podspec::before, .hljs.language-thor::before, .hljs.language-irb::before { content: \"Ruby\" } .hljs.language-sql::before { content: \"SQL\" } .hljs.language-sh::before, .hljs.language-shell::before, .hljs.language-Session::before, .hljs.language-shellsession::before, .hljs.language-console::before { content: \"Shell\" } .hljs.language-swift::before { content: \"Swift\" } .hljs.language-vb::before { content: \"VB/VBScript\" } .hljs.language-yaml::before { content: \"YAML\" } /*stellar主题补偿*/ .md-text pre>.hljs { padding-top: 2rem !important; } .md-text pre { padding: 0 !important; } code { background-image: linear-gradient(90deg, rgba(60, 10, 30, .04) 3%, transparent 0), linear-gradient(1turn, rgba(60, 10, 30, .04) 3%, transparent 0) !important; background-size: 20px 20px !important; background-position: 50% !important; } figure::after { content: var(--code-autor); text-align: right; font-size: 10px; float: right; margin-top: 3px; padding-right: 15px; padding-bottom: 8px; color: #999 } figcaption span { border-radius: 0px 0px 12px 12px !important; } /* 复制代码按钮 */ .highlight { position: relative; } .highlight .code .copy-btn { position: absolute; top: 0; right: 0; padding: 4px 0.5rem; opacity: 0.25; font-weight: 700; color: var(--theme); cursor: pointer; transination: opacity 0.3s; } .highlight .code .copy-btn:hover { color: var(--text-code); opacity: 0.75; } .highlight .code .copy-btn.success { color: var(--swiper-theme-color); opacity: 0.75; } /* 描述 */ .md-text .highlight figcaption span { font-size: small; } /* 折叠 */ code.hljs { display: -webkit-box; overflow: hidden; text-overflow: ellipsis; -webkit-box-orient: vertical; /*-webkit-line-clamp: 6;*/ padding: 1rem 1rem 0 1rem; /* chino建议 */ } .hljsOpen { -webkit-line-clamp: 99999 !important; } .CodeCloseDiv { color: #999; background: var(--block); display: flex; justify-content: center; margin-top: inherit; margin-bottom: -18px; } .CodeClose { color: #999; margin-top: 3px; background: var(--block); } .highlight button:hover, .highlight table:hover+button { color: var(--swiper-theme-color); opacity: 0.75; }"},{"path":"/custom/css/self.css","content":".post-count { scrollbar-width: none; color: var(--text-p4); } .totalcount { color: var(--text-p4); } .page-footer { text-align: center; /* 让内容居中显示 */ margin: 0 auto; /* 可选：如果需要在页面上水平居中显示 */ width: 100%; /* 可选：设置宽度为100%，使其占满整个宽度 */ } .bread-nav div#page-words span.sep:before { content: '|'; } .bread-nav div#page-words span.updated { visibility: hidden; } .bread-nav:hover div#page-words span.updated { visibility: visible; }"},{"path":"/custom/css/tagcolor.css","content":"/* 默认的浅色模式颜色 */ :root { --tag-bg-color: #F2EEFD; --tag-text-color: #835EEC; } /* 暗黑模式下的颜色 */ @media (prefers-color-scheme: dark) { :root { --tag-bg-color: #282433; --tag-text-color: #A28BF2; } } :root { --ichika-color: #49A6E9; }"},{"path":"/custom/js/ZYDark.js","content":"/** * 监听系统主题 * @type {MediaQueryList} */ var OSTheme = window.matchMedia(\"(prefers-color-scheme: dark)\"); OSTheme.addListener((e) => { if (window.localStorage.getItem(\"ZYI_Theme_Mode\") === \"Moss\") { ThemeChange(\"Moss\"); } }); /** * 修改博客主题 * @param theme 亮为light,暗为dark,自动为auto * @constructor */ const ThemeChange = (theme) => { if (theme === \"light\" || (theme === \"Moss\" && !OSTheme.matches)) { document.querySelector(\"html\").id = \"ZYLight\"; document.querySelector( \"#start > aside > footer > div > a:nth-child(6)\" ).style.filter = \"grayscale(0%)\"; document.querySelector( \"#start > aside > footer > div > a:nth-child(5)\" ).style.filter = \"grayscale(100%)\"; } else { document.querySelector(\"html\").id = \"ZYDark\"; document.querySelector( \"#start > aside > footer > div > a:nth-child(5)\" ).style.filter = \"grayscale(0%)\"; document.querySelector( \"#start > aside > footer > div > a:nth-child(6)\" ).style.filter = \"grayscale(100%)\"; } if (theme === \"Moss\") { document.querySelector( \"#start > aside > footer > div > a:nth-child(7)\" ).style.filter = \"grayscale(0%)\"; } else { document.querySelector( \"#start > aside > footer > div > a:nth-child(7)\" ).style.filter = \"grayscale(100%)\"; } window.localStorage.setItem(\"ZYI_Theme_Mode\", theme); }; /** * 初始化博客主题 */ switch (window.localStorage.getItem(\"ZYI_Theme_Mode\")) { case \"light\": ThemeChange(\"light\"); break; case \"dark\": ThemeChange(\"dark\"); break; default: ThemeChange(\"Moss\"); } /** * 切换主题模式 */ document.querySelector( \"#start > aside > footer > div > a:nth-child(5)\" ).onclick = () => { ThemeChange(\"dark\"); }; document.querySelector( \"#start > aside > footer > div > a:nth-child(6)\" ).onclick = () => { ThemeChange(\"light\"); }; document.querySelector( \"#start > aside > footer > div > a:nth-child(7)\" ).onclick = () => { ThemeChange(\"Moss\"); }; // 新增"},{"path":"/custom/js/ZYcode.js","content":"// 这四个常量是复制,复制成功,展开,收缩 // 我使用的是 https://fontawesome.com/ 图标, 不用可以改为文字. const copyText = ''; const copySuccess = ''; const openText = ''; const closeText = ''; const codeElements = document.querySelectorAll(\"td.code\"); codeElements.forEach((code, index) => { const preCode = code.querySelector(\"pre\"); // 设置id和样式 preCode.id = `ZYCode${index + 1}`; preCode.style.webkitLineClamp = \"6\"; // 添加展开/收起按钮 if (preCode.innerHTML.split(\"\").length > 6) { const codeCopyDiv = document.createElement(\"div\"); codeCopyDiv.classList.add(\"CodeCloseDiv\"); code.parentNode.parentNode.parentNode.parentNode.appendChild(codeCopyDiv); const codeCopyOver = document.createElement(\"button\"); codeCopyOver.classList.add(\"CodeClose\"); codeCopyOver.innerHTML = openText; const parent = code.parentNode.parentNode.parentNode.parentNode; const description = parent.childNodes.length === 3 ? parent.children[2] : parent.children[1]; description.appendChild(codeCopyOver); codeCopyOver.addEventListener(\"click\", () => { if (codeCopyOver.innerHTML === openText) { const scrollTop = document.documentElement.scrollTop; const codeHeight = code.clientHeight; if (scrollTop < codeHeight) { document.documentElement.scrollTop += codeHeight - scrollTop; } preCode.style.webkitLineClamp = \"99999\"; codeCopyOver.innerHTML = closeText; } else { preCode.style.webkitLineClamp = \"6\"; codeCopyOver.innerHTML = openText; } }); } // 添加复制按钮 const codeCopyBtn = document.createElement(\"div\"); codeCopyBtn.classList.add(\"copy-btn\"); codeCopyBtn.innerHTML = copyText; code.appendChild(codeCopyBtn); // 添加复制功能 codeCopyBtn.addEventListener(\"click\", async () => { const currentCodeElement = code.querySelector(\"pre\")?.innerText; await copyCode(currentCodeElement); codeCopyBtn.innerHTML = copySuccess; codeCopyBtn.classList.add(\"success\"); setTimeout(() => { codeCopyBtn.innerHTML = copyText; codeCopyBtn.classList.remove(\"success\"); }, 3000); }); }); async function copyCode(currentCode) { if (navigator.clipboard) { try { await navigator.clipboard.writeText(currentCode); } catch (error) { console.error(error); } } else { console.error(\"当前浏览器不支持此API\"); } }"},{"path":"/custom/js/cursor-effects.js","content":"// 彩虹鼠标 document.addEventListener(\"DOMContentLoaded\", function () { const canvas = document.createElement(\"canvas\"); canvas.width = window.innerWidth; canvas.height = window.innerHeight; canvas.style.position = \"fixed\"; canvas.style.left = \"0\"; canvas.style.top = \"0\"; canvas.style.zIndex = \"2147483647\"; canvas.style.pointerEvents = \"none\"; document.body.appendChild(canvas); const ctx = canvas.getContext(\"2d\"); const particles = []; function Particle(x, y, radius, color) { this.x = x; this.y = y; this.radius = radius; this.color = color; this.velocity = { x: Math.random() * 4 - 2, y: Math.random() * 4 - 2, }; this.alpha = 1; } Particle.prototype.draw = function () { ctx.save(); ctx.globalAlpha = this.alpha; ctx.fillStyle = this.color; ctx.beginPath(); ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false); ctx.fill(); ctx.restore(); }; Particle.prototype.update = function () { this.x += this.velocity.x; this.y += this.velocity.y; this.alpha -= 0.02; }; function createParticles(x, y, hue) { const particleCount = 20; const radius = Math.random() * 2 + 1; const angleIncrement = (Math.PI * 2) / particleCount; for (let i = 0; i < particleCount; i++) { const angle = i * angleIncrement; const randomVelocity = Math.random() * 6 + 2; const vx = Math.cos(angle) * randomVelocity; const vy = Math.sin(angle) * randomVelocity; // 修改颜色和透明度 const color = `hsla(${(angle * 180) / Math.PI}, 100%, 50%, 0.8)`; // 根据角度生成彩虹色 particles.push(new Particle(x, y, radius, color, vx, vy)); } } function animate() { requestAnimationFrame(animate); ctx.clearRect(0, 0, canvas.width, canvas.height); particles.forEach((particle, index) => { particle.update(); particle.draw(); if (particle.alpha"},{"path":"/custom/js/darkmode.js","content":"/** * 监听系统主题 * @type {MediaQueryList} */ var OSTheme = window.matchMedia(\"(prefers-color-scheme: dark)\"); OSTheme.addListener((e) => { if (window.localStorage.getItem(\"Theme_Mode\") === \"auto\") { ThemeChange(\"auto\"); } }); /** * 自动模式 6:00-18:00-Light 18:00-6:00-Dark,开启后每三十分钟检查一次 */ const AutoMode = (htmlElement) => { var date = new Date(); var hours = date.getHours(); if (hours < 18 && hours >= 6) { document.querySelector(\"html\").id = \"Light\"; } else { document.querySelector(\"html\").id = \"Dark\"; } // if (htmlElement.id === \"Light\") { // 闪瞎你的眼模式（速度快一点的话） // htmlElement.id = \"Dark\"; // } else { htmlElement.id = \"Light\"; } }; let autoTimer; /** * 修改博客主题 * @param theme 亮为light,暗为dark,自动为auto * @constructor */ const ThemeChange = (theme) => { // 清除计时器 clearInterval(autoTimer); // 抽取元素 const htmlElement = document.querySelector(\"html\"); let themeBtnIcon; try { themeBtnIcon = document.querySelector( \"#start > aside > div > footer > div > a:nth-of-type > i\" ); } catch { // 元素不存在 } if (theme === \"light\" || (theme === \"auto\" && !OSTheme.matches)) { htmlElement.id = \"Light\"; if (themeBtnIcon) { themeBtnIcon.className = \"fa-solid fa-sun fa-spin fa-spin-reverse\"; } } else { htmlElement.id = \"Dark\"; if (themeBtnIcon) { themeBtnIcon.className = \"fa-solid fa-moon fa-fade\"; } } if (theme === \"auto\") { if (themeBtnIcon) { themeBtnIcon.className = \"fa-solid fa-circle-half-stroke fa-flip\"; } AutoMode(htmlElement); autoTimer = setInterval(function () { AutoMode(htmlElement); }, 1000 * 60 * 30); // 半小时一次 } window.localStorage.setItem(\"Theme_Mode\", theme); }; /** * 初始化博客主题 */ switch (window.localStorage.getItem(\"Theme_Mode\")) { case \"light\": ThemeChange(\"light\"); break; case \"dark\": ThemeChange(\"dark\"); break; default: ThemeChange(\"auto\"); } /** * 切换主题模式 */ // 绑定按钮点击事件 try { document.querySelector( \"#start > aside > div > footer > div > a:nth-of-type(6)\" ).onclick = () => { if (window.localStorage.getItem(\"Theme_Mode\") === \"auto\") { hud.toast(\"🔆日\"); ThemeChange(\"light\"); } else if (window.localStorage.getItem(\"Theme_Mode\") === \"light\") { hud.toast(\"🌙夜\"); ThemeChange(\"dark\"); } else { hud.toast(\"❤️Random\"); ThemeChange(\"auto\"); } }; } catch { // 元素不存在 }"},{"path":"/custom/js/adjust-codeblock-height.js","content":"// adjust-code-block-height.js document.addEventListener(\"DOMContentLoaded\", function() { // 选择所有的.md-text元素 var codeBlocks = document.querySelectorAll('.md-text'); // 遍历每个.md-text元素 codeBlocks.forEach(function(block) { // 检查是否包含.highlight类的子元素，且父元素高度超过500px var highlightBlocks = block.querySelectorAll('.highlight'); highlightBlocks.forEach(function(highlightBlock) { if (highlightBlock.clientHeight > 800) { highlightBlock.style.maxHeight = '300px'; highlightBlock.style.overflow = 'auto'; } }); }); }); // 给超长代码增加滚动条，代码框高度超过 800px，则开启折叠，折叠框最大高度为 300px。"},{"path":"/custom/js/txmap.js","content":"//get请求 $.ajax({ type: \"get\", url: \"https://apis.map.qq.com/ws/location/v1/ip\", data: { key: \"47YBZ-YYW3B-ZK4UY-JJWTK-CJAQS-UDFF7\", output: \"jsonp\", }, dataType: \"jsonp\", success: function (res) { ipLoacation = res; }, }); function getDistance(e1, n1, e2, n2) { const R = 6371 const { sin, cos, asin, PI, hypot } = Math let getPoint = (e, n) => { e *= PI / 180 n *= PI / 180 return { x: cos(n) * cos(e), y: cos(n) * sin(e), z: sin(n) } } let a = getPoint(e1, n1) let b = getPoint(e2, n2) let c = hypot(a.x - b.x, a.y - b.y, a.z - b.z) let r = asin(c / 2) * 2 * R return Math.round(r); } function showWelcome() { let dist = getDistance(113.34499552, 23.15537143, 108, 30); //这里换成自己的经纬度 let pos = ipLoacation.result.ad_info.nation; let ip; let posdesc; //根据国家、省份、城市信息自定义欢迎语 switch (ipLoacation.result.ad_info.nation) { case \"日本\": posdesc = \"よろしく，一起去看樱花吗\"; break; case \"美国\": posdesc = \"Let us live in peace!\"; break; case \"英国\": posdesc = \"想同你一起夜乘伦敦眼\"; break; case \"俄罗斯\": posdesc = \"干了这瓶伏特加！\"; break; case \"法国\": posdesc = \"C'est La Vie\"; break; case \"德国\": posdesc = \"Die Zeit verging im Fluge.\"; break; case \"澳大利亚\": posdesc = \"一起去大堡礁吧！\"; break; case \"加拿大\": posdesc = \"拾起一片枫叶赠予你\"; break; case \"中国\": pos = ipLoacation.result.ad_info.province + \" \" + ipLoacation.result.ad_info.city + \" \" + ipLoacation.result.ad_info.district; ip = ipLoacation.result.ip; switch (ipLoacation.result.ad_info.province) { case \"北京市\": posdesc = \"北——京——欢迎你~~~\"; break; case \"天津市\": posdesc = \"讲段相声吧。\"; break; case \"河北省\": posdesc = \"山势巍巍成壁垒，天下雄关。铁马金戈由此向，无限江山。\"; break; case \"山西省\": posdesc = \"展开坐具长三尺，已占山河五百余。\"; break; case \"内蒙古自治区\": posdesc = \"天苍苍，野茫茫，风吹草低见牛羊。\"; break; case \"辽宁省\": posdesc = \"我想吃烤鸡架！\"; break; case \"吉林省\": posdesc = \"状元阁就是东北烧烤之王。\"; break; case \"黑龙江省\": posdesc = \"很喜欢哈尔滨大剧院。\"; break; case \"上海市\": posdesc = \"众所周知，中国只有两个城市。\"; break; case \"江苏省\": switch (ipLoacation.result.ad_info.city) { case \"南京市\": posdesc = \"这是我挺想去的城市啦。\"; break; case \"苏州市\": posdesc = \"上有天堂，下有苏杭。\"; break; default: posdesc = \"散装是必须要散装的。\"; break; } break; case \"浙江省\": posdesc = \"东风渐绿西湖柳，雁已还人未南归。\"; break; case \"河南省\": switch (ipLoacation.result.ad_info.city) { case \"郑州市\": posdesc = \"豫州之域，天地之中。\"; break; case \"南阳市\": posdesc = \"臣本布衣，躬耕于南阳。此南阳非彼南阳！\"; break; case \"驻马店市\": posdesc = \"峰峰有奇石，石石挟仙气。嵖岈山的花很美哦！\"; break; case \"开封市\": posdesc = \"刚正不阿包青天。\"; break; case \"洛阳市\": posdesc = \"洛阳牡丹甲天下。\"; break; default: posdesc = \"可否带我品尝河南烩面啦？\"; break; } break; case \"安徽省\": posdesc = \"蚌埠住了，芜湖起飞。\"; break; case \"福建省\": posdesc = \"井邑白云间，岩城远带山。\"; break; case \"江西省\": posdesc = \"落霞与孤鹜齐飞，秋水共长天一色。\"; break; case \"山东省\": posdesc = \"遥望齐州九点烟，一泓海水杯中泻。\"; break; case \"湖北省\": posdesc = \"来碗热干面！\"; break; case \"湖南省\": posdesc = \"74751，长沙斯塔克。\"; break; case \"广东省\": posdesc = \"老板来两斤福建人。\"; break; case \"广西壮族自治区\": posdesc = \"桂林山水甲天下。\"; break; case \"海南省\": posdesc = \"朝观日出逐白浪，夕看云起收霞光。\"; break; case \"四川省\": posdesc = \"康康川妹子。\"; break; case \"贵州省\": posdesc = \"茅台，学生，再塞200。\"; break; case \"云南省\": posdesc = \"玉龙飞舞云缠绕，万仞冰川直耸天。\"; break; case \"西藏自治区\": posdesc = \"躺在茫茫草原上，仰望蓝天。\"; break; case \"陕西省\": posdesc = \"来份臊子面加馍。\"; break; case \"甘肃省\": posdesc = \"羌笛何须怨杨柳，春风不度玉门关。\"; break; case \"青海省\": posdesc = \"牛肉干和老酸奶都好好吃。\"; break; case \"宁夏回族自治区\": posdesc = \"大漠孤烟直，长河落日圆。\"; break; case \"新疆维吾尔自治区\": posdesc = \"驼铃古道丝绸路，胡马犹闻唐汉风。\"; break; case \"台湾省\": posdesc = \"我在这头，大陆在那头。\"; break; case \"香港特别行政区\": posdesc = \"永定贼有残留地鬼嚎，迎击光非岁玉。\"; break; case \"澳门特别行政区\": posdesc = \"性感荷官，在线发牌。\"; break; default: posdesc = \"带我去你的城市逛逛吧！\"; break; } break; default: posdesc = \"带我去你的国家逛逛吧。\"; break; } //根据本地时间切换欢迎语 let timeChange; let date = new Date(); if (date.getHours() >= 5 && date.getHours() < 11) timeChange = \"早上好！\"; else if (date.getHours() >= 11 && date.getHours() < 13) timeChange = \"中午好！\"; else if (date.getHours() >= 13 && date.getHours() < 15) timeChange = \"下午好！\"; else if (date.getHours() >= 15 && date.getHours() < 16) timeChange = \"下午好！\"; else if (date.getHours() >= 16 && date.getHours() < 19) timeChange = \"黄昏啦！\"; else if (date.getHours() >= 19 && date.getHours() < 24) timeChange = \"晚上好！\"; else timeChange = \"夜深了，早点休息，少熬夜。\"; try { //自定义文本和需要放的位置 document.getElementById(\"welcome-info\").innerHTML = `🎉 欢迎信息 🎉&emsp;&emsp;欢迎来自 ${pos} 的小伙伴，${timeChange}您现在距离站长约 ${dist} 公里， ${posdesc}`; } catch (err) { // console.log(\"Pjax无法获取#welcome-info元素🙄🙄🙄\") } } window.onload = showWelcome; // 如果使用了pjax在加上下面这行代码 document.addEventListener('pjax:complete', showWelcome);"},{"title":"ChatGPT基本概念","path":"/wiki/ChatGPT/1ChatGPT基本概念.html","content":"ChatGPT 是什么ChatGPT 是由 OpenAI 开发的一款先进的对话人工智能产品。OPENAI 官网 “ChatGPT”结合了“Chat”（聊天）和“GPT”（Generative Pre-trained Transformer）两个词汇。它是基于生成式预训练语言模型的人工智能，使用先进的 Transformer 架构处理自然语言处理（NLP）任务。这项技术的核心在于利用深度学习算法生成人类般的自然语言响应，特别在生成连贯、上下文相关的对话方面表现卓越。 ❓ 为什么多次提问相同问题 ChatGPT 会回复不同答案？这是因为神经网络的发散性。ChatGPT 的独特之处在于其深度神经网络结构，其中包含数百亿甚至上千亿的参数。为了增加发散性，每次处理同一问题时，可能会激活不同的神经网络路径，从而产生不同的答案。这种特性使得 ChatGPT 在回答问题时既有创造性，又富有人性化，有时甚至会显得有些“胡说八道”，使其看起来更像一个真实的人类。 ChatGPT 的优势与挑战✅【优势】 大尺寸模型：经过大量数据训练，ChatGPT 能够生成高度准确和流畅的响应。 类人响应：生成的响应与人类的知识水平和理解能力相似，适用于各种文本生成任务。 适应性：能够根据不同情况和上下文生成适当的回答。 多功能性：适用于各种自然语言处理任务，可应用于广泛领域。 ☔【挑战】 对训练数据的依赖：响应质量取决于训练数据的质量和多样性。 有限的理解能力：尽管响应准确流畅，但 ChatGPT 并不具备深刻的世界理解或类似人类的推理能力。 潜在偏见问题：训练数据的偏见可能会导致模型响应中出现偏见。 ChatGPT 发展史里程碑从 2015 年 OpenAI 的成立到现在，ChatGPT 的背后是一系列突破性的里程碑：2015 年：OpenAI 在美国成立，由 Sam Altman 和 Elon Musk 联合创立。2016 年：推出了 OpenAI Gym 和 Universe，致力于学习强化算法。2018 年：发布了 GPT，这是第一代拥有 1.17 亿参数的通用 NLP 模型。2019 年：微软投资 10 亿美元，发布了含 15 亿参数的 GPT-2。2020 年：发布 GPT-3，含 1750 亿参数，微软获得独家授权。2021 年：推出了 CLIP 和 DALL·E，分别用于匹配图像和文本、文字生成图像。2022 年：发布 DALL·E 2，推出基于 GPT-3.5 的 ChatGPT。2023 年：ChatGPT 全面普及，微软宣布对 OpenAI 的进一步投资。 ChatGPT 持续创造历史记录： 上线仅 5 天，ChatGPT 已经拥有超过 100 万用户 推出仅两个月，截至 2023 年 1 月末，月活用户已经突破了 1 亿 以其他的非常受欢迎的消费级应用数据参考：TikTok 达到 1 亿用户用了 9 个月，Instagram 则花了 2 年半的时间。ChatGPT 也成为了史上用户增长速度最快的消费级应用程序。 商业模式现阶段 AI 应用主要分三类： 感知与交互：包括计算机视觉（如图像识别、面部识别）、语音识别与处理（如语音到文本、语音助手）等。这一类别涉及 AI 对人类感官信息的理解和模拟，包括看、听等。 数据分析与决策支持：涵盖数据分析、机器学习、自然语言处理（NLP）、推荐系统等。这类应用主要围绕从大量数据中提取有价值信息，支持决策制定，如预测分析、个性化推荐等。 自动化与智能控制：包括自动化与机器人技术（如工业自动化、无人驾驶汽车）、智能家居控制等。这一类别关注于使用 AI 来实现任务的自动化执行和智能控制，减少人工干预。 截至 2023 年底，OpenAI 的主要产品包括： GPT 系列（Generative Pre-trained Transformer）：包括 GPT-3 和 GPT-4 等，用于自然语言处理，生成文本、回答问题等。 DALL-E：一个能够根据文本描述生成图像的 AI 模型。 Codex：专门用于编程的 AI 模型，支持编写和理解代码，是 GitHub Copilot 的核心技术。 ChatGPT：基于 GPT-3 和 GPT-4 的对话系统，用于生成连贯、有意义的对话。 OpenAI API：提供对 GPT-3、Codex 等模型的编程接口，允许开发者将这些模型集成到自己的应用程序中。 CLIP：一个多模态 AI 模型，能够理解图像和相关的文本描述。 GPT-4 Turbo：提供截至 2023 年 4 月的上下文信息的最新 AI 模型。 Assistants API：新推出的 API，可能是为了更好地支持开发者使用 OpenAI 的技术。 GPT-4 Turbo with Vision：结合了视觉处理能力的产品，提供更加丰富的多模态 AI 体验。 ChatGPT 的原理解释几个小概念 NLP: Natural Language Processing 自然语言处理：计算机科学、人工智能和语言学的交叉领域，旨在使计算机能够理解和处理人类语言。 NLP 是 ChatGPT 的基础，提供了理解和生成自然语言的能力。 NLP 技术使 ChatGPT 能够解析用户输入的文本，理解其语义和情感，并生成合适的回应。 RLHF: Reinforcement Learning from Human Feedback 强化学习自人类反馈：一种结合了强化学习和人类反馈的训练方法，用于优化模型的性能。 RLHF 是 ChatGPT 训练过程中的一个关键步骤。 通过 RLHF，ChatGPT 接收到人类评估者对其回答的反馈，这些反馈用于指导模型的学习过程，优化其回答质量。 RL: Reinforcement Learning 强化学习：一种机器学习方法，模型通过与环境的交互来学习如何达成目标。 RL 是 RLHF 的一部分，用于优化 ChatGPT 的性能。 在 RL 过程中，ChatGPT 通过试错学习，根据从人类反馈中获得的奖励来调整其行为。 BERT: Bidirectional Encoder Representations from Transformers 双向编码器表示变换器：一种预训练的深度学习模型，用于 NLP 的各种任务，特别擅长理解语言的上下文。 BERT 是 NLP 领域的一个重要模型，虽然 ChatGPT 基于 GPT-3，但 BERT 的技术（如双向语境理解）对 NLP 领域有广泛影响。 BERT 通过预训练和微调来理解语言的上下文，这种技术对于提高语言模型的理解能力很有价值。 GPT-3: Generative Pre-trained Transformer 3 第三代生成预训练变换器：一个大规模的语言处理模型，用于生成文本和理解复杂的语言任务。 ChatGPT 直接基于 GPT-3 模型。 GPT-3 是一个大规模的语言生成模型，通过预训练和可能的微调，它能够生成连贯、相关且通常情境合适的文本。 Transformer 架构： 这是一种专门为处理序列数据（如文本）设计的神经网络结构。 GPT-3 使用了 Transformer 架构，这是一种专门为处理序列数据（如文本）设计的神经网络结构。 将 Transformer 想象为一个高效的工厂流水线，它能够同时处理文本中的每个部分（单词或字符），并通过“自注意力机制”（Self-Attention Mechanism）理解这些部分之间的关系。 ChatGPT 技术原理 ChatGPT 结合了 GPT-3 的强大语言模型、Transformer 的高效处理能力、以及 RLHF 的优化策略，形成了一个能够理解和生成自然语言的复杂系统。这个系统通过不断学习和适应，能够在各种对话场景中提供高质量的交互体验。 基于 GPT-3 的架构：ChatGPT 基于 OpenAI 的 GPT-3 模型，这是一个大规模的自然语言处理模型。想象一个巨大的神经网络，由数以亿计的参数构成。这个网络通过吸收大量的文本数据（如书籍、文章、网站内容）来学习语言的模式。 Transformer 架构：GPT-3 使用了 Transformer 架构，这是一种专门为处理序列数据（如文本）设计的神经网络结构。将 Transformer 想象为一个高效的工厂流水线，它能够同时处理文本中的每个部分（单词或字符），并通过“自注意力机制”理解这些部分之间的关系。 预训练和微调：GPT-3 在大量文本上进行预训练，学习语言的基本规则和结构。为特定任务（如聊天）对模型进行微调，使其更适应该任务的需求。 强化学习自人类反馈（RLHF）：ChatGPT 通过 RLHF 方法进一步优化。这涉及到从人类评估者那里获取反馈，并用这些反馈来指导模型的学习。想象一个场景，其中 ChatGPT 产生的回答被人类评估，并根据其质量给予奖励或惩罚。这些反馈帮助模型调整其回答策略，以生成更准确、更自然的回答。 自然语言理解和生成：ChatGPT 能够理解用户的查询和语境。基于理解的内容，模型生成连贯、相关且通常情境合适的回答。 简单说 ChatGPT 就是通过人类的反馈和奖励，不断修正自身的错误信息，使得生成的结果越来越准确。 Prompt 是什么Prompt 和 Prompt Engineering Prompt 是给 AI 模型的指令，它可以是一个问题、一段文字描述，甚至可以是带有一堆参数的文字描述。AI 模型会基于 prompt 所提供的信息，生成对应的文本，亦或者图片。 比如，我们在 ChatGPT 里输入”什么是 chatgpt”？，这个问题就是 prompt。 目前的 AI 产品还比较早期，因为各种原因，产品设置了很多限制，如果你想要绕过一些限制，或者更好地发挥 AI 的能力，也需要用到 Prompt Engineering 技术。 Prompt 基本原则Prompt 没有固定且标准的公式，但如果想充分利用人工智能，可以按照四个维度调教优化。 🏳️‍🌈调教模板：角色扮演（Role）+ 背景（Context） +指令&#x2F;任务（Instruction）+ 要求（Demand） 案例 1：健康饮食计划 角色扮演（Role）：你是一名营养师 背景（Context）：客户希望改善饮食习惯，减轻体重 任务（Instruction）：制定一周的饮食计划 要求（Demand）：考虑到低热量、高蛋白的饮食需求 案例 2：旅游规划 角色扮演（Role）：你是一名旅行顾问 背景（Context）：客户计划前往日本旅游，对历史和文化感兴趣 任务（Instruction）：访问京都的传统神社和寺庙，提供为期一周的日本旅游行程建议 要求（Demand）：包括文化体验、住宿和交通安排 案例 3：英语翻译 角色扮演（Role）：你是英语翻译，拼写校对和润色改进翻译的角色。 背景（Context）：我会用任何语言和你交流，你会识别我的语言，将其翻译且用更为优美和精炼的英语回答我。 任务（Instruction）：将我简单的词汇和句子替换成更为优美和高雅的表达方式，确保意思不变，但使其更具文学性。 要求（Demand）：仅回答更正和改进的部分，不要写解释。我的第一句话是“how are you ?”，请翻译它。 如果希望系统性地学习 ChatGPT 所有相关的知识，请关注阅读下一节."},{"title":"ChatGPT原理解读","path":"/wiki/ChatGPT/2ChatGPT原理详细解读.html","content":"ChatGPT 虽然近期才广受关注，但其背后的对话式人工智能技术其实已经经历了数十年的发展。从早期的 Lunar 等系统开始，这个领域就在不断进化。然而，尽管投入了大量研究，对话式 AI 始终是 AI 技术中最棘手的部分之一。这主要因为两个难点：一是自然语言的天生不精确性，二是人类对话的强烈依赖于上下文。这也是为什么以前的智能音箱常被戏称为“人工智障”。 ChatGPT 的技术突破GPT 技术简介ChatGPT 所依赖的核心技术是 Generative Pre-trained Transformer（GPT）。GPT 系列模型，自 2018 年由 OpenAI 推出以来，经历了从 GPT1 到 GPT4 的发展。尤其是 GPT3，其巨大的训练数据量带来了爆炸性的能力提升，标志着对话 AI 的一个重要转折点。 GPT 系列的演进 GPT1: 作为初始尝试，GPT1 展示了使用 Transformer 架构处理自然语言的潜力，但在更复杂的语言理解任务上仍有限制。 GPT2: 提升了模型的大小和训练数据量，展现出更好的语言生成能力，但在理解深层次语义方面仍有挑战。 GPT3: 这一代实现了重大突破，特别是在训练数据量的大幅增加，使得模型能够理解和生成前所未有的复杂文本。 GPT4: 目前最先进的版本，不仅在规模上有所增加，而且在理解复杂语义、上下文关系方面更为准确。 GPT 技术原理简析基本原理：一词一世界GPT 模型的工作原理可以用“每次算一个词出来”来简单概括。这个过程中，ChatGPT 不断对已有的文本进行“合理延续”。假设你输入：“今天天气”，GPT 会基于此前训练的数据预测出接下来最可能的词汇，比如“晴朗”或“多云”。 概率计算：智能选词的背后GPT 在确定每个新词时，依赖于一个复杂的概率模型。这不仅仅是统计某个词在特定上下文中出现的频率，而是通过神经网络综合评估并预测下一个词。例如，给定“我今天很开心，因为”，模型可能会预测“我”“通过了考试”或“见到了朋友”。 神经网络：大脑的简化模拟神经网络是 ChatGPT 的核心组成部分，它模仿人脑的工作方式。在神经网络中，每个“神经元”接收前一个神经元的信号，经过处理后再传递给下一个神经元。在经过大量的训练后，这个网络能够有效地预测接下来最可能的单词。 ✅ 考虑一个简单的例子：当模型被问到“猫是什么？”时，它可能从之前的学习中知道猫是一种动物，有着柔软的毛发、尖耳朵和长尾巴。它会结合这些特征生成回答，如“猫是一种通常有着尖耳朵和长尾巴的小型家养动物，以捕鼠而闻名。” 通过对 GPT 系列模型的不断进化和精细化训练，ChatGPT 不仅能够回答简单问题，还能够生成有深度、有逻辑的文本。它在理解复杂语义、上下文关系方面的准确性不断提高，为用户提供更加丰富和智能的互动体验。 神经网络与训练神经网络模仿人类大脑的工作机制。在 ChatGPT 的神经网络中，每个神经元接收来自前一个神经元的信号，处理后再传递给下一个。这可以用函数y = f(wx + b)来表示，其中w和b分别代表权重和偏置，f是激活函数，控制神经元的激活与否。 GPT 的训练包括无监督学习和监督学习。无监督学习阶段，GPT 从大量文本中学习；监督学习阶段，通过人工标注的数据进行微调，提高模型的精确度和实用性。 无监督学习（预训练）在此阶段，GPT 模型像一个吸收知识的海绵，从互联网、书籍等来源中学习语言的模式和结构。这类似于孩子通过听大人说话学习语言。 监督学习（微调）在预训练之后，模型进入微调阶段。这时，模型的输出会被人类评估者校对和打分，指导模型产生更加准确和自然的回答。比如，如果模型在描述天气时生成了不准确的信息，校对者会进行纠正，模型据此学习，以便未来生成更准确的天气描述。 优化公式一个简化的训练过程可以表示为：loss = Σ(真实输出 - 预测输出)^2。训练的目标是通过调整权重w和偏置b来最小化损失函数loss。 从 Lunar 到 ChatGPT，对话 AI 的道路虽然曲折，但每一步的进展都为我们揭示了人工智能未来无限的可能。随着技术的不断发展和优化，ChatGPT 及其后续版本预计将在各种实际应用场景中发挥更大的作用，从而极大地丰富人类的交流和认知世界的方式。"},{"title":"CSS3基础","path":"/wiki/FrontEnd/CSS3.html","content":"一、CSS3 简介1.CSS3 概述 CSS3 是CSS2 的升级版本，它在CSS2 的基础上，新增了很多强大的新功能，从而解决一些实际 面临的问题。 CSS3 在未来会按照模块化的方式去发展： https://www.w3.org/Style/CSS/current-work.html CSS3 的新特性如下： 新增了更加实用的选择器，例如：动态伪类选择器、目标伪类选择器、伪元素选择器等等。 新增了更好的视觉效果，例如：圆角、阴影、渐变等。 新增了丰富的背景效果，例如：支持多个背景图片，同时新增了若干个背景相关的属性。 新增了全新的布局方案 —— 弹性盒子。 新增了Web 字体，可以显示用户电脑上没有安装的字体。 增强了颜色，例如： HSL 、HSLA 、RGBA 几种新的颜色模式，新增 opacity 属性来控制透明度。 增加了2D 和3D 变换，例如：旋转、扭曲、缩放、位移等。 增加动画与过渡效果，让效果的变换更具流线性、平滑性。 2.CSS3私有前缀2.1 什么是私有前缀如下代码中的-webkit- 就是私有前缀 12345div &#123; width:400px; height:400px; -webkit-border-radius: 20px;&#125; 2.2 为什么要有私有前缀W3C 标准所提出的某个CSS 特性，在被浏览器正式支持之前，浏览器厂商会根据浏览器的内核，使用私有前缀来测试该CSS 特性，在浏览器正式支持该CSS 特性后，就不需要私有前缀了。举个例子： 12345-webkit-border-radius: 20px;-moz-border-radius: 20px;-ms-border-radius: 20px;-o-border-radius: 20px;border-radius: 20px; 查询CSS3 兼容性的网站： https://caniuse.com/ 2.3 常见浏览器私有前缀 Chrome 浏览器： -webkit- Safari 浏览器： -webkit- Firefox 浏览器： -moz- Edge 浏览器： -webkit- 旧 Opera 浏览器： -o- 旧 IE 浏览器： -ms- 注意：我们在编码时，不用过于关注浏览器私有前缀，不用绞尽脑汁的去记忆，也不用每个都去查询，因为常用的CSS3 新特性，主流浏览器都是支持的，即便是为了老浏览器而加前缀，我们也可以借助现代的构建工具，去帮我们添加私有前缀。 二、CSS3 基本语法1.CSS3 新增长度单位 rem 根元素字体大小的倍数，只与根元素字体大小有关。 vw 视口宽度的百分之多少 10vw 就是视口宽度的10% 。 vh 视口高度的百分之多少 10vh 就是视口高度的10% 。 vmax 视口宽高中大的那个的百分之多少。（了解即可） vmin 视口宽高中小的那个的百分之多少。（了解即可） 2.CSS3 新增颜色设置方式CSS3 新增了三种颜色设置方式，分别是： rgba 、hsl 、hsla ，由于之前已经详细讲解，此处略过。 3.CSS3 新增选择器CSS3 新增的选择器有：动态伪类、目标伪类、语言伪类、UI 伪类、结构伪类、否定伪类、伪元素；这些在CSS2 中已经详细讲解，此处略过。 4.CSS3 新增盒模型相关属性4.1. box-sizing 怪异盒模型使用box-sizing 属性可以设置盒模型的两种类型：向内，不改变盒子总大小 4.2. resize 调整盒子大小使用resize 属性可以控制是否允许用户调节元素尺寸。（需添加overflow:hidden,auto等属性) 4.3. box-shadow 盒子阴影使用 box-shadow 属性为盒子添加阴影。语法： 1box-shadow: h-shadow v-shadow blur spread color inset; 各个值的含义： 默认值： box-shadow:none 表示没有阴影示例： 1234567891011121314151617/* 写两个值，含义：水平位置、垂直位置 */box-shadow: 10px 10px;/* 写三个值，含义：水平位置、垂直位置、颜色 */box-shadow: 10px 10px red;/* 写三个值，含义：水平位置、垂直位置、模糊值 */box-shadow: 10px 10px 10px;/* 写四个值，含义：水平位置、垂直位置、模糊值、颜色 */box-shadow: 10px 10px 10px red;/* 写五个值，含义：水平位置、垂直位置、模糊值、外延值、颜色 */box-shadow: 10px 10px 10px 10px blue;/* 写六个值，含义：水平位置、垂直位置、模糊值、外延值、颜色、内阴影 */box-shadow: 10px 10px 20px 3px blue inset; 4.4. opacity 不透明度opacity 属性能为整个元素添加透明效果， 值是 0 到 1 之间的小数， 0 是完全透明， 1 表示完全不透明。 opacity 与 rgba 的区别？opacity 是一个属性，设置的是整个元素（包括元素里的内容）的不透明度。rgba 是颜色的设置方式，用于设置颜色，它的透明度，仅仅是调整颜色的透明度。 5.CSS3 新增背景属性5.1. background-origin作用：设置背景图的原点。语法 padding-box ：从padding 区域开始显示背景图像。—— 默认值 border-box ： 从border 区域开始显示背景图像。 content-box ： 从content 区域开始显示背景图像。 5.2. background-clip作用：设置背景图的向外裁剪的区域。语法 border-box ： 从border 区域开始向外裁剪背景。 —— 默认值 padding-box ： 从padding 区域开始向外裁剪背景。 content-box ： 从content 区域开始向外裁剪背景。 text ：背景图只呈现在文字上。注意：若值为text ，那么backgroun-clip 要加上-webkit- 前缀。 5.3. background-size作用：设置背景图的尺寸。语法： 用长度值指定背景图片大小，不允许负值。background-size: 300px 200px; 用百分比指定背景图片大小，不允许负值。background-size: 100% 100%; auto ： 背景图片的真实大小。 —— 默认值 contain ： 将背景图片等比缩放，使背景图片的宽或高，与容器的宽或高相等，再将完整背景图片包含在容器内，但要注意：可能会造成容器里部分区域没有背景图片。background-size: contain; cover ：将背景图片等比缩放，直到完全覆盖容器，图片会尽可能全的显示在元素上，但要注意：背景图片有可能显示不完整。—— 相对比较好的选择background-size: cover; 5.4. backgorund 复合属性语法：background: color url repeat position / size origin clip 注意： origin 和 clip 的值如果一样，如果只写一个值，则origin 和 clip 都设置；如果设置了两个值，前面的是origin ，后面的clip 。 size 的值必须写在 position 值的后面，并且用 &#x2F; 分开。 5.5. 多背景图CSS3 允许元素设置多个背景图片 12345/* 添加多个背景图 */background: url(../images/bg-lt.png) no-repeat, url(../images/bg-rt.png) no-repeat right top, url(../images/bg-lb.png) no-repeat left bottom, url(../images/bg-rb.png) no-repeat right bottom; 6. CSS3新增边框属性6.1 边框圆角在 CSS3 中，使用border-radius 属性可以将盒子变为圆角。同时设置四个角的圆角：border-radius:10px; 6.2 边框外轮廓（了解） outline-width ：外轮廓的宽度。 outline-color ：外轮廓的颜色。 outline-style ：外轮廓的风格。 none ： 无轮廓 dotted ： 点状轮廓 dashed ： 虚线轮廓 solid ： 实线轮廓 double ： 双线轮廓 outline-offset 设置外轮廓与边框的距离，正负值都可以设置。 注意： outline-offset 不是outline 的子属性，是一个独立的属性。 outline 复合属性outline:50px solid blue; 7. CSS3新增文本属性7.1 文本阴影在 CSS3 中，我们可以使用 text-shadow 属性给文本添加阴影。语法：text-shadow: h-shadow v-shadow blur color; 7.2 文本换行在 CSS3 中，我们可以使用 white-space 属性设置文本换行方式。常用值如下： 7.3 文本溢出在 CSS3 中，我们可以使用 text-overflow 属性设置文本内容溢出时的呈现模式。常用值如下： 7.4 文本修饰CSS3 升级了text-decoration 属性，让其变成了复合属性。 1text-decoration: text-decoration-line || text-decoration-style || text-decorationcolor 子属性及其含义： text-decoration-line 设置文本装饰线的位置 none ： 指定文字无装饰 （默认值） underline ： 指定文字的装饰是下划线 overline ： 指定文字的装饰是上划线 line-through ： 指定文字的装饰是贯穿线 text-decoration-style 文本装饰线条的形状 solid ： 实线 （默认） double ： 双线 dotted ： 点状线条 dashed ： 虚线 wavy ： 波浪线 text-decoration-color 文本装饰线条的颜色 7.5 文本描边注意：文字描边功能仅 webkit 内核浏览器支持。 -webkit-text-stroke-width ：设置文字描边的宽度，写长度值。 -webkit-text-stroke-color ：设置文字描边的颜色，写颜色值。 -webkit-text-stroke ：复合属性，设置文字描边宽度和颜色。 8. CSS3 新增渐变8.1 线性渐变多个颜色之间的渐变， 默认从上到下渐变。 1background-image: linear-gradient(red,yellow,green); 使用关键词设置线性渐变的方向。 12background-image: linear-gradient(to top,red,yellow,green);background-image: linear-gradient(to right top,red,yellow,green); 使用角度设置线性渐变的方向。 1background-image: linear-gradient(30deg,red,yellow,green); 调整开始渐变的位置。 1background-image: linear-gradient(red 50px,yellow 100px ,green 150px); 8.2 径向渐变多个颜色之间的渐变， 默认从圆心四散。（注意：不一定是正圆，要看容器本身宽高比） 1background-image: radial-gradient(red,yellow,green); 使用关键词调整渐变圆的圆心位置。 1background-image: radial-gradient(at right top,red,yellow,green); 使用像素值调整渐变圆的圆心位置。 1background-image: radial-gradient(at 100px 50px,red,yellow,green); 调整渐变形状为正圆 。 1background-image: radial-gradient(circle,red,yellow,green); 调整形状的半径 。 12background-image: radial-gradient(100px,red,yellow,green);background-image: radial-gradient(50px 100px,red,yellow,green); 调整开始渐变的位置。 1background-image: radial-gradient(red 50px,yellow 100px,green 150px); 8.3 重复渐变无论线性渐变，还是径向渐变，在没有发生渐变的位置，继续进行渐变，就为重复渐变。 使用repeating-linear-gradient 进行重复线性渐变，具体参数同linear-gradient 。 使用repeating-radial-gradient 进行重复径向渐变，具体参数同radial-gradient 。 我们可以利用渐变，做出很多有意思的效果：例如：横格纸、立体球等等。 9. 伸缩盒模型1.伸缩盒模型简介 2009 年， W3C 提出了一种新的盒子模型 —— Flexible Box （伸缩盒模型，又称：弹性盒子）。 它可以轻松的控制：元素分布方式、元素对齐方式、元素视觉顺序 ……. 截止目前，除了在部分IE 浏览器不支持，其他浏览器均已全部支持。 伸缩盒模型的出现，逐渐演变出了一套新的布局方案 —— flex 布局。 小贴士： 传统布局是指：基于传统盒状模型，主要靠： display 属性 + position 属性 + float属性。 flex 布局目前在移动端应用比较广泛，因为传统布局不能很好的呈现在移动设备上。 2.伸缩容器、伸缩项目伸缩容器： 开启了 flex 的元素，就是：伸缩容器。 给元素设置： display:flex 或 display:inline-flex ，该元素就变为了伸缩容器。 display:inline-flex 很少使用，因为可以给多个伸缩容器的父容器，也设置为伸缩容器。 一个元素可以同时是：伸缩容器、伸缩项目。 伸缩项目：伸缩容器所有子元素自动成为了：伸缩项目。 仅伸缩容器的子元素成为了伸缩项目，孙子元素、重孙子元素等后代，不是伸缩项目。 无论原来是哪种元素（块、行内块、行内），一旦成为了伸缩项目，全都会“块状化”。 3.主轴与侧轴 主轴： 伸缩项目沿着主轴排列，主轴默认是水平的，默认方向是：从左到右（左边是起点，右边是终点）。 侧轴： 与主轴垂直的就是侧轴，侧轴默认是垂直的，默认方向是：从上到下（上边是起点，下边是终点）。 4.主轴方向属性名： flex-direction常用值如下： row ：主轴方向水平从左到右 —— 默认值 row-reverse ：主轴方向水平从右到左。 column ：主轴方向垂直从上到下。 column-reverse ：主轴方向垂直从下到上。 注意：改变了主轴的方向，侧轴方向也随之改变。 5.主轴换行方式属性名： flex-wrap常用值如下： nowrap ：默认值，不换行。 wrap ：自动换行，伸缩容器不够自动换行。 wrap-reverse ：反向换行。 6.flex-flowflex-flow 是一个复合属性，复合了 flex-direction 和 flex-wrap 两个属性。 值没有顺序要求。flex-flow: row wrap; 7.主轴对齐方式属性名： justify-content常用值如下： flex-start ：主轴起点对齐。—— 默认值 flex-end ：主轴终点对齐。 center ：居中对齐 space-between ：均匀分布，两端对齐（最常用）。 space-around ：均匀分布，两端距离是中间距离的一半。 space-evenly ：均匀分布，两端距离与中间距离一致。 8.侧轴对齐方式8.1 一行的情况所需属性： align-items常用值如下： flex-start ：侧轴的起点对齐。 flex-end ：侧轴的终点对齐。 center ：侧轴的中点对齐。 baseline : 伸缩项目的第一行文字的基线对齐。 stretch ：如果伸缩项目未设置高度，将占满整个容器的高度。—— （默认值） 8.2 多行的情况所需属性： align-content常用值如下： flex-start ：与侧轴的起点对齐。 flex-end ：与侧轴的终点对齐。 center ：与侧轴的中点对齐。 space-between ：与侧轴两端对齐，中间平均分布。 space-around ：伸缩项目间的距离相等，比距边缘大一倍。 space-evenly : 在侧轴上完全平分。 stretch ：占满整个侧轴。—— 默认值 9.flex 实现水平垂直居中方法一：父容器开启flex 布局，随后使用justify-content 和align-items 实现水平垂直居中 12345678910111213.outer &#123; width: 400px; height: 400px; background-color: #888; display: flex; justify-content: center; align-items: center;&#125;.inner &#123; width: 100px; height: 100px; background-color: orange;&#125; 方法二：父容器开启flex 布局，随后子元素margin: auto 123456789101112.outer &#123; width: 400px; height: 400px; background-color: #888; display: flex;&#125;.inner &#123; width: 100px; height: 100px; background-color: orange; margin: auto;&#125; 10.伸缩性 flex-basis概念： flex-basis 设置的是主轴方向的基准长度，会让宽度或高度失效。备注：主轴横向：宽度失效；主轴纵向：高度失效作用：浏览器根据这个属性设置的值，计算主轴上是否有多余空间，默认值auto ，即：伸缩项目的宽或高。 flex-grow（伸）概念： flex-grow 定义伸缩项目的放大比例，默认为0 ，即：纵使主轴存在剩余空间，也不拉伸（放大）。规则： 若所有伸缩项目的 flex-grow 值都为1 ，则：它们将等分剩余空间（如果有空间的话）。 若三个伸缩项目的flex-grow 值分别为： 1 、2 、3 ，则：分别瓜分到： 1&#x2F;6 、2&#x2F;6 、3&#x2F;6 的空间。 flex-shrink（缩）概念： flex-shrink 定义了项目的压缩比例，默认为1 ，即：如果空间不足，该项目将会缩小。收缩项目的计算，略微复杂一点，我们拿一个场景举例： 例如：三个收缩项目，宽度分别为： 200px 、300px 、200px ，它们的flex-shrink 值分别为： 1 、2 、3若想刚好容纳下三个项目，需要总宽度为700px ，但目前容器只有400px ，还差300px所以每个人都要收缩一下才可以放下，具体收缩的值，这样计算： 计算分母： (200×1) + (300×2) + (200×3) &#x3D; 1400 计算比例： 项目一： (200×1) &#x2F; 1400 &#x3D; 比例值1 项目二： (300×2) &#x2F; 1400 &#x3D; 比例值2 项目三： (200×3) &#x2F; 1400 &#x3D; 比例值3 计算最终收缩大小： 项目一需要收缩： 比例值1 × 300 项目二需要收缩： 比例值2 × 300 项目三需要收缩： 比例值3 × 300 11.flex复合属性flex 是复合属性，复合了： flex-grow 、 flex-shrink 、flex-basis 三个属性，默认值为 0 1auto 。 如果写 flex:1 1 auto ，则可简写为： flex:auto 如果写 flex:1 1 0 ，则可简写为： flex:1 如果写 flex:0 0 auto ，则可简写为： flex:none 如果写 flex:0 1 auto ，则可简写为： flex:0 auto —— 即 flex 初始值。 12.项目排序order 属性定义项目的排列顺序。数值越小，排列越靠前，默认为0 。 13.单独对齐通过align-self 属性，可以单独调整某个伸缩项目的对齐方式默认值为 auto ，表示继承父元素的 align-items 属性 10.BFC1.什么是BFCW3C 上对 BFC 的定义： 原文：Floats, absolutely positioned elements, block containers (such as inline-blocks, tablecells,and table-captions) that are not block boxes, and block boxes with ‘overflow’ other than‘visible’ (except when that value has been propagated to the viewport) establish new blockformatting contexts for their contents.译文：浮动、绝对定位元素、不是块盒子的块容器（如inline-blocks 、table-cells 和table-captions ），以及overflow 属性的值除visible 以外的块盒，将为其内容建立新的块格式化上下文。 MDN 上对 BFC 的描述： 块格式化上下文（Block Formatting Context，BFC） 是Web 页面的可视CSS 渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。 更加通俗的描述： BFC 是 Block Formatting Context （块级格式上下文），可以理解成元素的一个“特异功能”。 该 “特异功能”，在默认的情况下处于关闭状态；当元素满足了某些条件后，该“特异功能”被激活。 所谓激活“特异功能”，专业点说就是：该元素创建了 BFC （又称：开启了 BFC ）。 2.开启了BFC能解决什么问题 元素开启BFC 后，其子元素不会再产生margin 塌陷问题。 元素开启BFC 后，自己不会被其他浮动元素所覆盖。 元素开启BFC 后，就算其子元素浮动，元素自身高度也不会塌陷。 3.如何开启BFC 根元素 浮动元素 绝对定位、固定定位的元素 行内块元素 表格单元格： table 、thead 、tbody 、tfoot 、th 、td 、tr 、caption overflow 的值不为 visible 的块元素 伸缩项目 多列容器 column-span 为 all 的元素（即使该元素没有包裹在多列容器中） display 的值，设置为flow-root 接下来的学习路径"},{"title":"CSS2基础","path":"/wiki/FrontEnd/CSS2.html","content":"一、CSS基础1.CSS简介CSS 的全称为：层叠样式表 ( Cascading Style Sheets ) 。CSS 也是一种标记语言，用于给 HTML 结构设置样式，例如：文字大小、颜色、元素宽高等等。 简单理解： CSS 可以美化 HTML , 让 HTML 更漂亮。核心思想： HTML 搭建结构， CSS 添加样式，实现了：结构与样式的分离。 2.CSS的编写位置2.1 行内样式写在标签的 &lt;style&gt;属性中，（又称：内联样式）。 语法：&lt;h1 style=&quot;color:red;font-size:60px;&quot;&gt;苏末了&lt;/h1&gt; 注意： style 属性的值不能随便写，写要符合 CSS 语法规范，是 名:值; 键值对的形式。 行内样式表，只能控制当前标签的样式，对其他标签无效。 问题：书写繁琐、样式不能复用、并且没有体现出：结构与样式分离 的思想，不推荐大量使用，只有对当前元素添加简单样式时，才偶尔使用。 2.2 内部样式写在html 页面内部，将所有的 CSS 代码提取出来，单独放在 &lt;style&gt; 标签中。 语法： 123456&lt;style&gt; h1 &#123; color: red; font-size: 40px; &#125;&lt;/style&gt; 注意： style可以放在html文档的任何地方，一般放head. 此种写法：样式可以复用、代码结构清晰。 问题： 并没有实现：结构与样式完全分离。 多个HTML 页面无法复用样式。 2.3 外部样式写在单独的.css 文件中，随后在 HTML 文件中引入使用。语法： 新建一个扩展名为 .css 的样式文件，把所有CSS 代码都放入此文件中。 1234h1&#123; color: red; font-size: 40px;&#125; 在 HTML 文件中引入 .css 文件。 1&lt;link rel=&quot;stylesheet&quot; href=&quot;./xxx.css&quot;&gt; 注意： 标签要写在 标签中。 标签属性说明： - href ：引入的文档来自于哪里。 - rel ：( relation ：关系）说明引入的文档与当前文档之间的关系。 外部样式的优势：样式可以复用、结构清晰、可触发浏览器的缓存机制，提高访问速 度 ，实现了结构与样式的完全分离。 实际开发中，几乎都使用外部样式，这是最推荐的使用方式！ 3. 样式表的优先级 优先级规则：行内样式 &gt; 内部样式 &#x3D; 外部样式 内部样式、外部样式，这二者的优先级相同，且：后面的 会覆盖 前面的（简记：“后来 者居上”）。 同一个样式表中，优先级也和编写顺序有关，且：后面的 会覆盖 前面的（简记：“后来 者居上”）。 4. CSS语法规范CSS 语法规范由两部分构成： 选择器：找到要添加样式的元素。 声明块：设置具体的样式（声明块是由一个或多个声明组成的），声明的格式为： 属性名: 属性值; 备注1：最后一个声明后的分号理论上能省略，但最好还是写上。备注2：选择器与声明块之间，属性名与属性值之间，均有一个空格，理论上能省略，但最好还是写上。 5.CSS代码风格 展开风格 —— 开发时推荐，便于维护和调试。 1234h1 &#123; color: red; font-size: 40px;&#125; 紧凑风格 —— 项目上线时推荐，可减小文件体积。 1h1&#123;color:red;font-size:40px;&#125; 项目上线时，我们会通过工具将【展开风格】的代码，变成【紧凑风格】，这样可以减小文件体积，节约网络流量，同时也能让用户打开网页时速度更快。 二、CSS选择器1.CSS基本选择器 通配选择器 | * {属性名：属性值} 元素选择器 | 标签名 {属性名：属性值} 类选择器 | .类名 {属性名：属性值} id 选择器 | #id值 {属性名：属性值} 1.1 通配选择器 |*作用：可以选中所有的 HTML 元素。语法： 123* &#123; 属性名: 属性值;&#125; 举例： 12345/* 选中所有元素 */* &#123; color: orange; font-size: 40px;&#125; 1.2 元素选择器 |元素名作用：为页面中 某种元素 统一设置样式。语法： 123标签名 &#123;属性名: 属性值;&#125; 举例： 12345678910/* 选中所有h1元素 */h1 &#123; color: orange; font-size: 40px;&#125;/* 选中所有p元素 */p &#123; color: blue; font-size: 60px;&#125; 备注：元素选择器无法实现差异化设置，例如上面的代码中，所有的p 元素效果都一样。 1.3 类选择器 |.作用：根据元素的class 值，来选中某些元素。class 翻译过来有：种类、类别的含义，所以class 值，又称：类名。语法： 123.类名 &#123;属性名: 属性值;&#125; 举例： 12345678/* 选中所有class值为speak的元素 */.speak &#123;\tcolor: red;\t&#125;/* 选中所有class值为answer的元素 */.answer &#123;\tcolor: blue;&#125; 注意： 元素的class 属性值不带. 点，但CSS 的类选择器要带. 点。 class 值，是我们自定义的，按照标准：不要使用纯数字、不要使用中文、尽量使用 英文与数字的组合，若由多个单词组成，使用- 做连接，例如： left-menu ，且命名 要有意义，做到 “见名知意”。 一个元素不能写多个class 属性，下面是 错误示例： &lt;!-- 该写法错误，元素的属性不能重复，后写的会失效 --&gt; &lt;h1 class=&quot;speak&quot; class=&quot;big&quot;&gt;你好啊&lt;/h1&gt; 错误❌ 一个元素的class 属性，能写多个值，要用空格隔开，例如： &lt;h1 class=&quot;speak big&quot;&gt;你好啊&lt;/h1&gt; 正确✔️ 一个元素属于两个分类可以直接写在同一个class中，空格分开即可。 1.4 ID选择器 |#作用：根据元素的id 属性值，来精准的选中某个元素。语法： 123#id值 &#123;\t属性名: 属性值;&#125; 举例： 12345/* 选中id值为earthy的那个元素 */#earthy &#123; color: red; font-size: 60px;&#125; 注意： id 属性值：尽量由字母、数字、下划线( _ )、短杠( - )组成，最好以字母开头、不要包含空格、区分大小写。 一个元素只能拥有一个id 属性，多个元素的id 属性值不能相同。 一个元素可以同时拥有id 和class 属性。 1.5 基本选择器总结 2. CSS复合选择器CSS选择器整体分类两大类： 一、基本选择器： ①通配选择器②元素选择器③类选择器④ ID 选择器 二、复合选择器： ①交集选择器②并集选择器③后代选择器④子元素选择器 复合选择器建立在基本选择器之上，由多个基础选择器，通过不同的方式组合而成。 复合选择器可以在复杂结构中，快速而准确的选中元素。 2.1 交集选择器作用：选中同时符合多个条件的元素。交集有并且的含义（通俗理解：即……又…… 的意思），例如：年轻且长得帅。语法：选择器1选择器2选择器3…选择器n {}举例： 12345678/* 选中：类名为beauty的p元素，为此种写法用的非常多！！！！ */p.beauty &#123;\tcolor: blue;&#125;/* 选中：类名包含rich和beauty的元素 */.rich.beauty &#123;\tcolor: green;&#125; 注意： 有标签名，标签名必须写在前面。 id 选择器、通配选择器，理论上可以作为交集的条件，但实际应用中几乎不用 —— 因为没有意义。 交集选择器中不可能出现两个元素选择器，因为一个元素，不可能即是p 元素又是span 元素。 用的最多的交集选择器是：元素选择器配合类名选择器，例如： p.beauty 。 2.2 并集选择器作用：选中多个选择器对应的元素，又称：分组选择器。 所谓并集就是或者的含义（通俗理解：要么……要么…… 的意思），例如：给我转10万块钱或者我报警。 语法：选择器1, 选择器2, 选择器3, … 选择器n {} 多个选择器通过, 连接，此处, 的含义就是：或。 12345678/* 选中id为peiqi，或类名为rich，或类名为beauty的元素 */#peiqi,.rich,.beauty &#123; font-size: 40px; background-color: skyblue; width: 200px;&#125; 注意： 并集选择器，我们一般竖着写。 任何形式的选择器，都可以作为并集选择器的一部分 。 并集选择器，通常用于集体声明，可以缩小样式表体积。 2.3 HTML元素间的关系分为：①父元素、②子元素、③祖先元素、④后代元素、⑤兄弟元素。 父元素：直接包裹某个元素的元素，就是该元素的父元素。 子元素：被父元素直接包含的元素（简记：儿子元素）。 祖先元素：父亲的父亲……，一直往外找，都是祖先。 后代元素：儿子的儿子……，一直往里找，都是后代。 兄弟元素：具有相同父元素的元素，互为兄弟元素。 2.4 后代选择器 |空格作用：选中指定元素中，符合要求的后代元素。语法：选择器1 选择器2 选择器3 …… 选择器n {} （先写祖先，再写后代） 选择器之间，用空格隔开，空格可以理解为：” xxx 中的”，其实就是后代的意思。选择器1234….n ，可以是我们之前学的任何一种选择器。 12345678910111213141516171819/* 选中ul中的所有li */ul li &#123;\tcolor: red;&#125;/* 选中ul中所有li中的a */ul li a &#123;\tcolor: orange;&#125;/* 选中类名class为subject元素中的所有li */.subject li &#123;\tcolor: blue;&#125;/* 选中类名为subject元素中的所有类名为front-end的li */.subject li.front-end &#123;\tcolor: blue;&#125; 注意： 后代选择器，最终选择的是后代，不选中祖先。 儿子、孙子、重孙子，都算是后代。 结构一定要符合之前讲的HTML 嵌套要求，例如：不能p 中写h1 ~ h6 。 2.5 子代选择器 |&gt;作用：选中指定元素中，符合要求的子元素（儿子元素）。（先写父，再写子）语法：选择器1 &gt; 选择器2 &gt; 选择器3 &gt; …… 选择器n {} 选择器之间，用&gt; 隔开， &gt; 可以理解为：” xxx 的子代”，其实就是儿子的意思。选择器1234….n ，可以是我们之前学的任何一种选择器。 举例： 123456789/* div中的子代a元素 */div&gt;a &#123;\tcolor: red;&#125;/* 类名为persons的元素中的子代a元素 */.persons&gt;a&#123;\tcolor: red;&#125; 注意： 子代选择器，最终选择的是子代，不是父级。 子、孙子、重孙子、重重孙子 …… 统称后代！，子就是指儿子。 2.6 兄弟选择器 |+ &#x2F; ~ 相邻兄弟选择器： 作用：选中指定元素后，符合条件的相邻兄弟元素。 语法： 选择器1+选择器2 {} 。 示例： 1234/* 选中div后相邻的兄弟p元素 */div+p &#123;\tcolor:red;&#125; 通用兄弟选择器： 作用：选中指定元素后，符合条件的所有兄弟元素。（简记：睡在我下铺的所有兄弟） 语法： 选择器1~选择器2 {} 。 实例: 1234/* 选中div后的所有的兄弟p元素 */div~p &#123;\tcolor:red;&#125; 注意：两种兄弟选择器，选择的是下面的兄弟。 2.7 属性选择器 |[]作用：选中属性值符合一定要求的元素。语法： [属性名] 选中具有某个属性的元素。 [属性名&#x3D;”值”] 选中包含某个属性，且属性值等于指定值的元素。 [属性名^&#x3D;”值”] 选中包含某个属性，且属性值以指定的值开头的元素。 [属性名**$&#x3D;”值”] 选中包含某个属性，且属性值以指定的值结尾**的元素。 [属性名*****&#x3D;“值”] 选择包含某个属性，属性值包含指定值的元素. 举例： 1234567891011121314/* 选中具有title属性的元素 */div[title]&#123;color:red;&#125;/* 选中title属性值为atguigu的元素 */div[title=&quot;atguigu&quot;]&#123;color:red;&#125;/* 选中title属性值以a开头的元素 */div[title^=&quot;a&quot;]&#123;color:red;&#125;/* 选中title属性值以u结尾的元素 */div[title$=&quot;u&quot;]&#123;color:red;&#125;/* 选中title属性值包含g的元素 */div[title*=&quot;g&quot;]&#123;color:red;&#125; 2.8 伪类选择器 |：作用：选中特殊状态的元素。 如何理解“伪” ? — 虚假的，不是真的。如何理解“伪类”？ — 像类( class )，但不是类，是元素的一种特殊状态。 常用的伪类选择器： 一、动态伪类： :link 超链接未被访问的状态。a:link &#123;color:red;&#125; :visited 超链接访问过的状态。a:visited &#123;color:grey;&#125; :hover 鼠标悬停在元素上的状态。 :active 元素激活的状态。 什么是激活？—— 按下鼠标不松开。注意点：遵循LVHA 的顺序，即： link 、visited 、hover 、active 。 :focus 获取焦点的元素。 表单类元素（输入内容时）才能使用:focus 伪类。当用户：点击元素、触摸元素、或通过键盘的 “ tab ” 键等方式，选择元素时，就是获得焦点。 二、结构伪类常用的： :first-child 所有兄弟元素中的第一个。 div&gt;p:first-child 在div的所有儿子中找，p无用 div p:first-child 在div的所有后代找儿子是第一个的儿子 p:first-child 不管爹，只要儿子第一个是p就行 :last-child 所有兄弟元素中的最后一个。 :nth-child(n) 所有兄弟元素中的第 n 个。 :first-of-type 所有同类型兄弟元素中的第一个。 :last-of-type 所有同类型兄弟元素中的最后一个。 :nth-of-type(n) 所有同类型兄弟元素中的 第n个 。 关于N的取值： 0 或不写：什么都选不中 —— 几乎不用。 n ：选中所有子元素 —— 几乎不用。 1~正无穷的整数 ：选中对应序号的子元素。 2n 或 even ：选中序号为偶数的子元素。 2n+1 或 odd ：选中序号为奇数的子元素。 -n+3 ：选中的是前3 个。 其他不常用： :nth-last-child(n) 所有兄弟元素中的倒数第 n 个。 :nth-last-of-type(n) 所有同类型兄弟元素中的 倒数第n个 。 :only-child 选择没有兄弟的元素（独生子女）。 :only-of-type 选择没有同类型兄弟的元素。 :root 根元素。(html根元素) :empty 内容为空元素（空格也算内容）。 三、否定伪类：​\t:not(选择器) 排除满足括号中条件的元素。 div&gt;p:not(.fail) div&gt;p:not([title^&quot;加油&quot;]) div&gt;p:not(:first-child) 四、UI伪类： :checked 被选中的复选框或单选按钮(颜色背景色无法调整）。input:checked&#123;width:10px&#125; :enable 可用的表单元素（没有 disabled 属性）。 :disabled 不可用的表单元素（有disabled 属性）。 五、目标伪类（了解）​\t:target 选中锚点指向的元素。 六、语言伪类（了解）​\t:lang() 根据指定的语言选择元素（本质是看lang 属性的值）。 2.9 伪元素选择器作用：选中元素中的一些特殊位置。常用伪元素： ::first-letter 选中元素中的第一个文字。 ::first-line 选中元素中的第一行文字。 ::selection 选中被鼠标选中的内容。 ::placeholder 选中输入框的提示文字。 ::before 在元素最开始的位置，创建一个子元素（必须用 content 属性指定内容p::before&#123;content:&quot;￥&quot;&#125; p::after&#123;content:&quot;.00&quot;&#125;）。 ::after 在元素最后的位置，创建一个子元素（必须用 content 属性指定内容）。 3. 选择器的优先级（权重）通过不同的选择器，选中相同的元素 ，并且为相同的样式名设置不同的值时，就发生了样式的冲突。到底应用哪个样式，此时就需要看优先级了。 简单描述：行内样式 &gt; ID选择器 &gt; 类选择器 &gt; 元素选择器 &gt; 通配选择器。 详细描述： 计算方式：每个选择器，都可计算出一组权重，格式为： (a,b,c) a : ID 选择器的个数。 b : 类、伪类、属性 选择器的个数。 c : 元素、伪元素 选择器的个数。 比较规则：按照从左到右的顺序，依次比较大小，当前位胜出后，后面的不再对比。 (1,0,0) &gt; (0,2,2)(1,1,0) &gt; (1,0,3)(1,1,3) &gt; (1,1,2) 特殊规则： 行内样式权重大于所有选择器。 !important 的权重，大于行内样式，大于所有选择器，权重最高！ 三、CSS三大特性1.层叠性概念：如果发生了样式冲突，那就会根据一定的规则（选择器优先级），进行样式的层叠（覆盖）。什么是样式冲突？ ——— 元素的同一个样式名，被设置了不同的值，这就是冲突。 2.继承性概念：元素会自动拥有其父元素、或其祖先元素上所设置的某些样式。规则：优先继承离得近的。常见的可继承属性： text-?? ， font-?? ， line-?? 、color …… 备注：参照MDN 网站，可查询属性是否可被继承。 3.优先级简单聊： !important &gt; 行内样式 &gt; ID选择器 &gt; 类选择器 &gt; 元素选择器 &gt; * &gt; 继承的样式。详细聊：需要计算权重。计算权重时需要注意：并集选择器的每一个部分是分开算的！ 四、CSS常用属性1.像素的概念概念：我们的电脑屏幕是，是由一个一个“小点”组成的，每个“小点”，就是一个像素（px）。规律：像素点越小，呈现的内容就越清晰、越细腻。 2.颜色的表示2.1 颜色名编写方式：直接使用颜色对应的英文单词，编写比较简单，例如：红色：red 2.2 rgb 或 rgba编写方式：使用 红、黄、蓝 这三种光的三原色进行组合。 r 表示 红色 g 表示 绿色 b 表示 蓝色 a 表示 透明度 小规律： 若三种颜色值相同，呈现的是灰色，值越大，灰色越浅。 rgb(0, 0, 0) 是黑色， rgb(255, 255,255) 是白色。 对于rbga 来说，前三位的rgb 形式要保持一致，要么都是0~255 的数字，要么都是百分比。 2.3 HEX 或 HEXAHEX 的原理同与 rgb 一样，依然是通过：红、绿、蓝色 进行组合，只不过要用 6位（分成3组） 来表达，格式为：# rr gg bb 每一位数字的取值范围是： 0 ~ f ，即：（ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c,d, e, f ）所以每一种光的最小值是： 00 ，最大值是： ff 2.4 HSL 或 HSLAHSL 是通过：色相、饱和度、亮度，来表示一个颜色的，格式为： hsl(色相,饱和度,亮度)色相：取值范围是0360 度饱和度：取值范围是0%100% 。（向色相中对应颜色中添加灰色， 0% 全灰， 100% 没有灰）亮度：取值范围是0%~100% 。（ 0% 亮度没了，所以就是黑色。100% 亮度太强，所以就是白色了）HSLA 其实就是在HSL 的基础上，添加了透明度。 3.CSS字体属性3.1 字体大小属性名： font-size作用：控制字体的大小。语法： 123div &#123;\tfont-size:40px&#125; 注意点： Chrome 浏览器支持的最小文字为12px ，默认的文字大小为16px ，并且0px 会自动消失。 不同浏览器默认的字体大小可能不一致，所以最好给一个明确的值，不要用默认大小。 通常以给 body 设置font-size 属性，这样body 中的其他元素就都可以继承了。 3.2 字体族属性名： font-family作用：控制字体类型。语法： 123div &#123;\tfont-family:STCaiyun&quot;,&quot;Microsoft YaHei&quot;,sans-serif&#125; 注意： 使用字体的英文名字兼容性会更好，具体的英文名可以自行查询，或在电脑的设置里去寻找。 如果字体名包含空格，必须使用引号包裹起来。 可以设置多个字体，按照从左到右的顺序逐个查找，找到就用，没有找到就使用后面的，且通常在最后写上serif （衬线字体）或sans-serif （非衬线字体）。 windows 系统中，默认的字体就是微软雅黑。 3.3 字体风格属性名： font-style作用：控制字体是否为斜体。常用值： normal ：正常（默认值） italic ：斜体（使用字体自带的斜体效果） oblique ：斜体（强制倾斜产生的斜体效果） 语法： 123div &#123;\tfont-style:italic&#125; 3.4 字体粗细属性名： font-weight 作用：控制字体的粗细。 常用值： 关键词 lighter ：细 normal ： 正常 bold ：粗 bolder ：很粗 （多数字体不支持） 数值： 100~1000 且无单位，数值越大，字体越粗 （或一样粗，具体得看字体设计时的精确程度）。 100300 等同于lighter ， 400500 等同于normal ， 600 及以上等同于bold 。 语法： 123456div &#123;\tfont-weight: bold;&#125;div &#123;\tfont-weight: 600;&#125; 3.5 字体复合写法属性名： font ，可以把上述字体样式合并成一个属性。作用：将上述所有字体相关的属性复合在一起编写。编写规则： 字体大小、字体族必须都写上。 字体族必须是最后一位、字体大小必须是倒数第二位。 各个属性间用空格隔开。实际开发中更推荐复合写法，但这也不是绝对的，比如只想设置字体大小，那就直接用fontsize属性。 4.CSS文本属性4.1 文本颜色属性名： color作用：控制文字的颜色。可选值： 颜色名 rgb 或rgba HEX 或HEXA （十六进制） HSL 或HSLA开发中常用的是： rgb&#x2F;rgba 或 HEX&#x2F;HEXA （十六进制）。 举例： 123div &#123;\tcolor:rgb(112,45,22)&#125; 4.2 文本间距字母间距： letter-spacing单词间距： word-spacing （通过空格识别词）属性值为像素（ px ），正值让间距增大，负值让间距缩小。 4.3 文本修饰属性名： text-decoration作用：控制文本的各种装饰线。可选值： none ： 无装饰线（常用） underline ：下划线（常用） overline ： 上划线 line-through ： 删除线可搭配如下值使用： dotted ：虚线 wavy ：波浪线 也可以指定颜色举例： 123a &#123;\ttext-decoration: none;&#125; 4.4 文本缩进属性名： text-indent 。作用：控制文本首字母的缩进。属性值： css 中的长度单位，例如： px举例： 123div &#123;\ttext-indent:40px;&#125; 4.5 文本对齐_水平属性名： text-align 。作用：控制文本的水平对齐方式。常用值： left ：左对齐（默认值） right ：右对齐 center ：居中对齐举例： 123div &#123;\ttext-align: center;&#125; 4.6 细说 font-size 由于字体设计原因，文字最终呈现的大小，并不一定与 font-size 的值一致，可能大，也可能小。例如： font-size 设为40px ，最终呈现的文字，可能比 40px 大，也可能比 40px小。 通常情况下，文字相对字体设计框，并不是垂直居中的，通常都靠下 一些。 4.7 行高属性名： line-height作用：控制一行文字的高度。可选值： normal ：由浏览器根据文字大小决定的一个默认值。 像素( px )。 数字：参考自身font-size 的倍数（很常用）。 百分比：参考自身font-size 的百分比。备注：由于字体设计原因，文字在一行中，并不是绝对垂直居中，若一行中都是文字，不会太影响观感。 举例： 12345div &#123; line-height: 60px; line-height: 1.5; line-height: 150%;&#125; 行高注意事项： line-height 过小会怎样？—— 文字产生重叠，且最小值是0 ，不能为负数。 line-height 是可以继承的，且为了能更好的呈现文字，最好写数值。 line-height 和height 是什么关系？ 设置了height ，那么高度就是height 的值。 不设置height 的时候，会根据line-height 计算高度。 应用场景： 对于多行文字：控制行与行之间的距离。 对于单行文字：让height 等于line-height ，可以实现文字垂直居中。 备注：由于字体设计原因，靠上述办法实现的居中，并不是绝对的垂直居中，但如果 一行中都是文字，不会太影响观感。 4.8 文本对齐_垂直 顶部：无需任何属性，在垂直方向上，默认就是顶部对齐。 居中：对于单行文字，让height &#x3D; line-height 即可。 问题：多行文字垂直居中怎么办？—— 后面我们用定位去做。 底部：对于单行文字，目前一个临时的方式： 让line-height &#x3D; ( height × 2 ) - font-size - x 。 备注： x 是根据字体族，动态决定的一个值。 问题：垂直方向上的底部对齐，更好的解决办法是什么？—— 后面我们用定位去做。 4.9 vertical-align属性名： vertical-align 。作用：用于指定同一行元素之间，或 表格单元格 内文字的 垂直对齐方式。常用值： baseline （默认值）：使元素的基线与父元素的基线对齐。 top ：使元素的顶部与其所在行的顶部对齐。 middle ：使元素的中部与父元素的基线加上父元素字母x 的一半对齐。 bottom ：使元素的底部与其所在行的底部对齐。 特别注意： vertical-align 不能控制块元素。 5.0 CSS列表属性列表相关的属性，可以作用在 ul 、ol 、li 元素上。 6.0 CSS表格属性 边框相关属性（其他元素也能用）： 注意： 以上4 个边框相关的属性，其他元素也可以用，这是我们第一次遇见它们。 在后面的盒子模型中，我们会详细讲解边框相关的知识。 表格独有属性（只有table 标签才能使用）： 以上5 个属性，只有表格才能使用，即： &lt;table&gt; 标签。 7.0 CSS背景属性 8.0 CSS鼠标属性 &#x2F;* 自定义鼠标光标 *&#x2F;cursor: url(&quot;./arrow.png&quot;),pointer; 五、CSS盒子模型1. CSS 长度单位 px ：像素。(浏览器默认最小像素12px) em ：相对元素font-size 的倍数。 rem ：相对根字体大小，html标签就是根。 % ：相对父元素计算。 CSS 中设置长度，必须加单位，否则样式无效！ 2. 元素的显示模式块元素（block）\\又称：块级元素 特点： 在页面中独占一行，不会与任何元素共用一行，是从上到下排列的。 默认宽度：撑满父元素。 默认高度：由内容撑开。 可以通过CSS 设置宽高。 行内元素（inline）\\又称：内联元素 特点: 在页面中不独占一行，一行中不能容纳下的行内元素，会在下一行继续从左到右排 列。 默认宽度：由内容撑开。 默认高度：由内容撑开。 无法通过CSS 设置宽高。 行内块元素（inline-block） 又称：内联块元素 特点： 在页面中不独占一行，一行中不能容纳下的行内元素，会在下一行继续从左到右排 列。 默认宽度：由内容撑开。 默认高度：由内容撑开。 可以通过CSS 设置宽高。 注意：元素早期只分为：行内元素、块级元素，区分条件也只有一条：”是否独占一行”，如果按照这种分类方式，行内块元素应该算作行内元素。 3. 总结各元素的显示模式 块元素（block） 主体结构标签： &lt;html&gt; 、&lt;body&gt; 排版标签： &lt;h1&gt; ~ &lt;h6&gt; 、&lt;hr&gt; 、&lt;p&gt; 、&lt;pre&gt; 、&lt;div&gt; 列表标签： &lt;ul&gt; 、&lt;ol&gt; 、&lt;li&gt; 、&lt;dl&gt; 、&lt;dt&gt; 、&lt;dd&gt; 表格相关标签： &lt;table&gt; 、&lt;tbody&gt; 、&lt;thead&gt; 、&lt;tfoot&gt; 、&lt;tr&gt; 、&lt;caption&gt; &lt;form&gt; 与&lt;option&gt; 行内元素（inline） 文本标签： &lt;br&gt; 、&lt;em&gt; 、&lt;strong&gt; 、&lt;sup&gt; 、&lt;sub&gt; 、&lt;del&gt; 、&lt;ins&gt; &lt;a&gt; 与&lt;label&gt; 行内块元素（inline-block） 图片： &lt;img&gt; 单元格： &lt;td&gt; 、&lt;th&gt; 表单控件： &lt;input&gt; 、&lt;textarea&gt; 、&lt;select&gt; 、&lt;button&gt; 框架标签： &lt;iframe&gt; 4. 修改元素的显示模式通过CSS 中的 display 属性可以修改元素的默认显示模式，常用值如下： 5. 盒子模型的组成CSS 会把所有的 HTML 元素都看成一个盒子，所有的样式也都是基于这个盒子。 margin（外边距）： 盒子与外界的距离。 border（边框）： 盒子的边框。 padding（内边距）： 紧贴内容的补白区域。 content（内容）：元素中的文本或后代元素都是它的内容。图示如下： 盒子的大小 &#x3D; content + 左右 padding + 左右 border 。注意：外边距margin 不会影响盒子的大小，但会影响盒子的位置 6. 盒子内容区（content） 注意：max-width 、min-width 一般不与 width 一起使用。max-height 、min-height 一般不与 height 一起使用。 7. 关于默认宽度所谓的默认宽度，就是不设置width 属性时，元素所呈现出来的宽度。总宽度 &#x3D; 父的content — 自身的左右margin 。内容区的宽度 &#x3D; 父的content — 自身的左右margin — 自身的左右border — 自身的左右padding 。 8. 盒子内边距（padding） 9. 盒子边框（border） 10. 盒子外边距_margin 10.1 margin 注意事项 子元素的margin ，是参考父元素的content 计算的。（因为是父亲的content 中承装着 子元素） 上margin 、左margin ：影响自己的位置；下margin 、右margin ：影响后面兄弟元素 的位置。 块级元素、行内块元素，均可以完美地设置四个方向的margin ；但行内元素，左右 margin 可以完美设置，上下margin 设置无效。 margin 的值也可以是 auto ，如果给一个块级元素设置左右margin 都为 auto ，该块级 元素会在父元素中水平居中。 margin 的值可以是负值。 10.2 margin 塌陷问题什么是 margin 塌陷？第一个子元素的上margin 会作用在父元素上，最后一个子元素的下margin 会作用在父元素上。如何解决 margin 塌陷？方案一： 给父元素设置不为 0 的padding 。方案二： 给父元素设置宽度不为 0 的border 。方案三：给父元素设置 css 样式 overflow:hidden 10.3 margin 合并问题什么是 margin 合并？上面兄弟元素的下外边距和下面兄弟元素的上外边距会合并，取一个最大的值，而不是相加。如何解决 margin 塌陷？无需解决，布局的时候上下的兄弟元素，只给一个设置上下外边距就可以了。 11. 处理内容溢出 12. 隐藏元素的方式方式一：visibility 属性visibility 属性默认值是 show ，如果设置为 hidden ，元素会隐藏。元素看不见了，还占有原来的位置（元素的大小依然保持）。方式二： display 属性设置 display:none ，就可以让元素隐藏。彻底地隐藏，不但看不见，也不占用任何位置，没有大小宽高。 13. 样式的继承有些样式会继承，元素如果本身设置了某个样式，就使用本身设置的样式；但如果本身没有设置某个样式，会从父元素开始一级一级继承（优先继承离得近的祖先元素）。 会继承的 css 属性:字体属性、文本属性（除了vertical-align）、文字颜色 等。 不会继承的 css 属性:边框、背景、内边距、外边距、宽高、溢出方式 等。 一个规律：能继承的属性，都是不影响布局的，简单说：都是和盒子模型没关系的。 14.默认样式元素一般都些默认的样式，例如： &lt;a&gt; 元素：下划线、字体颜色、鼠标小手。 &lt;h1&gt; ~ &lt;h6&gt; 元素： 文字加粗、文字大小、上下外边距。 &lt;p&gt; 元素：上下外边距 &lt;ul&gt; 、ol 元素：左内边距 body 元素： 8px 外边距（4个方向）……优先级：元素的默认样式 &gt; 继承的样式，所以如果要重置元素的默认样式，选择器一定要直接选择器到该元素。 15. 布局小技巧 行内元素、行内块元素，可以被父元素当做文本处理。即：可以像处理文本对齐一样，去处理：行内、行内块在父元素中的对齐。例如： text-align 、line-height 、text-indent 等。 如何让子元素，在父亲中 水平居中：若子元素为块元素，给父元素加上： margin:0 auto; 。若子元素为行内元素、行内块元素，给父元素加上： text-align:center 。 如何让子元素，在父亲中 垂直居中：若子元素为块元素，给子元素加上： margin-top ，值为：(父元素content －子元素盒子总高) &#x2F; 2。若子元素为行内元素、行内块元素：让父元素的height &#x3D; line-height ，每个子元素都加上： verticalalign:middle; 。补充：若想绝对垂直居中，父元素font-size 设置为0 。 16. 元素之间的空白问题产生的原因：行内元素、行内块元素，彼此之间的换行会被浏览器解析为一个空白字符。解决方案： 方案一： 去掉换行和空格（不推荐）。 方案二： 给父元素设置 font-size:0 ，再给需要显示文字的元素，单独设置字体大小（推荐）。 17. 行内块的幽灵空白问题产生原因：行内块元素与文本的基线对齐，而文本的基线与文本最底端之间是有一定距离的。解决方案： 方案一： 给行行内块设置vertical ，值不为 baseline 即可，设置为 middel 、bottom 、top 均可。 方案二： 若父元素中只有一张图片，设置图片为 display:block 。 方案三： 给父元素设置 font-size: 0 。如果该行内块内部还有文本，则需单独设置fontsize. 六、浮动在最初，浮动是用来实现文字环绕图片效果的，现在浮动是主流的页面布局方式之一。 元素浮动后的特点 🤢脱离文档流。 😊不管浮动前是什么元素，浮动后：默认宽与高都是被内容撑开（尽可能小），而且可以设置宽高。 😊不会独占一行，可以与其他元素共用一行。 😊不会margin 合并，也不会margin 塌陷，能够完美的设置四个方向的margin 和padding 。 😊不会像行内块一样被当做文本处理（没有行内块的空白问题）。 解决浮动产生的影响 1.元素浮动后会有哪些影响 对兄弟元素的影响： 后面的兄弟元素，会占据浮动元素之前的位置，在浮动元素的下面；对前面的兄弟无影响。 对父元素的影响： 不能撑起父元素的高度，导致父元素高度塌陷；但父元素的宽度依然束缚浮动的元素。 2.解决浮动产生的影响（清除浮动） 解决方案： 方案一： 给父元素指定高度。 方案二： 给父元素也设置浮动，带来其他影响。 方案三： 给父元素设置 overflow:hidden 。 方案四： 在所有浮动元素的最后面，添加一个块级元素，并给该块级元素设置 clear:both 。 方案五： 给浮动元素的父元素，设置伪元素，通过伪元素清除浮动，原理与方案四相同。&#x3D;&#x3D;&#x3D;&gt; 推荐使用 12345.parent::after &#123; content: &quot;&quot;; display: block; clear:both;&#125; 布局中的一个原则：设置浮动的时候，兄弟元素要么全都浮动，要么全都不浮动。 浮动相关属性 七、定位1.相对定位1.1 如何设置相对定位？给元素设置 position:relative 即可实现相对定位。可以使用 left 、right 、top 、bottom 四个属性调整位置。 1.2 相对定位的参考点在哪里？相对自己原来的位置 1.3 相对定位的特点： 不会脱离文档流，元素位置的变化，只是视觉效果上的变化，不会对其他元素产生任何影响。 定位元素的显示层级比普通元素高，无论什么定位，显示层级都是一样的。 默认规则是： 定位的元素会盖在普通元素之上。 都发生定位的两个元素，后写的元素会盖在先写的元素之上。 left 不能和right 一起设置， top 和bottom 不能一起设置。 相对定位的元素，也能继续浮动，但不推荐这样做。 相对行为的元素，也能通过margin 调整位置，但不推荐这样做。 2.绝对定位2.1 如何设置绝对定位？给元素设置 position: absolute 即可实现绝对定位。可以使用 left 、right 、top 、bottom 四个属性调整位置。 2.2 绝对定位的参考点在哪里？ 参考它的包含块。什么是包含块？ 对于没有脱离文档流的元素：包含块就是父元素； 对于脱离文档流的元素：包含块是第一个拥有定位属性的祖先元素（如果所有祖先都没定位，那包含块就是整个页面）。 2.3 绝对定位元素的特点： 脱离文档流，会对后面的兄弟元素、父元素有影响。 left 不能和right 一起设置， top 和bottom 不能一起设置。 绝对定位、浮动不能同时设置，如果同时设置，浮动失效，以定位为主。 绝对定位的元素，也能通过margin 调整位置，但不推荐这样做。 无论是什么元素（行内、行内块、块级）设置为绝对定位之后，都变成了定位元素。何为定位元素？ —— 默认宽、高都被内容所撑开，且能自由设置宽高。 3.固定定位3.1 如何设置为固定定位？给元素设置 position: fixed 即可实现固定定位。可以使用 left 、right 、top 、bottom 四个属性调整位置。 3.2 固定定位的参考点在哪里？参考它的视口什么是视口？—— 对于PC 浏览器来说，视口就是我们看网页的那扇“窗户”。 3.3 固定定位元素的特点 脱离文档流，会对后面的兄弟元素、父元素有影响。 left 不能和right 一起设置， top 和bottom 不能一起设置。 固定定位和浮动不能同时设置，如果同时设置，浮动失效，以固定定位为主。 固定定位的元素，也能通过margin 调整位置，但不推荐这样做。 无论是什么元素（行内、行内块、块级）设置为固定定位之后，都变成了定位元素。 4.粘性定位4.1 如何设置为粘性定位？给元素设置 position:sticky 即可实现粘性定位。可以使用 left 、right 、top 、bottom 四个属性调整位置，不过最常用的是top 值。 4.2 粘性定位的参考点在哪里？离它最近的一个拥有“滚动机制”的祖先元素，即便这个祖先不是最近的真实可滚动祖先。 4.3 粘性定位元素的特点 不会脱离文档流，它是一种专门用于窗口滚动时的新的定位方式。 最常用的值是top 值。 粘性定位和浮动可以同时设置，但不推荐这样做。 粘性定位的元素，也能通过margin 调整位置，但不推荐这样做。 粘性定位和相对定位的特点基本一致，不同的是：粘性定位可以在元素到达某个位置时将其固定。 5.定位层级 定位元素的显示层级比普通元素高，无论什么定位，显示层级都是一样的。 如果位置发生重叠，默认情况是：后面的元素，会显示在前面元素之上。 可以通过 css 属性 z-index 调整元素的显示层级。 z-index 的属性值是数字，没有单位，值越大显示层级越高。 只有定位的元素设置 z-index 才有效。 如果z-index 值大的元素，依然没有覆盖掉z-index 值小的元素，那么请检查其包含块的层级。 6.定位的特殊应用注意： 发生固定定位、绝对定位后，元素都变成了定位元素，默认宽高被内容撑开，且依然可以设置宽高。 发生相对定位后，元素依然是之前的显示模式。 以下所说的特殊应用，只针对 绝对定位 和 固定定位 的元素，不包括相对定位的元素。让定位元素的宽充满包含块 让定位元素的宽充满包含块 块宽想与包含块一致，可以给定位元素同时设置 left 和 right 为0 。 高度想与包含块一致， top 和 bottom 设置为 0 。 让定位元素在包含块中居中方案一： 12345left:0;right:0;top:0;bottom:0;margin:auto; 方案二： 1234left: 50%;top: 50%;margin-left: 负的宽度一半;margin-top: 负的高度一半; 注意：该定位的元素必须设置宽高！！！ 八、布局1. 版心在PC 端网页中，一般都会有一个固定宽度且水平居中的盒子，来显示网页的主要内容，这是网页的版心。版心的宽度一般是960 ~ 1200 像素之间。版心可以是一个，也可以是多个。 2. 常用布局名词 3. 重置默认样式很多元素都有默认样式，比如： p 元素有默认的上下margin 。 h1~h6 标题也有上下margin ，且字体加粗。 body 元素有默认的8px 外边距。 超链接有默认的文字颜色和下划线。 ul 元素有默认的左pading 。 …….在早期，元素默认样式，能够让我们快速的绘制网页，但如今网页的设计越来越复杂，内容越来越多，而且很精细，这些默认样式会给我们绘制页面带来麻烦；而且这些默认样式，在不同的浏览器上呈现出来的效果也不一样，所以我们需要重置这些默认样式。 方案一：使用全局选择器 12345* &#123;margin: 0;padding: 0;......&#125; 此种方法，在简单案例中可以用一下，但实际开发中不会使用，因为 * 选择的是所有元素，而并不是所有的元素都有默认样式；而且我们重置时，有时候是需要做特定处理的，比如：想让a 元素的文字是灰色，其他元素文字是蓝色。方案二：reset.css选择到具有默认样式的元素，清空其默认的样式。 经过reset 后的网页，好似“一张白纸”，开发人员可根据设计稿，精细的去添加具体的样式。 方案三：Normalize.cssNormalize.css 是一种最新方案，它在清除默认样式的基础上，保留了一些有价值的默认样式。官网地址： http://necolas.github.io/normalize.css/相对于 reset.css ， Normalize.css 有如下优点： 保护了有价值的默认样式，而不是完全去掉它们。 为大部分HTML元素提供一般化的样式。 新增对 HTML5 元素的设置。 对并集选择器的使用比较谨慎，有效避免调试工具杂乱。备注： Normalize.css 的重置，和reset.css 相比，更加的温和，开发时可根据实际情况进行选择。"},{"title":"前置基础知识","path":"/wiki/FrontEnd/HTML0.html","content":"认识两位先驱 计算机基础知识 计算机俗称电脑，是现代一种用于高速计算的电子计算机器，可以进行数值计算、逻辑计算，还 具有存储记忆功能。 计算机由 硬件 + 软件 构成： 硬件：看得见摸得着的物理部件。 软件：可以指挥硬件工作的指令。 软件的分类：系统软件（必装）+应用软件（需求）。 系统软件：Windows、Linux、Android、Harmony 等。 应用软件：美图，抖音等。 C&#x2F;S架构与B&#x2F;S架构上面提到的应用软件，又分为两大类： C&#x2F;S架构，特点：需要安装、偶尔更新、不跨平台、开发更具针对性。 B&#x2F;S架构，特点：无需安装、无需更新、可跨平台、开发更具通用性。 名词解释：C ：client（客户端）、B ：browser（浏览器）、S ：server（服务器） 为软件提供数据的设备。 前端工程师，主要负责编写 B&#x2F;S架构中的网页（呈现界面、实现交互）。大前端时代，我们可以用前端的技术栈，做出一个C&#x2F;S架构的应用、搭建一个服务器、微信小程序、客户端开发、数据可视化等。 网页相关概念 网址：在浏览器中输入的地址。 网页：浏览器所呈现的每一个页面。 网站：多个网页构成了一个网站。 网页标准：结构（HTML）+表现（CSS）+行为（JavaScript) 浏览器内核：内核是浏览器的核心，用于处理浏览器所得到的各种资源。"},{"title":"HTML4基础","path":"/wiki/FrontEnd/HTML4.html","content":"HTML 简介开发者文档W3C 官网： www.w3c.orgW3School： www.w3school.com.cnMDN： developer.mozilla.org —— 平时用的最多。 什么是 HTML全称：HyperText Markup Language（超文本标记语言）。超文本：是一种组织信息的方式，通过超链接将不同空间的文字，图片等各种信息组合到一起。标记：文本要变成超文本，就需要用到各种特定的标记符号。语言：每一个标记的写法、使用规则，组成了一个标记语言。 相关国际组织 IETF：Internet Engineering Task Force（国际互联网工程任务组），成立于 1985 年底，是一个权威的互联网技术标准化组织，主要负责互联网相关技术规范的研发和制定，当前绝大多数国际互联网技术标准均出自 IETF。官网： https://www.ietf.org W3C：World Wide Web Consortium（万维网联盟），创建于 1994 年，是目前 Web 技术领域，最具影响力的技术标准机构。共计发布了 200 多项技术标准和实施指南，对互联网技术的发展和应用起到了基础性和根本性的支撑作用，官网： https://www.w3.org WHATWF：Web Hypertext Application Technology Working Group（网页超文本应用技术工作小组）成立于 2004 年，是一个以推动网络 HTML 5 标准为目的而成立的组织。由 Opera、Mozilla 基金会、苹果，等这些浏览器厂商组成。官网： https://whatwg.org/ HTML 入门HTML 标签 标签 又称 元素，是 HTML 的基本组成单位。 标签分为：双标签 与 单标签 （绝大多数都是双标签）。 标签名不区分大小写，但推荐小写，因为小写更规范。 双标签：&lt;起始标签&gt;标签体&lt;/结束标签&gt; 1&lt;marquee&gt;标签&lt;/marquee&gt; 单标签：&lt;起始名/&gt;标签体 （&#x2F;斜杠可以省略） 12&lt;input&gt;&lt;br/&gt; 标签之间的关系：并列关系、嵌套关系，可以使用 tab 键进行缩进： HTML 标签属性 用于给标签提供 附加信息。 可以写在：起始标签 或 单标签中，形式如下： 123456&lt;标签名 属性名1=‘属性值1’ 属性名2=‘属性值2’&gt;&lt;marquee loop=&quot;1&quot; bgcolor=&quot;orange&quot;&gt; sumorio的标签测试 &lt;/marquee&gt; #循环次数：1次，背景：橘色&lt;input type=&quot;password&quot;&gt; 有些特殊的属性，没有属性名，只有属性值，例如： 1&lt;input disabled&gt; 双引号，也可以写成单引号，甚至不写都行，但还是推荐写双引号。 标签中不要出现同名属性，否则后写的会失效，例如： 1&lt;input type=&quot;text&quot; type=&quot;password&quot;&gt; HTML 基本结构1.在网页中，查看网页代码可以点击鼠标右键，选择“检查”。 2.【检查】 和 【查看网页源代码】的区别： 【查看网页源代码】看到的是：程序员编写的源代码。【检查】看到的是：经过浏览器 “处理” 后的源代码。备注：日常开发中，【检查】用的最多。 网页的 基本结构 如下： 想要呈现在网页中的内容写在 body 标签中。head 标签中的内容不会出现在网页中。head 标签中的 title 标签可以指定网页的标题。 12345678&lt;html&gt;\t&lt;head&gt; &lt;title&gt;网页标题&lt;/title&gt;\t&lt;/head&gt;\t&lt;body&gt; ...\t&lt;/body&gt;&lt;/html&gt; HTML 注释 特点：注释的内容会被浏览器所忽略，不会呈现到页面中，但源代码中依然可见。 作用：对代码进行解释和说明。 写法：&lt;!-- 注释 --&gt; 注释不可以嵌套。 HTML 文档声明 作用：告诉浏览器当前网页的版本。 写法：请参考官网：W3C 注意：文档声明，必须在网页的第一行，且在 html 标签的外侧。 Html类型的文件，在VsCode 中输入! ，随后回车即可快速生成标准结构。 HTML 字符编码 计算机对数据的操作：存储时，对数据进行：编码。读取时，对数据进行：解码。 编码、解码，会遵循一定的规范 —— 字符集。 字符集有很多中，常见有： ASCII ：大写字母、小写字母、数字、一些符号，共计 128 个。 ISO 8859-1 ：在 ASCII 基础上，扩充了一些希腊字符等，共计是 256 个。 GB2312 ：继续扩充，收录了 6763 个常用汉字、682 个字符。 GBK ：收录了的汉字和符号达到 20000+ ，支持繁体中文。 UTF-8 ：包含世界上所有语言的：所有文字与符号。—— 很常用。 平时编写代码时，统一采用 UTF-8 编码（最稳妥）。 为了让浏览器在渲染 html 文件时，不犯错误，可以通过 meta 标签配合 charset 属性指定字符编码。 123&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;/&gt;&lt;/head&gt; HTML 基础排版标签 标签名 标签含义 单 &#x2F; 双 标签 h1~h6 标题 双 p 段落 双 div 块级元素，用于布局，无实际意义 双 h1 最好写一个， h2~h6 能适当多写。 h1~h6 不能互相嵌套，例如： h1 标签中最好不要写 h2 标签。 p 标签很特殊！它里面不能有： h1~h6 、p 、div 。 语义化标签概念：用特定的标签，去表达特定的含义。原则：标签的默认效果不重要（后期可以通过 CSS 随便控制效果），语义最重要！举例：对于 h1 标签，效果是文字很大（不重要），语义是网页主要内容（很重要）。优势： 代码结构清晰可读性强。 有利于 SEO（搜索引擎优化）。 方便设备解析（如屏幕阅读器、盲人阅读器等）。 块级元素 与 行内元素 块级元素：独占一行（排版标签都是块级元素）。 行内元素：不独占一行 使用原则： 块级元素 中能写 行内元素 和 块级元素。 行内元素 中能写 行内元素，但不能写 块级元素。 一些特殊的规则： h1~h6 不能互相嵌套。 p 中不要写块级元素。 文本标签 用于包裹：词汇、短语等。通常写在排版标签里面。 相比排版标签更宏观（大段的文字），文本标签一般用于更微观（词汇、短语）。 文本标签通常都是行内元素，除了blockquote 与 address 是块级元素。 em：要着重阅读的内容 strong：十分重要的内容（语气比em要强） span：没有语义，用于包裹短语的通用容器。（div 可看作是大包装袋， span 是小包装袋。） sub &#x2F; sup ：上下角标 图片标签img 图片： src ：图片路径—— 图片的具体位置 alt ：图片描述（搜索引擎增加曝光率，图片无法显示是使用，盲人阅读器会使用alt进行提示） width ：图片宽度，单位是像素 height：图片高度， 单位是像素 常见图片格式： jpg：有损压缩，颜色丰富，占用空间小。适用于对细节没要求的场景，宣传图等。 png：无损压缩。支持透明背景，颜色丰富，注重细节。适用于要求高质量细节场景，公司logo等。 bmp：无损压缩，占用空间极大，细节优秀。大型游戏场景等，网页较少使用。 gif：仅支持256种颜色，支持简单透明背景，支持动图。 webp：谷歌推出，专门用于网页呈现图片。兼容性可能差点 base64：一串特殊文本，需要通过浏览器打开，传统看图应用大概率打不开。可以直接作为img和src属性的值且不受文件位置的影响。适用于小图片，或者和网页一起加载的图片。 超链接a 超链接： href ： 指定要跳转到的具体目标。 target ： 控制跳转时如何打开页面，常用值如下: _self ：在本窗口打开。 _blank ：在新窗口打开。 id ： 元素的唯一 标识，可用于设置锚点。 name ： 元素的名字，写在a 标签中，也能设置锚点。 name 和id 都是区分大小写的，id 最好不要数字开头。 1. 跳转到页面12345&lt;!-- 跳转其他网页 --&gt;&lt;a href=&quot;https://www.sumorio.com/&quot; target=&quot;_blank&quot;&gt;去苏末了的主页&lt;/a&gt;&lt;!-- 跳转本地网页 --&gt;&lt;a href=&quot;./10_HTML排版标签.html&quot; target=&quot;_self&quot;&gt;去看排版标签&lt;/a&gt; 注意点： 代码中的多个空格、多个回车，都会被浏览器解析成一个空格！ 虽然a 是行内元素，但a 元素可以包裹除它自身外的任何元素！ 2. 跳转到文件1234567891011&lt;!-- 浏览器能直接打开的文件 --&gt;&lt;a href=&quot;./resource/自拍.jpg&quot;&gt;看自拍&lt;/a&gt;&lt;a href=&quot;./resource/电影.mp4&quot;&gt;看电影&lt;/a&gt;&lt;a href=&quot;./resource/图片.gif&quot;&gt;看图片&lt;/a&gt;&lt;a href=&quot;./resource/看文件.pdf&quot;&gt;看文件&lt;/a&gt;&lt;!-- 浏览器不能打开的文件，会自动触发下载 --&gt;&lt;a href=&quot;./resource/内部资源.zip&quot;&gt;内部资源&lt;/a&gt;&lt;!-- 强制触发下载 --&gt;&lt;a href=&quot;./resource/电影.mp4&quot; download=&quot;电影片段.mp4&quot;&gt;下载电影&lt;/a&gt; 3. 跳转到锚点什么是锚点？—— 网页中的一个标记点。 具体使用方式：设置锚点的时候不用写#，在href中跳转时需要写#。id是通用属性，可以和任意标签搭配使用用作锚点，但是name只能和a标签配合才是锚点性质。 第一步：设置锚点 12345&lt;!-- 第一种方式：a标签配合name属性 --&gt;&lt;a name=&quot;test1&quot;&gt;&lt;/a&gt;&lt;!-- 第二种方式：其他标签配合id属性 --&gt;&lt;h2 id=&quot;test2&quot;&gt;我是一个位置&lt;/h2&gt; 注意点： 具有 href 属性的 a 标签是超链接，具有 name 属性的a标签是锚点。 name 和id 都是区分大小写的，且id 最好别是数字开头。 第二步：跳转锚点 1234567891011121314&lt;!-- 跳转到test1锚点--&gt;&lt;a href=&quot;#test1&quot;&gt;去test1锚点&lt;/a&gt;&lt;!-- 跳到本页面顶部 --&gt;&lt;a href=&quot;#&quot;&gt;回到顶部&lt;/a&gt;&lt;!-- 跳转到其他页面锚点 --&gt;&lt;a href=&quot;demo.html#test1&quot;&gt;去demo.html页面的test1锚点&lt;/a&gt;&lt;!-- 刷新本页面 --&gt;&lt;a href=&quot;&quot;&gt;刷新本页面&lt;/a&gt;&lt;!-- 执行一段js,如果还不知道执行什么，可以留空，javascript:; --&gt;&lt;a href=&quot;javascript:alert(1);&quot;&gt;点我弹窗&lt;/a&gt; 4. 唤起指定应用通过a 标签，可以唤起设备应用程序。 12345678&lt;!-- 唤起设备拨号 --&gt;&lt;a href=&quot;tel:10010&quot;&gt;电话联系&lt;/a&gt;&lt;!-- 唤起设备发送邮件 --&gt;&lt;a href=&quot;mailto:10010@qq.com&quot;&gt;邮件联系&lt;/a&gt;&lt;!-- 唤起设备发送短信 --&gt;&lt;a href=&quot;sms:10086&quot;&gt;短信联系&lt;/a&gt; 列表 有序列表ordered list：有顺序或侧重顺序的列表。 123456&lt;h2&gt;要把大象放冰箱总共分几步&lt;/h2&gt;&lt;ol&gt; &lt;li&gt;把冰箱门打开&lt;/li&gt; # list item =li &lt;li&gt;把大象放进去&lt;/li&gt; &lt;li&gt;把冰箱门关上&lt;/li&gt;&lt;/ol&gt; 无序列表unordered list：无顺序或不侧重顺序的列表。 1234567&lt;h2&gt;我想去的几个城市&lt;/h2&gt;&lt;ul&gt; &lt;li&gt;成都&lt;/li&gt; &lt;li&gt;上海&lt;/li&gt; &lt;li&gt;西安&lt;/li&gt; &lt;li&gt;武汉&lt;/li&gt;&lt;/ul&gt; 列表嵌套：列表中的某项内容，又包含一个列表。 li 标签最好写在 ul 或 ol 中，不要单独使用。 自定义列表definition list： 一个包含术语名称以及术语描述的列表。 一个dl 就是一个自定义列表，一个dt 就是一个术语名称，一个dd 就是术语描述（可以有多个）。 12345678910&lt;h2&gt;如何高效的学习？&lt;/h2&gt;&lt;dl&gt; &lt;dt&gt;做好笔记&lt;/dt&gt; # defination title &lt;dd&gt;笔记是我们以后复习的一个抓手&lt;/dd&gt; # defination description &lt;dd&gt;笔记可以是电子版，也可以是纸质版&lt;/dd&gt; &lt;dt&gt;多加练习&lt;/dt&gt; &lt;dd&gt;只有敲出来的代码，才是自己的&lt;/dd&gt; &lt;dt&gt;别怕出错&lt;/dt&gt; &lt;dd&gt;错很正常，改正后并记住，就是经验&lt;/dd&gt;&lt;/dl&gt; 表格1. 基本结构 一个完整的表格table有四部分：表格标题caption、表格头部thead、表格主体tbody、表格脚注tfoot。 表格涉及到的标签： table ：表格 caption ：表格标题 thead ：表格头部 tbody ：表格主体 tfoot ：表格注脚(可选) tr ：每一行(table row) th&#x2F;td ：每一个单元格（表格头部用th-thead ，表格主体&#x2F;表格脚注用： td-tdata ） 12345678910111213141516171819202122232425262728#先给出框架caption,thead,tbody,tfood四部分;再分别看每个部分的行数；最后补充每行数据。（不容易乱）&lt;body&gt; &lt;table border=&quot;5&quot;&gt; &lt;caption&gt;学生信息表&lt;/caption&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;姓名&lt;/th&gt; &lt;th&gt;年龄&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;张三&lt;/td&gt; &lt;td&gt;15&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;李四&lt;/td&gt; &lt;td&gt;16&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;tfoot&gt; &lt;tr&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;31&lt;/td&gt; &lt;/tr&gt; &lt;/tfoot&gt; &lt;/table&gt;&lt;/body&gt; 2. 常用属性 注意点： 元素的border 属性可以控制表格边框，但border 值的大小，并不控制单元格 边框的宽度， 只能控制表格最外侧边框的宽度，这个问题如何解决？—— 后期靠CSS 控制。 默认情况下，每列的宽度，得看这一列单元格最长的那个文字。 给某个th 或td 设置了宽度之后，他们所在的那一列的宽度就确定了。 给某个th 或td 设置了高度之后，他们所在的那一行的高度就确定了。 3. 跨行跨列（合并单元格） rowspan ：指定要跨的行数。 colspan ：指定要跨的列数。 常用标签补充 br 换行。单( 不要用br增加文本行间隔，应该用&lt;p&gt;想要增加间距最好用css ) hr 分隔。单( 想要增加分割使用hr,想要分割线使用css ) pre 按原文显示。双（一般用于在页面中嵌入大段代码） 表单概念：一个包含交互的区域，用于收集用户提供的数据。 基本结构 示例代码： 1234&lt;form action=&quot;https://www.baidu.com/s&quot; target=&quot;_blank&quot; method=&quot;get&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;wd&quot;&gt; &lt;button&gt;去搜索&lt;/button&gt;&lt;/form&gt; 常用表单控件①文本输入框：&lt;input type=&quot;text&quot;&gt; 常用属性如下：name 属性：数据的名称。value 属性：输入框的默认输入值。maxlength 属性：输入框最大可输入长度。 ② 密码输入框&lt;input type=&quot;password&quot;&gt; 常用属性如下： name 属性：数据的名称。value 属性：输入框的默认输入值（一般不用，无意义）。maxlength 属性：输入框最大可输入长度。 ③ 单选框&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;female&quot;&gt;女&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;male&quot;&gt;男 常用属性如下：name 属性：数据的名称，注意：想要单选效果，多个radio 的 name 属性值要保持一致。value 属性：提交的数据值。checked 属性：让该单选按钮默认选中。 ④ 复选框&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;smoke&quot;&gt;抽烟&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;drink&quot;&gt;喝酒&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;perm&quot;&gt;烫头 常用属性如下：name 属性：数据的名称。value 属性：提交的数据值。checked 属性：让该复选框默认选中。 ⑥ 提交按钮&lt;input type=&quot;hidden&quot; name=&quot;tag&quot; value=&quot;100&quot;&gt; 用户不可见的一个输入区域，作用是： 提交表单的时候，携带一些固定的数据。name 属性：指定数据的名称。value 属性：指定的是真正提交的数据。 ⑥ 提交按钮&lt;input type=&quot;submit&quot; value=&quot;点我提交表单&quot;&gt;&lt;button&gt; 点我提交表单&lt;/button&gt; 注意： button 标签 type 属性的默认值是 submit 。 button 不要指定name 属性 input 标签编写的按钮，使用value 属性指定按钮文字。 ⑦ 重置按钮&lt;input type=&quot;reset&quot; value=&quot;点我重置&quot;&gt;&lt;button type=&quot;reset&quot;&gt;点我重置&lt;/button&gt; 注意： button 不要指定name 属性 input 标签编写的按钮，使用value 属性指定按钮文字。 ⑧ 普通按钮&lt;input type=&quot;button&quot; value=&quot;普通按钮&quot;&gt;&lt;button type=&quot;button&quot;&gt;普通按钮&lt;/button&gt; 注意： 普通按钮的type 值为button ，若不写type 值是submit 会引起表单的提交。 确认按钮可以有button和input的两种写法，submit作为按钮的时候不要写name带值， ⑨文本域&lt;textarea name=&quot;msg&quot; rows=&quot;22&quot; cols=&quot;3&quot;&gt;我是文本域&lt;/textarea&gt; 常用属性如下： rows 属性：指定默认显示的行数，会影响文本域的高度。 cols 属性：指定默认显示的列数，会影响文本域的宽度。 不能编写type 属性，其他属性，与普通文本输入框一致。 ⑩ 下拉框123456&lt;select name=&quot;from&quot;&gt; &lt;option value=&quot;黑&quot;&gt;黑龙江&lt;/option&gt; &lt;option value=&quot;辽&quot;&gt;辽宁&lt;/option&gt; &lt;option value=&quot;吉&quot;&gt;吉林&lt;/option&gt; &lt;option value=&quot;粤&quot; selected&gt;广东&lt;/option&gt; #被选中，selected&lt;/select&gt; 常用属性及注意事项： name 属性：指定数据的名称。 option 标签设置value 属性， 如果没有value 属性，提交的数据是option 中间的文 字；如果设置了value 属性，提交的数据就是value 的值（建议设置 value 属性） option 标签设置了 selected 属性，表示默认选中。 禁用表单控件(前端不可改)给表单控件的标签设置 disabled 既可禁用表单控件。 input 、textarea 、button 、select 、option 都可以设置 disabled 属性 label 标签label 标签可与表单控件相关联，关联之后点击文字，与之对应的表单控件就会获取焦点。两种与label 关联方式如下： 让label 标签的for 属性的值等于表单控件的id 。 把表单控件套在 label 标签的里面。 fieldset 与 legend 的使用（了解）fieldset 可以为表单控件分组、legend 标签是分组的标题。 12345678910111213141516&lt;fieldset&gt; &lt;legend&gt;主要信息&lt;/legend&gt; &lt;label for=&quot;zhanghu&quot;&gt;账户：&lt;/label&gt; &lt;input id=&quot;zhanghu&quot; type=&quot;text&quot; name=&quot;account&quot; maxlength=&quot;10&quot;&gt;&lt;br&gt; &lt;label&gt; 密码： &lt;input id=&quot;mima&quot; type=&quot;password&quot; name=&quot;pwd&quot; maxlength=&quot;6&quot;&gt; &lt;/label&gt; &lt;br&gt; 性别： &lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;male&quot; id=&quot;nan&quot;&gt; &lt;label for=&quot;nan&quot;&gt;男&lt;/label&gt; &lt;label&gt; &lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;female&quot; id=&quot;nv&quot;&gt;女 &lt;/label&gt; &lt;/fieldset&gt; 框架标签iframe框架（在网页中生成有一个框架方块，可嵌入其他文件） name ：框架名字，可以与 target 属性配合。 width ： 框架的宽。 height ： 框架的高度。 frameborder ：是否显示边框，值：0或者1。 iframe 标签的实际应用： 在网页中嵌入广告。 与超链接或表单的 target 配合，展示不同的内容。 HTML实体在HTML 中我们可以用一种特殊的形式的内容，来表示某个符号，这种特殊形式的内容，就是HTML 实体。比如小于号 &lt; 用于定义 HTML 标签的开始。如果我们希望浏览器正确地显示这些字符，我们必须在HTML 源码中插入字符实体。 字符实体由三部分组成：一个&amp; 和 一个实体名称（或者一个# 和 一个实体编号），最后加上一个分号; 。 HTML全局属性常用的全局属性： meta 元信息1234567891011121314151617181920212223242526272829&lt;meta charset=&quot;utf-8&quot;&gt; #配置字符编码&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; #针对IE 浏览器的兼容性配置。&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; #针对移动端的配置&lt;meta name=&quot;keywords&quot; content=&quot;8-12个以英文逗号隔开的单词/词语&quot;&gt;#配置网页关键字&lt;meta name=&quot;description&quot; content=&quot;80字以内的一段话，与网站内容相关&quot;&gt; #配置网页描述信息&lt;meta name=&quot;robots&quot; content=&quot;此处可选值见下表&quot;&gt; #针对搜索引擎爬虫配置&lt;meta name=&quot;author&quot; content=&quot;tony&quot;&gt;#配置网页作者&lt;meta name=&quot;generator&quot; content=&quot;Visual Studio Code&quot;&gt;#配置网页生成工具&lt;meta name=&quot;copyright&quot; content=&quot;2023-2027©版权所有&quot;&gt; #配置定义网页版权信息&lt;meta http-equiv=&quot;refresh&quot; content=&quot;10;url=http://www.baidu.com&quot;&gt;#配置网页自动刷新 重点记忆"},{"title":"HTML5基础","path":"/wiki/FrontEnd/HTML5.html","content":"一、HTML5简介什么是HTML5HTML5 是新一代的 HTML 标准，2014年10月由万维网联盟（ W3C ）完成标准制定。 官网地址： W3C 提供： https://www.w3.org/TR/html/index.html WHTWG 提供： https://whatwg-cn.github.io/html/multipage HTML5 在狭义上是指新一代的 HTML 标准，在广义上是指：整个前端。 HTML5 优势 针对JavaScript ，新增了很多可操作的接口。 新增了一些语义化标签、全局属性。 新增了多媒体标签，可以很好的替代flash 。 更加侧重语义化，对于SEO 更友好。 可移植性好，可以大量应用在移动设备上。 HTML5兼容性支持： Chrome 、Safari 、Opera 、Firefox 等主流浏览器。IE 浏览器必须是9 及以上版本才支持HTML5 ，且IE9 仅支持部分HTML5 新特性。 二、新增语义化标签1. 新增布局标签 关于article 和section ： artical 里面可以有多个section 。 section 强调的是分段或分块，如果你想将一块内容分成几段的时候，可使用section 元素。 article 比section 更强调独立性，一块内容如果比较独立、比较完整，应该使用article 元素。 2. 新增状态标签2.1 meter 标签语义：定义已知范围内的标量测量。也被称为 gauge （尺度），双标签，例如：电量、磁盘用量等。 常用属性如下： 2.2 progress 标签语义：显示某个任务完成的进度的指示器，一般用于表示进度条，双标签，例如：工作完成进度等。属性值描述： 3. 新增列表标签 4. 新增文本标签4.1 文本注音 4.2 文本标记 三、新增表单功能1. 表单控件新增属性 2. input 新增属性值 3. form 标签新增属性 四、新增多媒体标签1. 视频标签&lt;video&gt; 标签用来定义视频，它是双标签。 2. 音频标签&lt;audio&gt; 标签用来定义音频，它是双标签。 五、新增全局属性（了解） 六、HTML5兼容性处理添加元信息，让浏览器处于最优渲染模式。 12345&lt;!--设置IE总是使用最新的文档模式进行渲染--&gt;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge&quot;&gt;&lt;!--优先使用 webkit ( Chromium ) 内核进行渲染, 针对360等壳浏览器--&gt;&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt; 使用html5shiv 让低版本浏览器认识H5 的语义化标签。 123&lt;!--[if lt ie 9]&gt;&lt;script src=&quot;../sources/js/html5shiv.js&quot;&gt;&lt;/script&gt;&lt;![endif]--&gt; 扩展 12345lt 小于lte 小于等于gt 大于gte 大于等于! 逻辑非 示例： 123456&lt;!--[if IE 8]&gt;仅IE8可见&lt;![endif]--&gt;&lt;!--[if gt IE 8]&gt;仅IE8以上可见&lt;![endif]—&gt;&lt;!--[if lt IE 8]&gt;仅IE8以下可见&lt;![endif]—&gt;&lt;!--[if gte IE 8]&gt;IE8及以上可见&lt;![endif]—&gt;&lt;!--[if lte IE 8]&gt;IE8及以下可见&lt;![endif]—&gt;&lt;!--[if !IE 8]&gt;非IE8的IE可见&lt;![endif]--&gt;"},{"title":"JavaScript基础教学","path":"/wiki/FrontEnd/JavaScript.html","content":"😊 开发中，请等待。"},{"title":"Hexo环境搭建","path":"/wiki/Hexo/1.Hexo之环境部署.html","content":"在别人的地盘写博客终究是客，本文教你如何搭建专属自己的博客，实现 Blog 自由。注：本博客基于 windows 环境进行搭建。 一、前提概要Hexo是什么Hexo 是一个快速、简洁且高效的博客框架。Hexo 基于 Node.js 运行，使用 Markdown解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 Hexo 安装前提安装 Hexo 相当简单，因为 Hexo 基于 Node.js，所以需要先安装下列应用程序： Node.js ( 版本不低于 10.13，建议使用 12.0 及以上版本) Git 二、Hexo 环境搭建安装 Node.js 使用 Node.js 官方安装程序时，请确保勾选 Add to PATH 选项（默认已勾选） 下载地址：点击下一步安装即可。 32 位安装包 : https://nodejs.org/dist/v4.4.3/node-v4.4.3-x86.msi 64 位安装包 : https://nodejs.org/dist/v4.4.3/node-v4.4.3-x64.msi 检查配置：检查 Path 环境变量键盘 Win 键+r→ 输入 cmd→ 打开 cmd 窗口 → 输入以下命令： 1node -v 若出现版本号，说明安装成功。 安装 Git Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。 下载地址：点击下一步安装即可。https://git-scm.com/download/win 检查配置：检查 Path 环境变量键盘 Win 键+r→ 输入 cmd→ 打开 cmd 窗口 → 输入以下命令： 1git --version 若出现版本号，说明安装成功。 三、Hexo 安装Hexo| 下载&amp;安装&amp;登录必备的应用程序安装完成后，即可使用 npm 安装 Hexo。 进入今后放置博客资源的文件夹（可以在 D 盘新建 hexo&#x2F;blog&#x2F;），进入 blog 文件夹，空白处鼠标右键打开 Git bash here。 在 Git 面板中，依次执行每行命令。 12345npm install hexo-cli -g #下载生成hexohexo init blog #初始化cd blog #创建名为blog的文件夹，名字可改为自己喜欢的npm installhexo server #启动服务器 完成以上操作后，打开浏览器访问网址： http://localhost:4000/如果成功进入网页，恭喜你，Hexo 博客的基础环境已搭建完毕。 Hexo| 生成文章1hexo n &quot;新文章01&quot; #生成名为”新文章01“的文章 Hexo| 退出服务1ctrl+c: 退出服务 Hexo| 配置文件官网配置信息：https://hexo.io/zh-cn/docs/configuration Hexo| 中文设置修改_config.yml 文件中的 laguage 设置：language: [zh-CN, en] language 网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 zh-Hans 和 zh-CN。 Hexo| 切换主题 选择主题：进入官网选择喜欢的主题，Themes | Hexo 下载主题：这里使用的 stellar 主题，进入主题对应的 github 项目地址：https://github.com/xaoxuu/hexo-theme-stellar.git，点击 code→download zip 至本地 → 解压。 解压主题：到本地 blog&#x2F;themes&#x2F;文件夹下,重命名为 stellar 更换主题:修改_config.yml 文件里的 theme 值为 主题文件夹名.theme:stellar 配置主题: 参考stellar手册个性化修改"},{"title":"Github托管静态页面","path":"/wiki/Hexo/101Github-hosting-webpage.html","content":"GiHub Pages 入门——官方文档 一、新建仓库 在 GitHub 任何页面的右上角，选择 ，然后单击“新建存储库”。 创建一个仓库，仓库名和 github 用户名保持一致：用户名.github.io。 二、配置 SSH 密钥只有配置好密钥，才能通过 git 操作实现本地代码与 Github 代码库的同步。 进入最初新建的文件夹 D:&#x2F;Hexo&#x2F;blog 右键打开 Git Bash Here，输入命令后，回车三次 1ssh-keygen -t rsa -C &quot;你的邮箱地址&quot; #如&quot;88888@qq.com 进入 C 盘 users&#x2F;用户名文件夹&#x2F;.ssh 文件夹，其中有 2 个文件夹： id_rsa 是这台电脑的私人密钥； id_rsa.pub 是公共密钥。 复制 id_rsa.pub 中的内容粘贴到 github 的 SSH 中 三、GitHub 新增 SSH 点击右上角 Github 信息 ➡️ 点击设置 ➡️ 左侧栏 SSH and GPG keys➡️ 新增 SSHkeys title 随便起个名字，将第二步复制的 rsa 密钥复制到这里 在 Git Bash Here 中输入命令，显示 successful 成功。 1ssh -T git@github.com 四、修改配置 打开 github 的同名仓库，点击 code➡️SSH➡️ 复制 将复制的链接加入本地_config.yml 文件中，参考如下： 123456789deploy: # 类型 type: git # 部署分支名称，按照自己喜欢的起名就可以。这里写完还需要在 GitHub 上进行分支创建并配置 branch: main # 仓库，这里使用的 SSH 方式 repo: git@github.com:***/***.github.io.git #这里填第2步中复制的内容 # 如果你看了 hexo 的文档，这里很清楚。部署的时候会使用这个消息作为提交的信息 message: Automatic deploy by Github Action：&#123;&#123; now(&#x27;YYYY-MM-DD HH:mm:ss&#x27;) &#125;&#125; 五、更新提交输入下面的命令，本地文件会自动更新提交到 github 上。 123hexo chexo g #自动生成上传的文件hexo d #上传git 如果输入指令报错not found git，可以先下载安装插件。 1npm install hexo-deployer-git --save"},{"title":"Github网页绑定域名","path":"/wiki/Hexo/102Domain-Name.html","content":"阿里云.com 域名 1 元购买，绑定 Github Pages，个人访问令牌认证。 域名注册 进入 阿里云官网，支付宝登录后，进入【右上角”控制台”】→【左上角”域名”】，来到域名搜索页面。 注册阿里云域名，目前新人 1 元购.com 域名，可按喜好购买 →新人 1 元购活动入口. 新用户需要进行实名认证，在订单详情页有相关提示进行认证即可，一般 10 分钟内可审核通过。 实名认证成功后，可直接购买域名，选择支付宝支付即可。 恭喜你，现在起拥有了属于自己的域名。 域名解析 当域名状态显示为 正常 时，开始进行 域名解析，点击右侧操作中的 解析 进入云解析 DNS 页面。 点击 添加记录 ，添加两条 CNAME 记录，填写内容如下。 这里解释下，需要新增两条主机记录@&#x2F;www 的原因是，方便可以通过 sumorio.com以及 www.sumorio.com 两种形式对网站进行访问。 域名绑定 前往Github Page已搭建好的仓库中，点击settings→ page→Custom domain 项中添加进行解析后的自定义域名。 等待两分钟，DNS 认证成功后，即可使用新域名登录你的 github pages 网页。 访问令牌Https 阿里云申请 SSL 证书 进入阿里云数字证书管理服务平台 如图所示，点击 SSL 证书 → 免费证书 → 立即购买 → 我同意。申请免费证书数量。 申请成功后，再次进入该页面，点击 SSL 证书 → 免费证书 → 创建证书 → 申请证书 → 填写域名信息。 提交审核并等待，一般秒批审核。 Github 修改 CNAME Github 仓库的 cname 文件中新增一条指令：sumorio.com（不用加 https） Github 仓库的 settings→pages→ 勾选 Enforce HTTPS 。 完。"},{"title":"Hexo部署twikoo评论系统 | 邮件推送versel | 被墙解决方案","path":"/wiki/Hexo/301Twikoo-deployment.html","content":"Hexo 部署 twikoo 评论系统，邮件推送 versel，被墙导致无法评论的解决方案。 一、配置数据库1.申请 MongoDB 账号进入MongoDB注册一个账号。可以使用 github 直接登录。 2.创建 MongoDB 数据库申请完毕后进入界面，选择最右边的免费共享数据库 ➡️aws➡️N.virginia(us-wast-1)➡️create. 设置用户名和密码，记住密码，后面需要使用。 ip 设置 0.0.0.0&#x2F;0. 自动跳转至数据库列表首页，点击 connect. 链接应用。 记住第 3 条的代码，后续部署需要用到，且使用时需要把 password 处替换你之前设置的密码。 1mongodb+srv://sumor:&lt;password&gt;@sumor0.kxmeq0a.mongodb.net/?retryWrites=true&amp;w=majority 二、部署到 Vercel1.申请账号申请一个Vercel账号. 2.部署仓库点击以下链接将 Twikoo 一键部署到 Vercel：起名 twikoo 创建。 https://vercel.com/import/project?template=https://github.com/imaegoo/twikoo/tree/main/src/server/vercel-min 注：如果导入后出现空白界面或部署失败等现象，极大可能是 Twikoo 的仓库地址更换了，可以参考官网获取部署链接：部署仓库点击以下链接将 Twikoo 一键部署到 Vercel：https://twikoo.js.org/quick-start.html 点击进入创建的任务页面-visit. 3.新建变量进入Settings - Environment Variables页面。新建一个 NAME 为MONGODB_URI;VALUE 为你在前面记录到的数据库连接字符串的环境变量-save 保存。 注意：需要手动输入之前设置的密码，去掉&lt;&gt;，具体如： 1mongodb+srv://ambor0225:123456@cluster0.rx4.... 4.再次部署进入Deployments界面，点击右边的竖三点，点击Redeploy。 5.检验部署结果回到Overview，点击 Domains 下方的链接，如果环境配置正确，可以看到 “Twikoo 云函数运行正常” 等字样。 Domains下方的链接即为后面需要使用到的环境 id。 至此，Twikoo 评论系统部署完成。 三、实现邮件通知1.开通POP3&#x2F;SMTP 服务 以网易为例，其他邮箱可自行摸索，原理大同小异。 前往你的邮件服务提供商，发短信开启 POP3&#x2F;SMTP 服务-保存最后的授权密码，后面要用。 四、配置 Twikoo1.博客启用 Twikoo 此部分教程以 stellar 主题为例说明，其他主题可参阅对应的使用文档。 配置博客文件_config.stellar.yml，启用 twikoo 评论：（云函数位于 versel，domains 下的小地球后面） 12345678910######## Comments ########comments: service: twikoo # Twikoo # https://twikoo.js.org/ twikoo: js: https://gcore.jsdelivr.net/npm/twikoo@1.6.8/dist/twikoo.all.min.js # 建议锁定版本 envId: https://xx.xx.com # twikoo云函数, 重新启动服务，进入博客页面，随意找到一篇文章，查看最下方的评论处，找到评论下方小按钮。点击设置。 【配置管理】-邮件通知：大部分不用填写，使用默认即可。下面几个必填。 SENDER_EMAIL: &#x73;&#x75;&#x6d;&#111;&#x72;&#105;&#111;&#64;&#x31;&#50;&#54;&#46;&#x63;&#111;&#109;SMTP_SERVICE: 126SMTP_PORT: 465SMTP_SECURE: trueSMTP_USER: &lt;邮件通知邮箱用户名&gt;(需与 SENDER_EMAIL 一致)SMTP_PASS: (pop 授权码) 其中DEFAULT_GRAVATAR参数可以设置评论默认使用的头像类型，头像区别如下： 五、versel 版本不符升级配置官方文档：https://twikoo.js.org/update.html 进入 Vercel 仪表板 - twikoo - &gt; Settings - Git 点击 Connected Git Repository 下方的仓库地址 打开 package.json，点击编辑 将 &quot;twikoo-vercel&quot;: &quot;latest&quot; 其中的 latest 修改为最新版本号。点&gt; 击 Commit changes 部署会自动触发，可以回到 Vercel 仪表板，查看部署状态 六、解决 versel 被墙无法留言 登录你的域名解析平台，我这里使用的阿里云-进入【域名解析】工作台-添加域名-twikoo+你的域名-txt 授权校验。 保存好弹出的验证记录信息，后面要用，先不要点击验证。 进入【解析设置】界面，点击进入你的域名后台【添加记录】，将上一步的信息填入对应信息即可。 返回第 2 步，进行验证。 进入新增的域名后台，将二级域名解析到 Vercel，新增两条记录。 主机记录 记录类型 解析请求来源(isp) 记录值 TTL twikoo CNAME 默认 cname.vercel-dns.com 10 分钟 @ A 默认 76.76.21.21 10 分钟 Vercel 项目中添加 Domains 进入【Project Settings】-&gt;【Domains】添加域名即可。 进入博客后台，替换主题配置文件的_config.stellar.yml 以下内容中的 envid. 最后的最后，要记得重新编译运行查看效果哦~"},{"title":"部署Stellar动态友链","path":"/wiki/Hexo/302Dynamic-friend-chain.html","content":"记录 stellar 动态友链的详细设置过程。 一. Fork 仓库|开启 Issue&amp;Action|开启读写权限 Github仓库目录：https://github.com/xaoxuu/issues-json-generator/fork 具体操作： 点击fork项目 ➡️ 名称设为friends➡️ 任务栏点击settings下滑到issue点击勾选√，此时任务栏出现Issue➡️ 点击任务栏Aciton，点击i understand。 ➡️ 点击任务栏settings，左侧选择Action下的【General】，下滑到【Workflow Permissions】，勾选读写权限**Read and write permissions** 。 二. 配置 Label 标签|修改 config.yml 点击任务栏Issue➡️ 点击Label➡️ 删除现有标签，新增并保留以下四个标签：active、suspend、404、checklist。 点击任务栏【code】➡️ 点击进入config.yml文件，点击铅笔符号修改内容。 三. 测试是否成功 点击 issue ➡️New issue➡️ Get Started➡️ 填入你的基本信息，label 设置为 &#96;&#96;active➡️submit new issue&#96;提交。 添加后，等待一会，点击任务栏【code】进入output分支，查看【v2】目录下的data.json文件，出现刚才新建的 issue 内容则设置成功。 四. 具体使用 Stellar 作者原教程：https://xaoxuu.com/wiki/stellar/tag-plugins/data/#friends-%E5%8F%8B%E9%93%BE其他参考文章：https://zfe.space/post/python-issues-api.html 在文档中直接引用写入以下代码即可： 123&#123;% friendsapi:https://api.vlts.cc/output_data/v2/你的github用户名/你的github仓库名 %&#125;#示例： &#123;% friends api:https://api.vlts.cc/output_data/v2/sumorio/friends %&#125;"},{"title":"Stellar主题黑白模式切换","path":"/wiki/Hexo/202Theme-black-white-switch.html","content":"修改思路 抽离夜间样式 增加 CSS 文件优先级 网页添加主题按钮 1）抽离夜间样式 前提 1：原主题配置文件控制昼夜是通过style.darkmode: false # auto / always / false来控制 stylus 生成整个网站main.css； 前提 2：主题样式代码中if hexo-config(&#39;style.darkmode&#39;) == &#39;always&#39;包裹的就是夜间主题代码； 结论：我们把它抽离出一个单独的ZYDark.css文件。 2）增加 CSS 文件优先级 通过给 html 标签一个 ID 来取得优先级, 抽离的ZYDark.css都赋予这个 ID.比如:root&#123;--site-bg: #1c1e21;&#125;变成#ZYDark:root&#123;--site-bg: #1c1e21;&#125; 3）网页添加主题按钮想了很多种方案都达不到主题样式一致原则. 最后发现 stellar 左下角页脚部分有 7 个位置。 就拿他来当切换按钮吧! 4）储存与功能实现用户变量就扔到localStorage储存,反正不清空浏览器缓存就是永久储存. 功能实现函数操作全都是一个 JS 执行, 包括给 html 标签一个 ID. 5）黑夜闪白优化因为一些渲染顺序原因这个 js 只能放到网页靠末尾地方, 可能不是控制主题功能我还有其它功能方法, 所以结果是黑暗模式下刷新有点闪白色. 解决办法是在 head 引入一个提前 js,即判断localStorage是黑暗就马上给 html 加黑色 ID, 后续渲染就没问题了!!! 代码样式复制以下代码并重命名为 ZYDark.css，放至本地路径&#x2F;blog&#x2F;source&#x2F;custom&#x2F;css 下。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155#ZYDark:root &#123; --site-bg: #1c1e21; --card: #373d43; --block: #26292c; --block-border: #383d42; --block-hover: #2f3337; --text-p0: #fff; --text-p1: #ccc; --text-p2: #b3b3b3; --text-p3: #858585; --text-p4: #707070; --text-meta: #4d4d4d; --text-code: #ff6333;&#125;@media screen and (max-width: 667px) &#123; #ZYDark:root &#123; --site-bg: #000; &#125;&#125;#ZYDark:root &#123; --blur-bg: rgba(0,0,0,0.5);&#125;#ZYDark .float-panel &#123; --blur-bg: rgba(0,0,0,0.4);&#125;#ZYDark .tag-plugin.tag &#123; --theme: #ff6333; --theme-bg1: #3d1e14; --theme-bg2: #2f2522; --theme-border: #5c2d1f; --text-p0: #ffc4b3; --text-p1: #dfae9f; --text-p2: #f1997e;&#125;#ZYDark .tag-plugin[color=&#x27;red&#x27;] &#123; --theme: #f44336; --theme-bg1: #3d1714; --theme-bg2: #2f2322; --theme-border: #5c231f; --text-p0: #ffb8b3; --text-p1: #dfa49f; --text-p2: #f1867e;&#125;#ZYDark .tag-plugin[color=&#x27;orange&#x27;] &#123; --theme: #fa6400; --theme-bg1: #3d2514; --theme-bg2: #2f2722; --theme-border: #5c371f; --text-p0: #ffd1b3; --text-p1: #dfb99f; --text-p2: #f1ac7e;&#125;#ZYDark .tag-plugin[color=&#x27;yellow&#x27;] &#123; --theme: #ffbd2b; --theme-bg1: #3d3014; --theme-bg2: #2f2b22; --theme-border: #5c491f; --text-p0: #ffe7b3; --text-p1: #dfcb9f; --text-p2: #f1cd7e;&#125;#ZYDark .tag-plugin[color=&#x27;green&#x27;] &#123; --theme: #3dc550; --theme-bg1: #143d1a; --theme-bg2: #222f24; --theme-border: #1f5c27; --text-p0: #b3ffbd; --text-p1: #9fdfa8; --text-p2: #7ef18e;&#125;#ZYDark .tag-plugin[color=&#x27;cyan&#x27;] &#123; --theme: #1bcdfc; --theme-bg1: #14353d; --theme-bg2: #222d2f; --theme-border: #1f4f5c; --text-p0: #b3efff; --text-p1: #9fd2df; --text-p2: #7ed9f1;&#125;#ZYDark .tag-plugin[color=&#x27;blue&#x27;] &#123; --theme: #2196f3; --theme-bg1: #142b3d; --theme-bg2: #222a2f; --theme-border: #1f415c; --text-p0: #b3ddff; --text-p1: #9fc3df; --text-p2: #7ebef1;&#125;#ZYDark .tag-plugin[color=&#x27;purple&#x27;] &#123; --theme: #9c27b0; --theme-bg1: #37143d; --theme-bg2: #2d222f; --theme-border: #531f5c; --text-p0: #f4b3ff; --text-p1: #d69fdf; --text-p2: #e07ef1;&#125;#ZYDark .tag-plugin[color=&#x27;light&#x27;] &#123; --theme-border: #fff; --theme-bg1: #e0e0e0; --theme-bg2: #fff; --text-p0: #000; --text-p1: #111; --text-p2: #1f1f1f; --text-p3: #555; --text-code: #fff;&#125;#ZYDark .tag-plugin[color=&#x27;dark&#x27;] &#123; --theme-border: #000; --theme-bg1: #1f1f1f; --theme-bg2: #111; --text-p0: #fff; --text-p1: #fff; --text-p2: #e0e0e0; --text-p3: #ddd; --text-code: #fff;&#125;#ZYDark .tag-plugin[color=&#x27;warning&#x27;],#ZYDark .tag-plugin[color=&#x27;light&#x27;] &#123; --text-p0: #000; --text-p1: #111; --text-p2: #1f1f1f; --text-p3: #555; --text-code: #fff;&#125;#ZYDark .social-wrap a.social:hover &#123; box-shadow: none;&#125;/* waline评论样式 */#ZYDark .wl-count&#123; padding: .375em; font-weight: bold; font-size: 1.25em; color: #fff;&#125;#ZYDark .cmt-body.waline&#123; --waline-white: #000; --waline-light-grey: #666; --waline-dark-grey: #999; /* 布局颜色 */ --waline-color: #fff; --waline-bgcolor: var(--block); --waline-bgcolor-light: #272727; --waline-border-color: #333; --waline-disable-bgcolor: #444; --waline-disable-color: #272727; /* 特殊颜色 */ --waline-bq-color: #272727; /* 其他颜色 */ --waline-info-bgcolor: #272727; --waline-info-color: #666;&#125; 函数复制以下代码并重命名为 ZYDark.js，放至本地路径&#x2F;blog&#x2F;source&#x2F;custom&#x2F;js 下。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455/** * 监听系统主题 * @type &#123;MediaQueryList&#125; */var OSTheme = window.matchMedia(&#x27;(prefers-color-scheme: dark)&#x27;);OSTheme.addListener(e =&gt; &#123; if (window.localStorage.getItem(&#x27;ZYI_Theme_Mode&#x27;) === &#x27;Moss&#x27;) &#123; ThemeChange(&#x27;Moss&#x27;); &#125;&#125;)/** * 修改博客主题 * @param theme 亮为light,暗为dark,自动为auto * @constructor */const ThemeChange = (theme) =&gt; &#123; if (theme === &#x27;light&#x27; || (theme === &#x27;Moss&#x27; &amp;&amp; !OSTheme.matches)) &#123; document.querySelector(&quot;html&quot;).id = &quot;ZYLight&quot;; document.querySelector(&quot;#start &gt; aside &gt; footer &gt; div &gt; a:nth-child(6)&quot;).style.filter= &#x27;grayscale(0%)&#x27;; document.querySelector(&quot;#start &gt; aside &gt; footer &gt; div &gt; a:nth-child(5)&quot;).style.filter= &#x27;grayscale(100%)&#x27;; &#125; else &#123; document.querySelector(&quot;html&quot;).id = &quot;ZYDark&quot;; document.querySelector(&quot;#start &gt; aside &gt; footer &gt; div &gt; a:nth-child(5)&quot;).style.filter= &#x27;grayscale(0%)&#x27;; document.querySelector(&quot;#start &gt; aside &gt; footer &gt; div &gt; a:nth-child(6)&quot;).style.filter= &#x27;grayscale(100%)&#x27;; &#125; if (theme===&#x27;Moss&#x27;)&#123;document.querySelector(&quot;#start &gt; aside &gt; footer &gt; div &gt; a:nth-child(7)&quot;).style.filter= &#x27;grayscale(0%)&#x27;;&#125; else &#123;document.querySelector(&quot;#start &gt; aside &gt; footer &gt; div &gt; a:nth-child(7)&quot;).style.filter= &#x27;grayscale(100%)&#x27;;&#125; window.localStorage.setItem(&#x27;ZYI_Theme_Mode&#x27;, theme);&#125;/** * 初始化博客主题 */switch (window.localStorage.getItem(&#x27;ZYI_Theme_Mode&#x27;)) &#123; case &#x27;light&#x27;: ThemeChange(&#x27;light&#x27;); break; case &#x27;dark&#x27;: ThemeChange(&#x27;dark&#x27;); break; default: ThemeChange(&#x27;Moss&#x27;);&#125;/** * 切换主题模式 */document.querySelector(&quot;#start &gt; aside &gt; footer &gt; div &gt; a:nth-child(5)&quot;).onclick = () =&gt; &#123; ThemeChange(&#x27;dark&#x27;);&#125;document.querySelector(&quot;#start &gt; aside &gt; footer &gt; div &gt; a:nth-child(6)&quot;).onclick = () =&gt; &#123; ThemeChange(&#x27;light&#x27;);&#125;document.querySelector(&quot;#start &gt; aside &gt; footer &gt; div &gt; a:nth-child(7)&quot;).onclick = () =&gt; &#123; ThemeChange(&#x27;Moss&#x27;);&#125; 提前量根目录&#x2F;_config.yml 12345678910# 自定义引入css,jsinject: head: - | &lt;script&gt; if (window.localStorage.getItem(&#x27;ZYI_Theme_Mode&#x27;)===&#x27;dark&#x27; || (window.localStorage.getItem(&#x27;ZYI_Theme_Mode&#x27;)===&#x27;Moss&#x27; &amp;&amp; window.matchMedia(&#x27;(prefers-color-scheme: dark)&#x27;).matches))&#123; document.querySelector(&quot;html&quot;).id = &quot;ZYDark&quot;; &#125; &lt;/script&gt; 引入样式与函数博客目录&#x2F;_config.yml 123456# 自定义引入css,jsinject: head: - &lt;link rel=&quot;stylesheet&quot; href=&quot;/custom/css/ZYDark.css&quot;&gt; # 黑夜样式 script: - &lt;script type=&quot;text/javascript&quot; src=&quot;/custom/js/ZYDark.js&quot;&gt;&lt;/script&gt; # 黑夜控制 自定义博主配置 darkmode用false意味对主题而言保持永远白昼(才有了我们的操作空间) 然后footer.social这部分我对应是 567, 懒得改 JS 的可以前面也加四个社交按钮. 博客目录&#x2F;_config.stellar.yml 123456789101112131415161718192021222324252627style: darkmode: false # auto / always / false# 页尾footer: social: github: icon: &#x27;&lt;img src=&quot;https://upyun.thatcdn.cn/public/img/icon/github-logo2.png&quot;/&gt;&#x27; url: https://github.com/ThatCoders music: icon: &#x27;&lt;img src=&quot;https://upyun.thatcdn.cn/public/img/icon/neteasemusic-icon.png&quot;/&gt;&#x27; url: https://music.163.com/#/user/home?id=134968139 bili: icon: &#x27;&lt;img src=&quot;https://upyun.thatcdn.cn/public/img/icon/bilibili-icon.png&quot;/&gt;&#x27; url: https://space.bilibili.com/1664687779 card: icon: &#x27;&lt;img src=&quot;https://upyun.thatcdn.cn/public/img/icon/weChat.png&quot;/&gt;&#x27; url: https://muselink.cc/naive Moon: icon: &#x27;&lt;img id=&quot;ThemeM&quot; src=&quot;https://upyun.thatcdn.cn/public/img/icon/Moon.png&quot;/&gt;&#x27; url: javaScript:void(&#x27;永夜&#x27;); Sun: icon: &#x27;&lt;img id=&quot;ThemeL&quot; src=&quot;https://upyun.thatcdn.cn/public/img/icon/Sun.png&quot;/&gt;&#x27; url: javaScript:void(&#x27;永昼&#x27;); AI: icon: &#x27;&lt;img id=&quot;ThemeAI&quot; src=&quot;https://upyun.thatcdn.cn/public/img/icon/AI.png&quot;/&gt;&#x27; url: javaScript:void(&#x27;跟随系统&#x27;); 感谢 本文参考钟意的博客。此文用于记录。在此感谢原作者。"},{"title":"Stellar文档系统 | 侧边栏设置","path":"/wiki/Hexo/303filesystem-sidebar.html","content":"记录 Stellar 主题下的 wiki 文档系统的侧边栏设置。(1.20 后的版本已不支持) 文档系统中有项目需要新增时，总共需要进行三个步骤：➡️ 配置source/_data/projects.yml.➡️ 在source/wiki/目录下新建文件夹（名称随意），该目录下创建文章。➡️ 配置index.md文件的头文件front-matter部分。 假设我们要创建一个名为“GPT 漫游”的新项目。在这个项目中，我们将设置一个结构化的侧边栏，它将被分为四个主要部分：教程、工具、前线和其他。这样的布局旨在为访问者提供清晰的导航，使他们可以轻松找到相关的文章和资源。 一. 配置 projects.yml➡️ 配置source/_data/projects.yml。➡️ ChatGPT-File 为本次项目的 ID，可以随意起名，但是保证唯一。➡️ Sections 相当于文档分类器，这里可以自行设置区间|自行命名，这将影响前端的侧边栏文字展示和文章归属。 1234567891011121314151617#专栏-ChatgptChatGPT-File: #ID，用英文起名，随意起但是唯一 title: GPT漫游 #wiki文档系统列表中的项目名称 description: Hi，我是Sumorio。本文档致力于记录Chatgpt及其相关的一切。 #wiki文档系统列表中的项目介绍 name: ChatGPT项目 #侧边栏左上角名称 subtitle: &quot;探索关于GPT的一切可能。| Designed by Sumorio。&quot; #大标题下的小标题 sidebar: [toc] tags: ChatGPT #项目标签 logo: src: https://s2.loli.net/2023/10/20/tw8yrHvR31qfQm2.jpg #图片 small: 120px large: 240px sections: #区间自行设置，保证区间不要重合 &quot;🏳️‍🌈ChatGPT教程&quot;: [100, 199] &quot;🏳️‍🌈ChatGPT工具&quot;: [200, 299] &quot;🏳️‍🌈ChatGPT前线&quot;: [300, 399] &quot;🏳️‍🌈其他相关&quot;: [400, 499] 二. 新增文件➡️ source/wiki/目录下新建文件夹 ChatGPT（名称随意），需要添加新文档时在该目录下创建文件。 三. 配置 front-matter这里以文档 101test 为例： ➡️ 配置index.md文件的头文件front-matter部分。➡️ order 的值用来对文章归类，想让文章归属哪个分类就把 ID 设置成相应值。➡️ wiki 的值为 projects.yml 中项目的唯一 ID。➡️ menu 见下文。 123456789101112131415layout: wiki #layout 的值固定为wiki，与第二项一同作用于侧边栏，如果没有它们侧边栏也会消失wiki: ChatGPT-File # wiki 的值等于在source/_data/projects.yml中新增的项目ID名称（唯一）title: 101test # 这里title的值就是页面最终呈现的折叠标签名menu_id: wiki #与主题配置的menu_id一致,见下文order: 101# order的值的作用就是将它定义到上个步骤里创建的分组里。# 上一步我在source/_data/projects.yml将[100,199]这个区间赋予给了【ChatGPT教程】，我这里的order的值是101。# 101在100至199这个区间内，所以页面最终的效果就是把文章归类到【ChatGPT教程】这个分组，其他同样，只需要修改文章title和order的值。breadcrumb: false# 表示本页面不显示顶部导航，如果你需要显示的话，把这一行删除即可comments: false#表示本页面不启用评论版块，需要启用评论板块的话把值改成true 四. Menu_id Menu_id 位于配置文件_config.stellar.yml的Sidebar下的menu下，post,wiki,more,friends就是menu_id,在写文章时，我们需要在front_matter部分填写对应的menu_id. Stellar 同时具有博客和 Wiki 两个大模块，为了能够正确进行导航栏高亮，所以引入了menu_id 来进行区分，通常情况下，layout: post 和 layout: wiki 两种布局模板可以自动为 sidebar.menu.post 和 sidebar.menu.wiki 的导航栏按钮高亮。自己创建的独立页面也可以在 front-matter 中指定 menu_id 来使某个按钮处于选中状态。"},{"title":"Hexo-Stellar 展示豆瓣影评|书评|乐评","path":"/wiki/Hexo/304stellar+douban.html","content":"引入hexo-douban插件，实现在个人博客展示豆瓣电影评论、书评、音乐评论等。 获取豆瓣ID进入豆瓣主页——打开【我的广播】——鼠标右键点击检查进入【开发者模式】——鼠标任意点击一个广播条目——在开发者后台中找到data-uid字段，就是豆瓣用户ID-纯数字。 安装插件在Git Bash客户端中运行命令： npm install hexo-douban --save 配置将下面的配置写入站点的配置文件 _config.yml . (不是主题的配置文件). 12345678910111213141516douban: id: 改成你的ID #这个需要修改为你个人的id dynamic: false item_per_page: 30 meta_max_line: 5 customize_layout: page builtin: true #如果想生成豆瓣页面，这个需要设置为true movie: title: &#x27;豆瓣观影&#x27; quote: &#x27;电影是第一个让人类知道自己是谁的艺术。&#x27; path: /movie/index.html #生成的网页路径，定义成你自己的路径 book: title: &#x27;豆瓣阅读&#x27; quote: &#x27;读书忌死读，死读钻牛角。&#x27; path: /book/index.html #生成的网页路径，定义成你自己的路径 timeout: 10000 使用显示帮助文档在Git Bash客户端中运行命令： hexo douban -h 注释：选择自己需要的参数即可 -b, –books Generate douban books only 书 -g, –games Generate douban games only 游戏 -m, –movies Generate douban movies only 电影 -s, –songs Generate douban songs only 音乐 启动生成在Git Bash客户端中运行命令： hexo clean &amp;&amp; hexo douban -bm &amp;&amp; hexo g &amp;&amp; hexo s 为了展示这里用-bm，仅生成书和影的页面。如果不加参数，那么默认参数为-bgms，生成四个页面。 测试访问如果上面的配置都没有问题，就可以使用localhost:4000+你设置的网页地址，浏览器访问网址，可以访问代表设置成功。 12http://localhost:4000/book/http://localhost:4000/movie/ 部署如果你是hexo-stellar主题，可以在_config.stellar.yml文件中配置菜单链接，展示豆瓣电影和书籍的页面。 12345678910# 侧边栏主功能导航菜单menubar: columns: 5 # 一行多少个 items: # 可按照自己需求增加，符合以下格式即可 - id: movie theme: &#x27;#1e6150&#x27; icon: solar:documents-bold-duotone title: Movie url: /movie/ ... 其他需要注意的是，通常大家都喜欢用hexo d来作为hexo deploy命令的简化，但是当安装了hexo douban之后，就不能用hexo d了，因为hexo douban跟hexo deploy 的前缀都是hexo d。 第一次使用 hexo douban 时，后台会异步进行数据获取，一般需要等待一段时间（后台访问你的标记页面）才能查到数据。顺利情况下，平均一个页面会花 10s。 后续如果你的豆瓣数据更新了，hexo douban 同样也会自动进行更新（同样需要等待一段时间才会查到更新数据），不过出于安全考虑，一个用户 id每半小时至多只会同步一次。 由于豆瓣本身深分页的 RT 过高（上万条目的翻页 RT 会到 15s 到 60s），为了防止系统同步压力过大，每个用户的每一类条目最多只会同步 1w 条。 如果 dynamic 设置为 true，则每次访问页面时都会向后端自动发起更新请求，无需手动执行 hexo douban 命令。 官方文档hexo-douban"},{"title":"Hexo-Stellar主题美化","path":"/wiki/Hexo/201Webpage-beautification.html","content":"Stellar 主题全面的配置文档可参考源码作者：Xaoxuu 修改站点信息Stellar 会读取站点根目录_config.yml 文件中的信息来生成网站，直接修改即可： _config.yml12345678title: 您的网站名称avatar: 您的头像链接favicon: 您的网站iconsubtitle: 您的网站副标题# 多语言language: - zh-CN - en 创建主题配置文件 在博客根目录的 _config.yml 文件同目录中新建一个文件： _config.stellar.yml ；在这个文件中的配置信息优先级高于主题文件夹中的配置文件。 字体设置 第一步：_config.yml 文件中，最后一行加入以下指令： _config.yml1234567inject: head: -( &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.staticfile.org/lxgw-wenkai-screen-webfont/1.6.0/lxgwwenkaiscreen.css&quot; media=&quot;all&quot; /&gt;); 第二步：在_config.stellar.yml 中找到 style.font-family，修改以下内容： _config.stellar.yml1234style: font-family: logo: &#x27;&quot;LXGW WenKai Screen&quot;, ... body: &#x27;&quot;LXGW WenKai Screen&quot;, ... 添加运行时间 第一步：_config.stellar.yml 文件下，找到 footer ,在 content: 之后添加代码。 第二步：修改 X 部分的时间，改成自己网站成立的年月日即可。 _config.stellar.yml123456789101112131415161718192021222324 content: | # 支持 Markdown 格式 &lt;center&gt; &lt;/br&gt; &lt;/br&gt; &lt;script type=&quot;text/javascript&quot;&gt; function show_runtime() &#123; window.setTimeout(&quot;show_runtime()&quot;, 1000); X = new Date(&quot;10/20/2023 00:00:00&quot;); Y = new Date(); T = (Y.getTime() - X.getTime()); M = 24 * 60 * 60 * 1000; a = T / M; A = Math.floor(a); b = (a - A) * 24; B = Math.floor(b); c = (b - B) * 60; C = Math.floor((b - B) * 60); D = Math.floor((c - C) * 60); runtime_span.innerHTML = &quot;⏲️本站已运行 &quot; + A + &quot;天|&quot; + B + &quot;小时|&quot; + C + &quot;分|&quot; + D + &quot;秒⏲️&quot; &#125; show_runtime(); &lt;/script&gt; &lt;span id=&quot;runtime_span&quot;&gt;&lt;/span&gt; &lt;/center&gt; 代码块复制在_config.stellar.yml 修改： _config.stellar.yml12345copycode: enable: true js: /js/plugins/copycode.js default_text: &#x27;Copy&#x27; # 按钮显示文字 success_text: &#x27;Copied&#x27; # 复制成功信息 添加背景动态线条效果在 layout.ejs 的&lt;body&gt;里添加代码：最好用系统自带的记事本打开 /theme/stellar/layout.ejs1234&lt;!--动态线条背景--&gt;&lt;script type=&quot;text/javascript&quot; color=&quot;220,220,220&quot; opacity=&#x27;0.7&#x27; zIndex=&quot;-2&quot; count=&quot;200&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt; 12341.`color`：线条颜色，三个数字分别为(R,G,B)，默认：（0,0,0）;2.`opacity`：线条透明度（0~1），默认：0.5;3.`count`：表示线条的总数量，默认：150;4.`zIndex`：表示背景的 z-index 属性，css 属性用于控制所在层的位置，默认：-1; 主题版本更新方法一 在 package.json 中修改 stellar 的版本号，然后执行： 1npm i 阅读 更新日志 进行迁移操作。 方法二，如果需要下载最新版： 进入/blog/themes/文件，启动 git bash, 执行命令。下载最新版的主题，删除旧版本 /blog/themes/1git submodule add https://github.com/xaoxuu/hexo-theme-stellar.git themes/stellar 进入主题文件&#x2F;themes&#x2F;stellar&#x2F;, 启动 git bash，执行命令。 /themes/stellar/1git pull 文章页顶部导航栏 修改配置文件_config.stellar.yml,添加标题和文件链接： _config.stellar.yml123456######## Index ######### 顶部检索栏post-index: # 近期发布 分类 标签 归档 and ... &quot;专栏&quot;: /wiki/ #点击到网页复制路径 &quot;博客搭建&quot;: /wiki/Hexo/1.Hexo之环境部署.html # 这里填写的链接要与对应页面一致，否则可能无法正确高亮 &quot;ChatGPT&quot;: /wiki/ChatGPT/ #可以跳转至页面之后，复制绝对路径 这时，首页导航栏中将出现我们添加的页面 侧边栏欢迎语 侧边栏支持使用 markdown 语法，markdown 支持 HTML 语言，可以通过 HTML 自定义各种样式的侧边栏. 在主题文件目录下的_data&#x2F;widgets.yml 文件中新增一项侧边栏配置，写下你的网站欢迎语. 可以引用开放接口，如【今日诗词】. _data/widgets.yml12345678welcome: layout: markdown title: &#x27;🎉欢迎 &#x27; content: | 本站托管于Github, 可能会出现加载缓慢或丢失问题，欢迎在评论区交流技术知识。 &lt;br&gt;&lt;hr&gt; 今日诗词: &lt;span id=&quot;jinrishici-sentence&quot;&gt;&lt;/span&gt; &lt;script src=&quot;https://sdk.jinrishici.com/v2/browser/jinrishici.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt; 修改主题配置_config.stellar.yml，设置欢迎语出现的具体位置 _config.stellar.yml1234widgets: #### 自动生成的页面 #### # 主页 home: search, welcome, recent, tagcloud, timeline # for home 侧边栏免责声明主题文件目录下的_data&#x2F;wodgets.yml 文件中新增一项侧边栏配置，使用 markdown 布局 _data/wodgets.yml123456789101112statement: layout: markdown title: &#x27;&lt;br&gt;&#x27; content: | &lt;hr&gt; &lt;center&gt; &lt;h4 id=&quot;免责声明&quot;&gt;免责声明&lt;/h4&gt; &lt;p&gt;本站提供的一切软件、教程和内容信息仅限用于学习和研究目的。&lt;/p&gt; &lt;p&gt;不得将上述内容用于商业或非法用途，否则一切后果自负。&lt;/p&gt; &lt;p&gt;本站信息来自网络收集整理，版权争议与本站无关。&lt;/p&gt; &lt;p&gt;如果有侵权之处请第一时间联系站长删除。敬请谅解!&lt;/p&gt; &lt;/center&gt; 永久链接插件永久链接指用一串随机字符替代文章名作为网页访问链接，这样即使修改文章名称也不会改变文章访问链接，有助于网站 SEO 优化 在项目根路径下安装永久链接插件 1npm install hexo-abbrlink --save 修改_config.yml中的配置，启用永久链接 _config.yml1permalink: posts/:abbrlink.html 配置文件底部添加如下配置，可以实现更优算法生成永久链接 _config.yml1234567891011121314# abbrlink 配置abbrlink: alg: crc32 #算法，支持crc16(default)和crc32 rep: hex #进制，支持dec(default)和hex drafts: false #true：对草稿也进行处理，false：不处理草稿。默认为false # 从目录树生成类别 # depth: 您想生成的目录树的最大深度, 需要大于0 auto_category: enable: true #默认为 true depth: #默认为 3 over_write: false auto_title: false #启用自动标题，它可以按路径自动填充标题 auto_date: false #启用自动日期，可以按今天的时间自动填写日期 force: false #启用Force模式，在这种模式下插件将忽略缓存，并为每一篇文章计算生成永久链接，即使它已经有了永久链接。这个设置只会更新永久链接，而不是更新其他前置变量。 在生成静态页面时，插件会自动在 Markdown 文件头部生成永久链接参数 1234---title: Hello Worldabbrlink: 4a17b156--- 重新生成网页发布后，网页访问链接就变成了..&#x2F;&#x2F;xx.com&#x2F;posts&#x2F;4a17b156.html 的格式。 创建自定义 CSS source目录下新建文件夹css，在 CSS 目录下新建我们自定义文件 my.css 博客配置文件_config.yml中引入 CSS 文件，CSS 文件一般在head引入，JS 文件一般在script里引入 _config.yml123456789inject: head: # 自定义css，静态文件后面加个&quot;?任意内容&quot;，可以在每次更新之后用户自动重新请求，避免用户使用本地缓存 - &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/my.css?1&quot;&gt; script: # 自定义js - &lt;script type=&quot;text/javascript&quot; src=&quot;/js/script.js?1&quot;&gt;&lt;/script&gt; - &lt;script src=&quot;/js/script.js?1&quot;&gt;&lt;/script&gt; 添加评论功能目前 Staller 主题集成多种评论功能插件，包括 beaudar、utterances、giscus、twikoo、waline、artalk。今日来探讨 twikoo. 配置 twikoo 云函数，参考如下链接。 教程过长，参考我的另一篇文章：Hexo 部署 twikoo 评论系统 Twikoo 官网参考 在博客配置文件_config.stellar.yml中启用 twikoo 评论 _config.stellar.yml12345678910######## Comments ########comments: service: twikoo # Twikoo # https://twikoo.js.org/ twikoo: js: https://gcore.jsdelivr.net/npm/twikoo@1.6.8/dist/twikoo.all.min.js # 建议锁定版本 envId: https://xx.xx.com # twikoo云函数 评论功能目前已配置成功。如果需要在 page 或 post 文件头部显示，可以添加comments字段指定该页面启用评论。 123---comments: true--- 在 twikoo 管理面板中通过DEFAULT_GRAVATAR参数可以设置评论默认使用的头像类型，具体有如下几类: 给评论添加输入提示框，在我们前面创建的自定义 CSS 文件中插入如下代码: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859/* 设置文字内容 :nth-child(1)的作用是选择第几个 */.el-input.el-input--small.el-input-group.el-input-group--prepend:nth-child(1):before &#123; content: &#x27;输入QQ号会自动获取昵称和头像🐧&#x27;;&#125;.el-input.el-input--small.el-input-group.el-input-group--prepend:nth-child(2):before &#123; content: &#x27;收到回复将会发送到您的邮箱📧&#x27;;&#125;.el-input.el-input--small.el-input-group.el-input-group--prepend:nth-child(3):before &#123; content: &#x27;可以通过昵称访问您的网站🔗&#x27;;&#125;/* 当用户点击输入框时显示 */.el-input.el-input--small.el-input-group.el-input-group--prepend:focus-within::before,.el-input.el-input--small.el-input-group.el-input-group--prepend:focus-within::after &#123; display: block;&#125;/* 主内容区 */.el-input.el-input--small.el-input-group.el-input-group--prepend::before &#123; /* 先隐藏起来 */ display: none; /* 绝对定位 */ position: absolute; /* 向上移动60像素 */ top: -60px; /* 文字强制不换行，防止left:50%导致的文字换行 */ white-space: nowrap; /* 圆角 */ border-radius: 10px; /* 距离左边50% */ left: 50%; /* 然后再向左边挪动自身的一半，即可实现居中 */ transform: translate(-50%); /* 填充 */ padding: 14px 18px; background: #444; color: #fff;&#125;/* 小角标 */.el-input.el-input--small.el-input-group.el-input-group--prepend::after &#123; display: none; content: &#x27;&#x27;; position: absolute; /* 内容大小（宽高）为0且边框大小不为0的情况下，每一条边（4个边）都是一个三角形，组成一个正方形。 我们先将所有边框透明，再给其中的一条边添加颜色就可以实现小三角图标 */ border: 12px solid transparent; border-top-color: #444; left: 50%; transform: translate(-50%, -48px);&#125;/* 带链接的用户名显示为红色 */.tk-nick.tk-nick-link &#123; color: #f56c6c!important;&#125; 项目标签彩色更改进入_config.stellar.yml 文件，更改 article 中的 category 标签： _config.stellar.yml123456789article: # 分类颜色 category_color: &quot;探索号&quot;: &quot;#4CB9E7&quot; &quot;博客搭建&quot;: &quot;#4CB9E7&quot; &quot;Hexo&quot;: &quot;#FF004D&quot; &quot;ChatGPT&quot;: &quot;#43766C&quot; &quot;绘画&quot;: &quot;#11009E&quot; &quot;前端&quot;: &quot;#F08A5D&quot; 侧边栏时间线新增假设我们需要在主页和专栏的文章内页侧边栏处，分别新增主题更新进度的时间线，需要三步。 1.在/source/data/widgets.yml中新增主题进度时间线标签 2.将新增的时间线标签，填写于/source/wiki/项目名.yml的配置中 3.将新增的时间线标签，填写至_config.stellar.yml的配置中&#x2F;source&#x2F;data&#x2F;widgets.yml 添加： 12345release_update: layout: timeline title: 主题更新 api: https://api.github.xaox.cc/repos/xaoxuu/hexo-theme-stellar/releases?per_page=1 user: xaoxuu /source/wiki/项目名.yml1234widgets: #### 自动生成的页面 #### # 主页-文章 home: search,welcome-other,recent,tagcloud,release_update _config.stellar.yml1sidebar: -search - toc - release_update; 新增 memos 说说功能想要实现 memos 功能，首先需要注册一个账号。注册账号可以使用别人已经搭建好的 memos，也可以自行搭建 memos（需要有服务器，我就不折腾了）。这里直接采用的杜老师的 memos。 点击进入https://dusays.com/561/ 查看教程，注册一个自己的账号。 登录账号，个人资料点击 RSS，https://s.dusays.com/u/87/rss.xml，网址中U后面的数字就是自己的ID。 如果需要在 hexo-stellar 的侧边栏 sidebar 中展示 memos，首先在&#x2F;source&#x2F;_data&#x2F;widgets.yml 中新增一条记录，然后在相应页面的 sidebar 部分新增配置。 /source/_data/widgets.yml123456memos-du: layout: timeline title: 说说 api: https://s.dusays.com/api/v1/memo?creatorId=87 type: memos hide: user,footer 如果需要在 hexo-stellar 的文章正文展示 memos，在正文任意位置新增以下代码。 ***.md12&#123;% timeline api:https://s.dusays.com/api/v1/memo?creatorId=87&amp;limit=10 type:memos avatar:https://s2.loli.net/2023/10/20/7okY5AhfK6LCn8q.jpg %&#125;&#123;% endtimeline %&#125; 修改“开始使用”按钮颜色找到themes/stellar/css/common/button.styl 文件。修改其中的a.button.start的backgroud颜色。 二级标题去除“：”md.styl文件中，配置h2 a.headerlink:before content: &#39;&#39; 随机文章跳转 创建 themes/stellar/scripts/helpers/random.js ，增加以下代码： 123456789hexo.extend.filter.register(&#x27;after_render:html&#x27;, function (data) &#123; const posts = [] hexo.locals.get(&#x27;posts&#x27;).map(function (post) &#123; if (post.random !== false) posts.push(post.path) &#125;) data += `&lt;script&gt;var posts=$&#123;JSON.stringify(posts)&#125;;function toRandomPost()&#123; window.pjax ? pjax.loadUrl(&#x27;/&#x27;+posts[Math.floor(Math.random()*posts.length)]) : window.open(&#x27;/&#x27;+posts[Math.floor(Math.random()*posts.length)], &quot;_self&quot;); &#125;;&lt;/script&gt;` return data&#125;) _config.yml文件中引入 js文件 ，增加以下代码： 1- &lt;script src=&quot;/js/random.js&quot;&gt;&lt;/script&gt; # 随机文章 需要时调用，2种执行方法，均toRandomPost () 函数。 12345#使用按钮实现跳转：&lt;button onclick=&quot;toRandomPost()&quot;&gt;随机阅读一篇文章&lt;/button&gt;#使用链接实现跳转：&lt;a href=&quot;#&quot; onclick=&quot;toRandomPost(); return false;&quot;&gt;随机阅读一篇文章&lt;/a&gt; 字数统计：“发表了x篇文章，共计x字” 安装 hexo-wordcount 插件： 1npm i hexo-wordcount --save 在 themes/stellar/layout/_partial/main/footer.ejs 中，找到以下部分： themes/stellar/layout/_partial/main/footer.ejs12345// footer el += &#x27;&lt;div class=&quot;text&quot;&gt;&#x27; if (content) &#123; el += markdown(content) &#125; 在以上代码后面添加以下代码： 1el += &#x27;&lt;span class=&quot;totalcount&quot;&gt;发表了 &#x27; + site.posts.length + &#x27; 篇文章 · &lt;/span&gt;&lt;span class=&quot;post-count&quot;&gt;总计 &#x27; + totalcount(site) + &#x27; 字&lt;/span&gt;&#x27; 最后代码： 12345678910111213... // footer el += &#x27;&lt;div class=&quot;text&quot;&gt;&#x27; if (content) &#123; el += markdown(content) &#125; // 在这里添加帖子总数 el += &#x27;&lt;span class=&quot;totalcount&quot;&gt;发表了 &#x27; + site.posts.length + &#x27; 篇文章 · &lt;/span&gt;&lt;span class=&quot;post-count&quot;&gt;总计 &#x27; + totalcount(site) + &#x27; 字&lt;/span&gt;&#x27; el += &#x27;&lt;/div&gt;&lt;/footer&gt;&#x27; return el&#125;%&gt;&lt;%- layoutDiv() %&gt; 在自定义 css 里，增加以下代码修改风格： 12345678.post-count &#123; scrollbar-width: none; color: var(--text-p4); &#125;.totalcount &#123; color: var(--text-p4); &#125; 文章卡新增字数统计 找到\\themes\\stellar\\layout\\_partial\\main\\post_list\\post_card.ejs 文件 找到//meta处,代码修改后如下： \\themes\\stellar\\layout\\_partial\\main\\post_list\\post_card.ejs123456789// metael += &#x27;&lt;div class=&quot;meta cap&quot;&gt;&#x27;;el += &#x27;&lt;span class=&quot;cap&quot; id=&quot;post-meta&quot;&gt;&#x27;;el += icon(&#x27;default:calendar&#x27;)// timeel += `&lt;time datetime=&quot;$&#123;date_xml(post.date)&#125;&quot;&gt;$&#123;date(post.date, config.date_format)&#125;&lt;/time&gt;`&lt;!-- 新增字数统计 新增一行--&gt;el += &#x27;&lt;span class=&quot;post-count&quot;&gt;&amp;nbsp;&#x27;+ wordcount(post.content) +&#x27; 字&lt;/span&gt;&#x27;;el += &#x27;&lt;/span&gt;&#x27;; Hexo-Stellar+Twikoo评论展示在侧边栏 新建 twikoo_new.js,在theme&#x2F;source&#x2F;js&#x2F;services&#x2F; 下 _twikoo_new.js1234567891011121314151617181920212223242526272829303132333435363738394041424344utils.jq(() =&gt; &#123; const el = document.querySelector(&#x27;.ds-twikoo&#x27;); utils.onLoading(el); // 加载动画 const api = el.getAttribute(&#x27;api&#x27;); const limit = parseInt(el.getAttribute(&#x27;limit&#x27;)) || 10; const reply = el.getAttribute(&#x27;hide&#x27;) !== &#x27;reply&#x27;; if (!api) return; fetch(api, &#123; method: &quot;POST&quot;, body: JSON.stringify(&#123; &quot;event&quot;: &quot;GET_RECENT_COMMENTS&quot;, &quot;envId&quot;: api, &quot;pageSize&quot;: limit, &quot;includeReply&quot;: reply &#125;), headers: &#123; &#x27;Content-Type&#x27;: &#x27;application/json&#x27; &#125; &#125;) .then(res =&gt; res.json()) .then((&#123; data &#125;) =&gt; &#123; utils.onLoadSuccess(el); // 移除动画 data.forEach((comment, j) =&gt; &#123; let commentText = comment.commentText; if (!commentText || commentText.trim() === &#x27;&#x27;) return; // 跳过空评论 // 转义字符 commentText = commentText.replace(/&amp;/g, &quot;&amp;amp;&quot;).replace(/&lt;/g, &quot;&amp;lt;&quot;).replace(/&gt;/g, &quot;&amp;gt;&quot;).replace(/&quot;/g, &quot;&amp;quot;&quot;).replace(/&#x27;/g, &quot;&amp;#039;&quot;); commentText = commentText.length &gt; 50 ? commentText.substring(0, 50) + &#x27;...&#x27; : commentText; var cell = &#x27;&lt;div class=&quot;timenode&quot; index=&quot;&#x27; + j + &#x27;&quot;&gt;&#x27;; cell += &#x27;&lt;div class=&quot;header&quot;&gt;&#x27;; cell += &#x27;&lt;div class=&quot;user-info&quot;&gt;&#x27;; cell += &#x27;&lt;span&gt;&#x27; + comment.nick + &#x27;&lt;/span&gt;&#x27;; cell += &#x27;&lt;/div&gt;&#x27;; cell += &#x27;&lt;span&gt;&#x27; + new Date(comment.created).toLocaleString(&#x27;zh-CN&#x27;, &#123;month: &#x27;2-digit&#x27;, day: &#x27;2-digit&#x27;, hour: &#x27;2-digit&#x27;, minute: &#x27;2-digit&#x27;, hour12: false&#125;) + &#x27;&lt;/span&gt;&#x27;; cell += &#x27;&lt;/div&gt;&#x27;; cell += &#x27;&lt;a class=&quot;body&quot; href=&quot;&#x27; + comment.url + &#x27;#&#x27; + comment.id + &#x27;&quot;&gt;&#x27;; cell += commentText; cell += &#x27;&lt;/a&gt;&#x27;; cell += &#x27;&lt;/div&gt;&#x27;; $(el).append(cell); &#125;); &#125;) .catch(() =&gt; utils.onLoadFailure(el));&#125;); _config.stellar.yml主题配置文件的 data_services 下引入脚本: _config.stellar.yml1234data_services: ... twikoo: js: /js/services/twikoo_new.js 在 _data/widgets.yml 中创建小组件，使用： _data/widgets.yml1234567new_comment: layout: timeline title: 最新评论 api: https://comment.weekdaycare.cn # 此处为 Twikoo 函数，末尾不要加 / type: twikoo limit: 16 # 限制获取数量，默认为 10 hide: reply # 是否隐藏回复，不填默认不隐藏 随机跳转文章 在themes/stellar/scripts/helpers/random.js创建文件。themes/stellar/scripts/helpers/random.js12345678hexo.extend.filter.register(&#x27;after_render:html&#x27;, function (data) &#123; const posts = [] hexo.locals.get(&#x27;posts&#x27;).map(function (post) &#123; if (post.random !== false) posts.push(post.path) &#125;) data += `&lt;script&gt;var posts=$&#123;JSON.stringify(posts)&#125;;function toRandomPost()&#123; window.pjax ? pjax.loadUrl(&#x27;/&#x27;+posts[Math.floor(Math.random()*posts.length)]) : window.open(&#x27;/&#x27;+posts[Math.floor(Math.random()*posts.length)], &quot;_self&quot;); &#125;;&lt;/script&gt;` return data&#125;) 在主题配置文件 _config.stellar.yml的inject中添加代码引入：_config.stellar.yml1234inject: head: script: - &lt;script src=&quot;/js/random.js&quot;&gt;&lt;/script&gt; # 随机文章 在需要调用的位置执行 toRandomPost () 函数即可。示例2种方式： 添加按钮并随机跳转：&lt;button onclick=&quot;toRandomPost()&quot;&gt;随机阅读一篇文章&lt;/button&gt; 添加链接并随机跳转：&lt;a href=&quot;#&quot; onclick=&quot;toRandomPost(); return false;&quot;&gt;随机阅读一篇文章&lt;/a&gt; 也可以widgets.yml中调用：/source/_data/widgets.yml1234567891011welcome-info: layout: markdown title: &#x27;hello！&#x27; linklist: columns: 1 items: - icon: 图片链接 title: 随机文章 url: &#x27;javascript:toRandomPost()&#x27; content: | &lt;span id=&quot;welcome-info&quot; style=&quot;font-family: LXGW WenKai Screen;&quot;&gt;&lt;/span&gt; 页面底部字数统计 安装 hexo-wordcount 插件：npm i hexo-wordcount --save themes/stellar/layout/_partial/main/footer.ejs 文件中，找到//footer: themes/stellar/layout/_partial/main/footer.ejs12345// footer el += &#x27;&lt;div class=&quot;text&quot;&gt;&#x27; if (content) &#123; el += markdown(content) &#125; 在这一段代码后加上如下： themes/stellar/layout/_partial/main/footer.ejs123el += &#x27;&lt;span class=&quot;totalcount&quot;&gt;共发表 &#x27; + site.posts.length + &#x27; 篇Blog · &lt;/span&gt;&lt;span class=&quot;post-count&quot;&gt;总计 &#x27; + totalcount(site) + &#x27; 字&lt;/span&gt;&#x27; 新建自定义css，可以放在/hexo/source/custom/css/self.css，加入css代码： 1234567891011121314.post-count &#123; scrollbar-width: none; color: var(--text-p4); &#125;.totalcount &#123; color: var(--text-p4); &#125;.page-footer &#123; text-align: center; margin: 0 auto; width: 100%; &#125; 在主题文件_config.yml中引入css文件，才能生效： 123inject: head: - &lt;link rel=&quot;stylesheet&quot; href=&quot;/custom/css/self.css&quot;&gt; 教程来源:宇宙尽头的餐馆 文章面包屑显示字数|阅读时长|标签 找到themes\\stellar\\layout\\_partial\\main\\footer.ejs文件的// 3.left.bottom处，新增代码： themes\\stellar\\layout\\_partial\\main\\footer.ejs12345678910111213141516// 3.left.bottomel += partial(&#x27;dateinfo&#x27;)//新增：字数显示|阅读时长显示el += &#x27;&lt;div class=&quot;flex-row&quot; id=&quot;page-words&quot;&gt;&lt;span style=&quot;padding: 4px;&quot;&gt;本文：&#x27; + wordcount(page.content) + &#x27;字&lt;/span&gt;&lt;span class=&quot;sep updated&quot; style=&quot;padding: 4px;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;text updated&quot; style=&quot;padding: 4px;&quot;&gt;阅读时长：&#x27; + min2read(page.content) + &#x27;分&lt;/span&gt;&lt;/div&gt;&#x27;;//新增：标签显示if (page.layout == &quot;post&quot; &amp;&amp; page.tags &amp;&amp; page.tags.length &gt; 0) &#123; el += &#x27;&lt;div class=&quot;flex-row&quot; id=&quot;tag&quot;&gt;&#x27;; // 将标签容器的创建移动到条件内部 el += &#x27; &lt;span&gt;&amp;nbsp标签：&lt;/span&gt;&#x27;; el += list_categories(page.tags, &#123; class: &quot;cap breadcrumb&quot;, show_count: false, separator: &#x27;&amp;nbsp; &#x27;, style: &quot;none&quot; &#125;); el += &#x27;&amp;nbsp&lt;/div&gt;&#x27;;&#125; 2.在自定义css中新增代码，/hexo/source/custom/css/self.css，加入css代码： /hexo/source/custom/css/self.css12345678910.bread-nav div#page-words span.sep:before &#123; content: &#x27;|&#x27;;&#125;.bread-nav div#page-words span.updated &#123; visibility: hidden;&#125;.bread-nav:hover div#page-words span.updated &#123; visibility: visible;&#125; 教程来源:Thun888","categories":[null]},{"title":"1.2 推理、推理形式及其有效性","path":"/wiki/LogC/1-2.html","content":"半费之讼：古希腊智者普氏与他的学生欧氏进行了著名的半费之讼。他的学生欧氏学成之后，总是不帮人打官司赚钱交学费，普氏决定和他的学生欧氏打官司，要一半学费。 普氏推理： 如果欧氏打赢官司，按照合同他应该给我一半学费，如果欧氏打输官司，按照法律裁决，他应该给我另一半学费，总之，他应该付我一半学费。 欧氏反驳： 如果我打赢这场官司了，按照法庭裁决，我不应该给您另一半学费，如果我打输了官司，根据合同规定，我不应该给您另外一半学费。所以，我不应该给您另外一半学费。 半费之讼其实涉及两个不同的问题： 法律问题：如果你是法官，如何裁决。 普氏的合同撰写有问题，应该在合同中写明，不论学生欧氏毕业后是否赚钱，均应该付费。 逻辑问题：如果你是逻辑学家，如何分析他们的逻辑是否成立。 合同应该是第一位，法庭裁决应该依据合同为准。不应该同时使用合同标准和法律标准来定义裁判结果。"},{"title":"1.1 逻辑的概念","path":"/wiki/LogC/1-1.html","content":"0-为什么学习逻辑学爱因斯坦说：”西方科学的发展是以两个伟大的成就为基础：希腊哲学家发明的形式逻辑体系（在欧几里得几何学中），以及通过系统的实验可能找出因果关系（文艺复兴时期发现）。” 学逻辑学，避免使用道德模式来看待问题，要学习用客观的逻辑模式来看待问题，以理服人，有效沟通。 逻辑学告诉我们：什么样的推理和论证是好的、正确的、安全的、有效的，什么样的推理和论证是不好的，不正确的和无效的，教会我们区分好的推理和论证与坏的推理和论证的标准、规则、程序、方法、教会我们正确的进行推理和论证，识别和反驳错误的推理和论证，等等。 1-1逻辑的词源与词义词源词源：引申于希腊词，音译：罗格斯&#x2F;logos&#x2F;复数形式logoi，其含义有： 一般规律、原理、规则。 言语、命题、说明、解释、论证。 理性、推理能力。 尺度、关系、比例、比率。 价值、分量。 总而言之，罗格斯&#x2F;logos&#x2F;logoi&#x2F;的基本词义为言辞、理性、规律、秩序。明代时期传入中国，清朝末年，严复是将logic翻译为“逻辑”的第一人。 词义词义：现代汉语中，逻辑的语义为： 客观事物的规律，大自然的规律。如 “历史的逻辑决定了人类社会的必然发展。”|”旭日东升，夕阳西下“ 某种理论，观点。如 “只需官家放火，不许百姓点灯，这是哪家的逻辑！” 思维的规律，规则。如 “小红的文章逻辑性很强。”|“小明的说法不合逻辑。” 逻辑学或逻辑知识。如 “逻辑课应该成为必学课程。”|“逻辑好难学。“ 逻辑学有三大源流：古希腊逻辑、古印度逻辑、中国先秦逻辑。只有古希腊逻辑有完整的历史，延续下来，历经古罗马逻辑，欧洲中世纪逻辑，近代逻辑等阶段，直至当代逻辑。 1-2逻辑学概念逻辑学是研究思维和推理的学科，旨在探究正确思考和有效推理的原则和方法。 涉及思想之间的过渡、变换和迁移。 过渡和迁移遵循着一定的次序、结构、程序、方法和原则。 过渡和迁移通常以推理和论证的形式初心。 逻辑学是一门研究推理和论证的科学。 1-3测试题请问：以下例题是否有误？错在哪里？ 题目1：你说谎，杀人犯也说谎，你是杀人犯。我骂杀人犯，我是好人。好人是好的，所以我说的话是不会错的。我的话既然是不会错的，那你就是杀人犯无疑了。错误点：循环论证。利用虚假的前提，进行不正确的推理。反驳点：你走路，狗也走路，你是狗。题目2：去年，6000人死于醉酒；4000人死于开车；500人死于醉酒开车。因此，醉酒开车比单纯的醉酒或者单纯的开车更安全。错误点：应该按照概率来统计，而不是数量。车祸死亡人数中醉酒的人数&#x2F;每年车祸死亡人数题目3：自1950年来，所有的费米子是美国发现的，所有的玻色子都是在欧洲发现的，希格斯粒子是玻色子，所以它不可能在美国被发现。错误点：如果X在过去从来没有出现，那么X永远不再出现。反驳可以用：我以前一直活着，我永远不会死。题目4：半夜，小明十分期待此时是早晨，这样妈妈就让他出门踢足球。他开始祈祷太阳早点升起，在他祈祷的时候，他发现，天慢慢变亮了，他继续祈祷，他发现太阳逐渐升起。约翰左思右想，得出这样的结论：如果他祈祷，太阳就会升起。错误点：将 先后 当 因果。在此之后≠因为如此。"}]